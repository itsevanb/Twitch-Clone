// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

// defining db modles

// defining user model with fields
model User {
  id String @id @default(uuid())
  username String @unique
  imageUrl String @db.Text
  externalUserId String @unique
  bio String? @db.Text
  
  following Follow[] @relation("Following")
  followedBy Follow[] @relation("FollowedBy")

  blocking Block[] @relation("Blocking")
  blockedBy Block[] @relation("BlockedBy")

  stream Stream?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
// stream model with fields
// db.Text is used for large text fields
model Stream {
  id String @id @default(uuid())
  name String @db.Text
  thumbnailUrl String? @db.Text

  ingress String? @unique
  serverUrl String? @db.Text
  streamKey String? @db.Text

  // stream options later will be connected with webhooks
  isLive Boolean @default(false)
  isChatEnabled Boolean @default(true)
  isChatDelayed Boolean @default(false)
  isChatFollowersOnly Boolean @default(false)

  // relation to user who created the stream
  userId String @unique
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([ingress])
  // stream will be searchable by name
  @@fulltext([name])
}

// defining following model with fields and relations to user model
model Follow {
  id String @id @default(uuid())
  followerId String
  followingId String

  follower User @relation(name: "Following", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation(name: "FollowedBy", fields: [followingId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

// defining blocking model with fields and relations to user model
model Block {
  id String @id @default(uuid())
  blockerId String
  blockedId String

  blocker User @relation(name: "Blocking", fields: [blockerId], references: [id], onDelete: Cascade)
  blocked User @relation(name: "BlockedBy", fields: [blockedId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // unique creates a index on the combination of the two fields
  @@unique([blockerId, blockedId])
  @@index([blockerId])
  @@index([blockedId])
}