"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/query-string";
exports.ids = ["vendor-chunks/query-string"];
exports.modules = {

/***/ "(ssr)/./node_modules/query-string/base.js":
/*!*******************************************!*\
  !*** ./node_modules/query-string/base.js ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   exclude: () => (/* binding */ exclude),\n/* harmony export */   extract: () => (/* binding */ extract),\n/* harmony export */   parse: () => (/* binding */ parse),\n/* harmony export */   parseUrl: () => (/* binding */ parseUrl),\n/* harmony export */   pick: () => (/* binding */ pick),\n/* harmony export */   stringify: () => (/* binding */ stringify),\n/* harmony export */   stringifyUrl: () => (/* binding */ stringifyUrl)\n/* harmony export */ });\n/* harmony import */ var decode_uri_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! decode-uri-component */ \"(ssr)/./node_modules/decode-uri-component/index.js\");\n/* harmony import */ var split_on_first__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! split-on-first */ \"(ssr)/./node_modules/split-on-first/index.js\");\n/* harmony import */ var filter_obj__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! filter-obj */ \"(ssr)/./node_modules/filter-obj/index.js\");\n\n\n\nconst isNullOrUndefined = (value)=>value === null || value === undefined;\n// eslint-disable-next-line unicorn/prefer-code-point\nconst strictUriEncode = (string)=>encodeURIComponent(string).replace(/[!'()*]/g, (x)=>`%${x.charCodeAt(0).toString(16).toUpperCase()}`);\nconst encodeFragmentIdentifier = Symbol(\"encodeFragmentIdentifier\");\nfunction encoderForArrayFormat(options) {\n    switch(options.arrayFormat){\n        case \"index\":\n            {\n                return (key)=>(result, value)=>{\n                        const index = result.length;\n                        if (value === undefined || options.skipNull && value === null || options.skipEmptyString && value === \"\") {\n                            return result;\n                        }\n                        if (value === null) {\n                            return [\n                                ...result,\n                                [\n                                    encode(key, options),\n                                    \"[\",\n                                    index,\n                                    \"]\"\n                                ].join(\"\")\n                            ];\n                        }\n                        return [\n                            ...result,\n                            [\n                                encode(key, options),\n                                \"[\",\n                                encode(index, options),\n                                \"]=\",\n                                encode(value, options)\n                            ].join(\"\")\n                        ];\n                    };\n            }\n        case \"bracket\":\n            {\n                return (key)=>(result, value)=>{\n                        if (value === undefined || options.skipNull && value === null || options.skipEmptyString && value === \"\") {\n                            return result;\n                        }\n                        if (value === null) {\n                            return [\n                                ...result,\n                                [\n                                    encode(key, options),\n                                    \"[]\"\n                                ].join(\"\")\n                            ];\n                        }\n                        return [\n                            ...result,\n                            [\n                                encode(key, options),\n                                \"[]=\",\n                                encode(value, options)\n                            ].join(\"\")\n                        ];\n                    };\n            }\n        case \"colon-list-separator\":\n            {\n                return (key)=>(result, value)=>{\n                        if (value === undefined || options.skipNull && value === null || options.skipEmptyString && value === \"\") {\n                            return result;\n                        }\n                        if (value === null) {\n                            return [\n                                ...result,\n                                [\n                                    encode(key, options),\n                                    \":list=\"\n                                ].join(\"\")\n                            ];\n                        }\n                        return [\n                            ...result,\n                            [\n                                encode(key, options),\n                                \":list=\",\n                                encode(value, options)\n                            ].join(\"\")\n                        ];\n                    };\n            }\n        case \"comma\":\n        case \"separator\":\n        case \"bracket-separator\":\n            {\n                const keyValueSep = options.arrayFormat === \"bracket-separator\" ? \"[]=\" : \"=\";\n                return (key)=>(result, value)=>{\n                        if (value === undefined || options.skipNull && value === null || options.skipEmptyString && value === \"\") {\n                            return result;\n                        }\n                        // Translate null to an empty string so that it doesn't serialize as 'null'\n                        value = value === null ? \"\" : value;\n                        if (result.length === 0) {\n                            return [\n                                [\n                                    encode(key, options),\n                                    keyValueSep,\n                                    encode(value, options)\n                                ].join(\"\")\n                            ];\n                        }\n                        return [\n                            [\n                                result,\n                                encode(value, options)\n                            ].join(options.arrayFormatSeparator)\n                        ];\n                    };\n            }\n        default:\n            {\n                return (key)=>(result, value)=>{\n                        if (value === undefined || options.skipNull && value === null || options.skipEmptyString && value === \"\") {\n                            return result;\n                        }\n                        if (value === null) {\n                            return [\n                                ...result,\n                                encode(key, options)\n                            ];\n                        }\n                        return [\n                            ...result,\n                            [\n                                encode(key, options),\n                                \"=\",\n                                encode(value, options)\n                            ].join(\"\")\n                        ];\n                    };\n            }\n    }\n}\nfunction parserForArrayFormat(options) {\n    let result;\n    switch(options.arrayFormat){\n        case \"index\":\n            {\n                return (key, value, accumulator)=>{\n                    result = /\\[(\\d*)]$/.exec(key);\n                    key = key.replace(/\\[\\d*]$/, \"\");\n                    if (!result) {\n                        accumulator[key] = value;\n                        return;\n                    }\n                    if (accumulator[key] === undefined) {\n                        accumulator[key] = {};\n                    }\n                    accumulator[key][result[1]] = value;\n                };\n            }\n        case \"bracket\":\n            {\n                return (key, value, accumulator)=>{\n                    result = /(\\[])$/.exec(key);\n                    key = key.replace(/\\[]$/, \"\");\n                    if (!result) {\n                        accumulator[key] = value;\n                        return;\n                    }\n                    if (accumulator[key] === undefined) {\n                        accumulator[key] = [\n                            value\n                        ];\n                        return;\n                    }\n                    accumulator[key] = [\n                        ...accumulator[key],\n                        value\n                    ];\n                };\n            }\n        case \"colon-list-separator\":\n            {\n                return (key, value, accumulator)=>{\n                    result = /(:list)$/.exec(key);\n                    key = key.replace(/:list$/, \"\");\n                    if (!result) {\n                        accumulator[key] = value;\n                        return;\n                    }\n                    if (accumulator[key] === undefined) {\n                        accumulator[key] = [\n                            value\n                        ];\n                        return;\n                    }\n                    accumulator[key] = [\n                        ...accumulator[key],\n                        value\n                    ];\n                };\n            }\n        case \"comma\":\n        case \"separator\":\n            {\n                return (key, value, accumulator)=>{\n                    const isArray = typeof value === \"string\" && value.includes(options.arrayFormatSeparator);\n                    const isEncodedArray = typeof value === \"string\" && !isArray && decode(value, options).includes(options.arrayFormatSeparator);\n                    value = isEncodedArray ? decode(value, options) : value;\n                    const newValue = isArray || isEncodedArray ? value.split(options.arrayFormatSeparator).map((item)=>decode(item, options)) : value === null ? value : decode(value, options);\n                    accumulator[key] = newValue;\n                };\n            }\n        case \"bracket-separator\":\n            {\n                return (key, value, accumulator)=>{\n                    const isArray = /(\\[])$/.test(key);\n                    key = key.replace(/\\[]$/, \"\");\n                    if (!isArray) {\n                        accumulator[key] = value ? decode(value, options) : value;\n                        return;\n                    }\n                    const arrayValue = value === null ? [] : value.split(options.arrayFormatSeparator).map((item)=>decode(item, options));\n                    if (accumulator[key] === undefined) {\n                        accumulator[key] = arrayValue;\n                        return;\n                    }\n                    accumulator[key] = [\n                        ...accumulator[key],\n                        ...arrayValue\n                    ];\n                };\n            }\n        default:\n            {\n                return (key, value, accumulator)=>{\n                    if (accumulator[key] === undefined) {\n                        accumulator[key] = value;\n                        return;\n                    }\n                    accumulator[key] = [\n                        ...[\n                            accumulator[key]\n                        ].flat(),\n                        value\n                    ];\n                };\n            }\n    }\n}\nfunction validateArrayFormatSeparator(value) {\n    if (typeof value !== \"string\" || value.length !== 1) {\n        throw new TypeError(\"arrayFormatSeparator must be single character string\");\n    }\n}\nfunction encode(value, options) {\n    if (options.encode) {\n        return options.strict ? strictUriEncode(value) : encodeURIComponent(value);\n    }\n    return value;\n}\nfunction decode(value, options) {\n    if (options.decode) {\n        return (0,decode_uri_component__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(value);\n    }\n    return value;\n}\nfunction keysSorter(input) {\n    if (Array.isArray(input)) {\n        return input.sort();\n    }\n    if (typeof input === \"object\") {\n        return keysSorter(Object.keys(input)).sort((a, b)=>Number(a) - Number(b)).map((key)=>input[key]);\n    }\n    return input;\n}\nfunction removeHash(input) {\n    const hashStart = input.indexOf(\"#\");\n    if (hashStart !== -1) {\n        input = input.slice(0, hashStart);\n    }\n    return input;\n}\nfunction getHash(url) {\n    let hash = \"\";\n    const hashStart = url.indexOf(\"#\");\n    if (hashStart !== -1) {\n        hash = url.slice(hashStart);\n    }\n    return hash;\n}\nfunction parseValue(value, options) {\n    if (options.parseNumbers && !Number.isNaN(Number(value)) && typeof value === \"string\" && value.trim() !== \"\") {\n        value = Number(value);\n    } else if (options.parseBooleans && value !== null && (value.toLowerCase() === \"true\" || value.toLowerCase() === \"false\")) {\n        value = value.toLowerCase() === \"true\";\n    }\n    return value;\n}\nfunction extract(input) {\n    input = removeHash(input);\n    const queryStart = input.indexOf(\"?\");\n    if (queryStart === -1) {\n        return \"\";\n    }\n    return input.slice(queryStart + 1);\n}\nfunction parse(query, options) {\n    options = {\n        decode: true,\n        sort: true,\n        arrayFormat: \"none\",\n        arrayFormatSeparator: \",\",\n        parseNumbers: false,\n        parseBooleans: false,\n        ...options\n    };\n    validateArrayFormatSeparator(options.arrayFormatSeparator);\n    const formatter = parserForArrayFormat(options);\n    // Create an object with no prototype\n    const returnValue = Object.create(null);\n    if (typeof query !== \"string\") {\n        return returnValue;\n    }\n    query = query.trim().replace(/^[?#&]/, \"\");\n    if (!query) {\n        return returnValue;\n    }\n    for (const parameter of query.split(\"&\")){\n        if (parameter === \"\") {\n            continue;\n        }\n        const parameter_ = options.decode ? parameter.replace(/\\+/g, \" \") : parameter;\n        let [key, value] = (0,split_on_first__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(parameter_, \"=\");\n        if (key === undefined) {\n            key = parameter_;\n        }\n        // Missing `=` should be `null`:\n        // http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters\n        value = value === undefined ? null : [\n            \"comma\",\n            \"separator\",\n            \"bracket-separator\"\n        ].includes(options.arrayFormat) ? value : decode(value, options);\n        formatter(decode(key, options), value, returnValue);\n    }\n    for (const [key, value] of Object.entries(returnValue)){\n        if (typeof value === \"object\" && value !== null) {\n            for (const [key2, value2] of Object.entries(value)){\n                value[key2] = parseValue(value2, options);\n            }\n        } else {\n            returnValue[key] = parseValue(value, options);\n        }\n    }\n    if (options.sort === false) {\n        return returnValue;\n    }\n    // TODO: Remove the use of `reduce`.\n    // eslint-disable-next-line unicorn/no-array-reduce\n    return (options.sort === true ? Object.keys(returnValue).sort() : Object.keys(returnValue).sort(options.sort)).reduce((result, key)=>{\n        const value = returnValue[key];\n        if (Boolean(value) && typeof value === \"object\" && !Array.isArray(value)) {\n            // Sort object keys, not values\n            result[key] = keysSorter(value);\n        } else {\n            result[key] = value;\n        }\n        return result;\n    }, Object.create(null));\n}\nfunction stringify(object, options) {\n    if (!object) {\n        return \"\";\n    }\n    options = {\n        encode: true,\n        strict: true,\n        arrayFormat: \"none\",\n        arrayFormatSeparator: \",\",\n        ...options\n    };\n    validateArrayFormatSeparator(options.arrayFormatSeparator);\n    const shouldFilter = (key)=>options.skipNull && isNullOrUndefined(object[key]) || options.skipEmptyString && object[key] === \"\";\n    const formatter = encoderForArrayFormat(options);\n    const objectCopy = {};\n    for (const [key, value] of Object.entries(object)){\n        if (!shouldFilter(key)) {\n            objectCopy[key] = value;\n        }\n    }\n    const keys = Object.keys(objectCopy);\n    if (options.sort !== false) {\n        keys.sort(options.sort);\n    }\n    return keys.map((key)=>{\n        const value = object[key];\n        if (value === undefined) {\n            return \"\";\n        }\n        if (value === null) {\n            return encode(key, options);\n        }\n        if (Array.isArray(value)) {\n            if (value.length === 0 && options.arrayFormat === \"bracket-separator\") {\n                return encode(key, options) + \"[]\";\n            }\n            return value.reduce(formatter(key), []).join(\"&\");\n        }\n        return encode(key, options) + \"=\" + encode(value, options);\n    }).filter((x)=>x.length > 0).join(\"&\");\n}\nfunction parseUrl(url, options) {\n    options = {\n        decode: true,\n        ...options\n    };\n    let [url_, hash] = (0,split_on_first__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(url, \"#\");\n    if (url_ === undefined) {\n        url_ = url;\n    }\n    return {\n        url: url_?.split(\"?\")?.[0] ?? \"\",\n        query: parse(extract(url), options),\n        ...options && options.parseFragmentIdentifier && hash ? {\n            fragmentIdentifier: decode(hash, options)\n        } : {}\n    };\n}\nfunction stringifyUrl(object, options) {\n    options = {\n        encode: true,\n        strict: true,\n        [encodeFragmentIdentifier]: true,\n        ...options\n    };\n    const url = removeHash(object.url).split(\"?\")[0] || \"\";\n    const queryFromUrl = extract(object.url);\n    const query = {\n        ...parse(queryFromUrl, {\n            sort: false\n        }),\n        ...object.query\n    };\n    let queryString = stringify(query, options);\n    if (queryString) {\n        queryString = `?${queryString}`;\n    }\n    let hash = getHash(object.url);\n    if (object.fragmentIdentifier) {\n        const urlObjectForFragmentEncode = new URL(url);\n        urlObjectForFragmentEncode.hash = object.fragmentIdentifier;\n        hash = options[encodeFragmentIdentifier] ? urlObjectForFragmentEncode.hash : `#${object.fragmentIdentifier}`;\n    }\n    return `${url}${queryString}${hash}`;\n}\nfunction pick(input, filter, options) {\n    options = {\n        parseFragmentIdentifier: true,\n        [encodeFragmentIdentifier]: false,\n        ...options\n    };\n    const { url, query, fragmentIdentifier } = parseUrl(input, options);\n    return stringifyUrl({\n        url,\n        query: (0,filter_obj__WEBPACK_IMPORTED_MODULE_2__.includeKeys)(query, filter),\n        fragmentIdentifier\n    }, options);\n}\nfunction exclude(input, filter, options) {\n    const exclusionFilter = Array.isArray(filter) ? (key)=>!filter.includes(key) : (key, value)=>!filter(key, value);\n    return pick(input, exclusionFilter, options);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/query-string/base.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/query-string/index.js":
/*!********************************************!*\
  !*** ./node_modules/query-string/index.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(ssr)/./node_modules/query-string/base.js\");\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_base_js__WEBPACK_IMPORTED_MODULE_0__);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcXVlcnktc3RyaW5nL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXlDO0FBRXpDLGlFQUFlQSxxQ0FBV0EsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3ZpZGVvLXN0cmVhbWluZy8uL25vZGVfbW9kdWxlcy9xdWVyeS1zdHJpbmcvaW5kZXguanM/YzQwMyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBxdWVyeVN0cmluZyBmcm9tICcuL2Jhc2UuanMnO1xuXG5leHBvcnQgZGVmYXVsdCBxdWVyeVN0cmluZztcbiJdLCJuYW1lcyI6WyJxdWVyeVN0cmluZyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/query-string/index.js\n");

/***/ })

};
;