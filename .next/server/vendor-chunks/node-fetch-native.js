/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/node-fetch-native";
exports.ids = ["vendor-chunks/node-fetch-native"];
exports.modules = {

/***/ "(rsc)/./node_modules/node-fetch-native/dist/chunks/multipart-parser.cjs":
/*!*************************************************************************!*\
  !*** ./node_modules/node-fetch-native/dist/chunks/multipart-parser.cjs ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n__webpack_require__(/*! node:fs */ \"node:fs\");\n__webpack_require__(/*! node:path */ \"node:path\");\nconst abortController = __webpack_require__(/*! ../shared/node-fetch-native.8afd3fea.cjs */ \"(rsc)/./node_modules/node-fetch-native/dist/shared/node-fetch-native.8afd3fea.cjs\");\n__webpack_require__(/*! node:http */ \"node:http\");\n__webpack_require__(/*! node:https */ \"node:https\");\n__webpack_require__(/*! node:zlib */ \"node:zlib\");\n__webpack_require__(/*! node:stream */ \"node:stream\");\n__webpack_require__(/*! node:buffer */ \"node:buffer\");\n__webpack_require__(/*! node:util */ \"node:util\");\n__webpack_require__(/*! node:url */ \"node:url\");\n__webpack_require__(/*! node:net */ \"node:net\");\nlet s = 0;\nconst S = {\n    START_BOUNDARY: s++,\n    HEADER_FIELD_START: s++,\n    HEADER_FIELD: s++,\n    HEADER_VALUE_START: s++,\n    HEADER_VALUE: s++,\n    HEADER_VALUE_ALMOST_DONE: s++,\n    HEADERS_ALMOST_DONE: s++,\n    PART_DATA_START: s++,\n    PART_DATA: s++,\n    END: s++\n};\nlet f = 1;\nconst F = {\n    PART_BOUNDARY: f,\n    LAST_BOUNDARY: f *= 2\n};\nconst LF = 10;\nconst CR = 13;\nconst SPACE = 32;\nconst HYPHEN = 45;\nconst COLON = 58;\nconst A = 97;\nconst Z = 122;\nconst lower = (c)=>c | 0x20;\nconst noop = ()=>{};\nclass MultipartParser {\n    /**\n\t * @param {string} boundary\n\t */ constructor(boundary){\n        this.index = 0;\n        this.flags = 0;\n        this.onHeaderEnd = noop;\n        this.onHeaderField = noop;\n        this.onHeadersEnd = noop;\n        this.onHeaderValue = noop;\n        this.onPartBegin = noop;\n        this.onPartData = noop;\n        this.onPartEnd = noop;\n        this.boundaryChars = {};\n        boundary = \"\\r\\n--\" + boundary;\n        const ui8a = new Uint8Array(boundary.length);\n        for(let i = 0; i < boundary.length; i++){\n            ui8a[i] = boundary.charCodeAt(i);\n            this.boundaryChars[ui8a[i]] = true;\n        }\n        this.boundary = ui8a;\n        this.lookbehind = new Uint8Array(this.boundary.length + 8);\n        this.state = S.START_BOUNDARY;\n    }\n    /**\n\t * @param {Uint8Array} data\n\t */ write(data) {\n        let i = 0;\n        const length_ = data.length;\n        let previousIndex = this.index;\n        let { lookbehind, boundary, boundaryChars, index, state, flags } = this;\n        const boundaryLength = this.boundary.length;\n        const boundaryEnd = boundaryLength - 1;\n        const bufferLength = data.length;\n        let c;\n        let cl;\n        const mark = (name)=>{\n            this[name + \"Mark\"] = i;\n        };\n        const clear = (name)=>{\n            delete this[name + \"Mark\"];\n        };\n        const callback = (callbackSymbol, start, end, ui8a)=>{\n            if (start === undefined || start !== end) {\n                this[callbackSymbol](ui8a && ui8a.subarray(start, end));\n            }\n        };\n        const dataCallback = (name, clear)=>{\n            const markSymbol = name + \"Mark\";\n            if (!(markSymbol in this)) {\n                return;\n            }\n            if (clear) {\n                callback(name, this[markSymbol], i, data);\n                delete this[markSymbol];\n            } else {\n                callback(name, this[markSymbol], data.length, data);\n                this[markSymbol] = 0;\n            }\n        };\n        for(i = 0; i < length_; i++){\n            c = data[i];\n            switch(state){\n                case S.START_BOUNDARY:\n                    if (index === boundary.length - 2) {\n                        if (c === HYPHEN) {\n                            flags |= F.LAST_BOUNDARY;\n                        } else if (c !== CR) {\n                            return;\n                        }\n                        index++;\n                        break;\n                    } else if (index - 1 === boundary.length - 2) {\n                        if (flags & F.LAST_BOUNDARY && c === HYPHEN) {\n                            state = S.END;\n                            flags = 0;\n                        } else if (!(flags & F.LAST_BOUNDARY) && c === LF) {\n                            index = 0;\n                            callback(\"onPartBegin\");\n                            state = S.HEADER_FIELD_START;\n                        } else {\n                            return;\n                        }\n                        break;\n                    }\n                    if (c !== boundary[index + 2]) {\n                        index = -2;\n                    }\n                    if (c === boundary[index + 2]) {\n                        index++;\n                    }\n                    break;\n                case S.HEADER_FIELD_START:\n                    state = S.HEADER_FIELD;\n                    mark(\"onHeaderField\");\n                    index = 0;\n                // falls through\n                case S.HEADER_FIELD:\n                    if (c === CR) {\n                        clear(\"onHeaderField\");\n                        state = S.HEADERS_ALMOST_DONE;\n                        break;\n                    }\n                    index++;\n                    if (c === HYPHEN) {\n                        break;\n                    }\n                    if (c === COLON) {\n                        if (index === 1) {\n                            // empty header field\n                            return;\n                        }\n                        dataCallback(\"onHeaderField\", true);\n                        state = S.HEADER_VALUE_START;\n                        break;\n                    }\n                    cl = lower(c);\n                    if (cl < A || cl > Z) {\n                        return;\n                    }\n                    break;\n                case S.HEADER_VALUE_START:\n                    if (c === SPACE) {\n                        break;\n                    }\n                    mark(\"onHeaderValue\");\n                    state = S.HEADER_VALUE;\n                // falls through\n                case S.HEADER_VALUE:\n                    if (c === CR) {\n                        dataCallback(\"onHeaderValue\", true);\n                        callback(\"onHeaderEnd\");\n                        state = S.HEADER_VALUE_ALMOST_DONE;\n                    }\n                    break;\n                case S.HEADER_VALUE_ALMOST_DONE:\n                    if (c !== LF) {\n                        return;\n                    }\n                    state = S.HEADER_FIELD_START;\n                    break;\n                case S.HEADERS_ALMOST_DONE:\n                    if (c !== LF) {\n                        return;\n                    }\n                    callback(\"onHeadersEnd\");\n                    state = S.PART_DATA_START;\n                    break;\n                case S.PART_DATA_START:\n                    state = S.PART_DATA;\n                    mark(\"onPartData\");\n                // falls through\n                case S.PART_DATA:\n                    previousIndex = index;\n                    if (index === 0) {\n                        // boyer-moore derrived algorithm to safely skip non-boundary data\n                        i += boundaryEnd;\n                        while(i < bufferLength && !(data[i] in boundaryChars)){\n                            i += boundaryLength;\n                        }\n                        i -= boundaryEnd;\n                        c = data[i];\n                    }\n                    if (index < boundary.length) {\n                        if (boundary[index] === c) {\n                            if (index === 0) {\n                                dataCallback(\"onPartData\", true);\n                            }\n                            index++;\n                        } else {\n                            index = 0;\n                        }\n                    } else if (index === boundary.length) {\n                        index++;\n                        if (c === CR) {\n                            // CR = part boundary\n                            flags |= F.PART_BOUNDARY;\n                        } else if (c === HYPHEN) {\n                            // HYPHEN = end boundary\n                            flags |= F.LAST_BOUNDARY;\n                        } else {\n                            index = 0;\n                        }\n                    } else if (index - 1 === boundary.length) {\n                        if (flags & F.PART_BOUNDARY) {\n                            index = 0;\n                            if (c === LF) {\n                                // unset the PART_BOUNDARY flag\n                                flags &= ~F.PART_BOUNDARY;\n                                callback(\"onPartEnd\");\n                                callback(\"onPartBegin\");\n                                state = S.HEADER_FIELD_START;\n                                break;\n                            }\n                        } else if (flags & F.LAST_BOUNDARY) {\n                            if (c === HYPHEN) {\n                                callback(\"onPartEnd\");\n                                state = S.END;\n                                flags = 0;\n                            } else {\n                                index = 0;\n                            }\n                        } else {\n                            index = 0;\n                        }\n                    }\n                    if (index > 0) {\n                        // when matching a possible boundary, keep a lookbehind reference\n                        // in case it turns out to be a false lead\n                        lookbehind[index - 1] = c;\n                    } else if (previousIndex > 0) {\n                        // if our boundary turned out to be rubbish, the captured lookbehind\n                        // belongs to partData\n                        const _lookbehind = new Uint8Array(lookbehind.buffer, lookbehind.byteOffset, lookbehind.byteLength);\n                        callback(\"onPartData\", 0, previousIndex, _lookbehind);\n                        previousIndex = 0;\n                        mark(\"onPartData\");\n                        // reconsider the current character even so it interrupted the sequence\n                        // it could be the beginning of a new sequence\n                        i--;\n                    }\n                    break;\n                case S.END:\n                    break;\n                default:\n                    throw new Error(`Unexpected state entered: ${state}`);\n            }\n        }\n        dataCallback(\"onHeaderField\");\n        dataCallback(\"onHeaderValue\");\n        dataCallback(\"onPartData\");\n        // Update properties for the next call\n        this.index = index;\n        this.state = state;\n        this.flags = flags;\n    }\n    end() {\n        if (this.state === S.HEADER_FIELD_START && this.index === 0 || this.state === S.PART_DATA && this.index === this.boundary.length) {\n            this.onPartEnd();\n        } else if (this.state !== S.END) {\n            throw new Error(\"MultipartParser.end(): stream ended unexpectedly\");\n        }\n    }\n}\nfunction _fileName(headerValue) {\n    // matches either a quoted-string or a token (RFC 2616 section 19.5.1)\n    const m = headerValue.match(/\\bfilename=(\"(.*?)\"|([^()<>@,;:\\\\\"/[\\]?={}\\s\\t]+))($|;\\s)/i);\n    if (!m) {\n        return;\n    }\n    const match = m[2] || m[3] || \"\";\n    let filename = match.slice(match.lastIndexOf(\"\\\\\") + 1);\n    filename = filename.replace(/%22/g, '\"');\n    filename = filename.replace(/&#(\\d{4});/g, (m, code)=>{\n        return String.fromCharCode(code);\n    });\n    return filename;\n}\nasync function toFormData(Body, ct) {\n    if (!/multipart/i.test(ct)) {\n        throw new TypeError(\"Failed to fetch\");\n    }\n    const m = ct.match(/boundary=(?:\"([^\"]+)\"|([^;]+))/i);\n    if (!m) {\n        throw new TypeError(\"no or bad content-type header, no multipart boundary\");\n    }\n    const parser = new MultipartParser(m[1] || m[2]);\n    let headerField;\n    let headerValue;\n    let entryValue;\n    let entryName;\n    let contentType;\n    let filename;\n    const entryChunks = [];\n    const formData = new abortController.FormData();\n    const onPartData = (ui8a)=>{\n        entryValue += decoder.decode(ui8a, {\n            stream: true\n        });\n    };\n    const appendToFile = (ui8a)=>{\n        entryChunks.push(ui8a);\n    };\n    const appendFileToFormData = ()=>{\n        const file = new abortController.File(entryChunks, filename, {\n            type: contentType\n        });\n        formData.append(entryName, file);\n    };\n    const appendEntryToFormData = ()=>{\n        formData.append(entryName, entryValue);\n    };\n    const decoder = new TextDecoder(\"utf-8\");\n    decoder.decode();\n    parser.onPartBegin = function() {\n        parser.onPartData = onPartData;\n        parser.onPartEnd = appendEntryToFormData;\n        headerField = \"\";\n        headerValue = \"\";\n        entryValue = \"\";\n        entryName = \"\";\n        contentType = \"\";\n        filename = null;\n        entryChunks.length = 0;\n    };\n    parser.onHeaderField = function(ui8a) {\n        headerField += decoder.decode(ui8a, {\n            stream: true\n        });\n    };\n    parser.onHeaderValue = function(ui8a) {\n        headerValue += decoder.decode(ui8a, {\n            stream: true\n        });\n    };\n    parser.onHeaderEnd = function() {\n        headerValue += decoder.decode();\n        headerField = headerField.toLowerCase();\n        if (headerField === \"content-disposition\") {\n            // matches either a quoted-string or a token (RFC 2616 section 19.5.1)\n            const m = headerValue.match(/\\bname=(\"([^\"]*)\"|([^()<>@,;:\\\\\"/[\\]?={}\\s\\t]+))/i);\n            if (m) {\n                entryName = m[2] || m[3] || \"\";\n            }\n            filename = _fileName(headerValue);\n            if (filename) {\n                parser.onPartData = appendToFile;\n                parser.onPartEnd = appendFileToFormData;\n            }\n        } else if (headerField === \"content-type\") {\n            contentType = headerValue;\n        }\n        headerValue = \"\";\n        headerField = \"\";\n    };\n    for await (const chunk of Body){\n        parser.write(chunk);\n    }\n    parser.end();\n    return formData;\n}\nexports.toFormData = toFormData;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-fetch-native/dist/chunks/multipart-parser.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-fetch-native/dist/index.cjs":
/*!*******************************************************!*\
  !*** ./node_modules/node-fetch-native/dist/index.cjs ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst abortController = __webpack_require__(/*! ./shared/node-fetch-native.8afd3fea.cjs */ \"(rsc)/./node_modules/node-fetch-native/dist/shared/node-fetch-native.8afd3fea.cjs\");\nconst node_fs = __webpack_require__(/*! node:fs */ \"node:fs\");\nconst node_path = __webpack_require__(/*! node:path */ \"node:path\");\n__webpack_require__(/*! node:http */ \"node:http\");\n__webpack_require__(/*! node:https */ \"node:https\");\n__webpack_require__(/*! node:zlib */ \"node:zlib\");\n__webpack_require__(/*! node:stream */ \"node:stream\");\n__webpack_require__(/*! node:buffer */ \"node:buffer\");\n__webpack_require__(/*! node:util */ \"node:util\");\n__webpack_require__(/*! node:url */ \"node:url\");\n__webpack_require__(/*! node:net */ \"node:net\");\nconst { stat } = node_fs.promises;\n/**\n * @param {string} path filepath on the disk\n * @param {string} [type] mimetype to use\n */ const blobFromSync = (path, type)=>fromBlob(node_fs.statSync(path), path, type);\n/**\n * @param {string} path filepath on the disk\n * @param {string} [type] mimetype to use\n * @returns {Promise<Blob>}\n */ const blobFrom = (path, type)=>stat(path).then((stat)=>fromBlob(stat, path, type));\n/**\n * @param {string} path filepath on the disk\n * @param {string} [type] mimetype to use\n * @returns {Promise<File>}\n */ const fileFrom = (path, type)=>stat(path).then((stat)=>fromFile(stat, path, type));\n/**\n * @param {string} path filepath on the disk\n * @param {string} [type] mimetype to use\n */ const fileFromSync = (path, type)=>fromFile(node_fs.statSync(path), path, type);\n// @ts-ignore\nconst fromBlob = (stat, path, type = \"\")=>new abortController._Blob([\n        new BlobDataItem({\n            path,\n            size: stat.size,\n            lastModified: stat.mtimeMs,\n            start: 0\n        })\n    ], {\n        type\n    });\n// @ts-ignore\nconst fromFile = (stat, path, type = \"\")=>new abortController.File([\n        new BlobDataItem({\n            path,\n            size: stat.size,\n            lastModified: stat.mtimeMs,\n            start: 0\n        })\n    ], node_path.basename(path), {\n        type,\n        lastModified: stat.mtimeMs\n    });\n/**\n * This is a blob backed up by a file on the disk\n * with minium requirement. Its wrapped around a Blob as a blobPart\n * so you have no direct access to this.\n *\n * @private\n */ class BlobDataItem {\n    #path;\n    #start;\n    constructor(options){\n        this.#path = options.path;\n        this.#start = options.start;\n        this.size = options.size;\n        this.lastModified = options.lastModified;\n        this.originalSize = options.originalSize === undefined ? options.size : options.originalSize;\n    }\n    /**\n   * Slicing arguments is first validated and formatted\n   * to not be out of range by Blob.prototype.slice\n   */ slice(start, end) {\n        return new BlobDataItem({\n            path: this.#path,\n            lastModified: this.lastModified,\n            originalSize: this.originalSize,\n            size: end - start,\n            start: this.#start + start\n        });\n    }\n    async *stream() {\n        const { mtimeMs, size } = await stat(this.#path);\n        if (mtimeMs > this.lastModified || this.originalSize !== size) {\n            throw new abortController.nodeDomexception(\"The requested file could not be read, typically due to permission problems that have occurred after a reference to a file was acquired.\", \"NotReadableError\");\n        }\n        yield* node_fs.createReadStream(this.#path, {\n            start: this.#start,\n            end: this.#start + this.size - 1\n        });\n    }\n    get [Symbol.toStringTag]() {\n        return \"Blob\";\n    }\n}\nconst fetch = globalThis.fetch || abortController.fetch;\nconst Blob = globalThis.Blob || abortController._Blob;\nconst File = globalThis.File || abortController.File;\nconst FormData = globalThis.FormData || abortController.FormData;\nconst Headers = globalThis.Headers || abortController.Headers;\nconst Request = globalThis.Request || abortController.Request;\nconst Response = globalThis.Response || abortController.Response;\nconst AbortController = globalThis.AbortController || abortController.AbortController;\nexports.AbortError = abortController.AbortError;\nexports.FetchError = abortController.FetchError;\nexports.isRedirect = abortController.isRedirect;\nexports.AbortController = AbortController;\nexports.Blob = Blob;\nexports.File = File;\nexports.FormData = FormData;\nexports.Headers = Headers;\nexports.Request = Request;\nexports.Response = Response;\nexports.blobFrom = blobFrom;\nexports.blobFromSync = blobFromSync;\nexports[\"default\"] = fetch;\nexports.fetch = fetch;\nexports.fileFrom = fileFrom;\nexports.fileFromSync = fileFromSync;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-fetch-native/dist/index.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-fetch-native/dist/shared/node-fetch-native.8afd3fea.cjs":
/*!***********************************************************************************!*\
  !*** ./node_modules/node-fetch-native/dist/shared/node-fetch-native.8afd3fea.cjs ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nconst http = __webpack_require__(/*! node:http */ \"node:http\");\nconst https = __webpack_require__(/*! node:https */ \"node:https\");\nconst zlib = __webpack_require__(/*! node:zlib */ \"node:zlib\");\nconst Stream = __webpack_require__(/*! node:stream */ \"node:stream\");\nconst node_buffer = __webpack_require__(/*! node:buffer */ \"node:buffer\");\nconst node_util = __webpack_require__(/*! node:util */ \"node:util\");\nconst node_url = __webpack_require__(/*! node:url */ \"node:url\");\nconst node_net = __webpack_require__(/*! node:net */ \"node:net\");\n__webpack_require__(/*! node:fs */ \"node:fs\");\n__webpack_require__(/*! node:path */ \"node:path\");\n/**\n * Returns a `Buffer` instance from the given data URI `uri`.\n *\n * @param {String} uri Data URI to turn into a Buffer instance\n * @returns {Buffer} Buffer instance from Data URI\n * @api public\n */ function dataUriToBuffer(uri) {\n    if (!/^data:/i.test(uri)) {\n        throw new TypeError('`uri` does not appear to be a Data URI (must begin with \"data:\")');\n    }\n    // strip newlines\n    uri = uri.replace(/\\r?\\n/g, \"\");\n    // split the URI up into the \"metadata\" and the \"data\" portions\n    const firstComma = uri.indexOf(\",\");\n    if (firstComma === -1 || firstComma <= 4) {\n        throw new TypeError(\"malformed data: URI\");\n    }\n    // remove the \"data:\" scheme and parse the metadata\n    const meta = uri.substring(5, firstComma).split(\";\");\n    let charset = \"\";\n    let base64 = false;\n    const type = meta[0] || \"text/plain\";\n    let typeFull = type;\n    for(let i = 1; i < meta.length; i++){\n        if (meta[i] === \"base64\") {\n            base64 = true;\n        } else {\n            typeFull += `;${meta[i]}`;\n            if (meta[i].indexOf(\"charset=\") === 0) {\n                charset = meta[i].substring(8);\n            }\n        }\n    }\n    // defaults to US-ASCII only if type is not provided\n    if (!meta[0] && !charset.length) {\n        typeFull += \";charset=US-ASCII\";\n        charset = \"US-ASCII\";\n    }\n    // get the encoded data portion and decode URI-encoded chars\n    const encoding = base64 ? \"base64\" : \"ascii\";\n    const data = unescape(uri.substring(firstComma + 1));\n    const buffer = Buffer.from(data, encoding);\n    // set `.type` and `.typeFull` properties to MIME type\n    buffer.type = type;\n    buffer.typeFull = typeFull;\n    // set the `.charset` property\n    buffer.charset = charset;\n    return buffer;\n}\nvar commonjsGlobal = typeof globalThis !== \"undefined\" ? globalThis :  false ? 0 : typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : {};\nvar ponyfill_es2018 = {\n    exports: {}\n};\n/**\n * web-streams-polyfill v3.2.1\n */ var hasRequiredPonyfill_es2018;\nfunction requirePonyfill_es2018() {\n    if (hasRequiredPonyfill_es2018) return ponyfill_es2018.exports;\n    hasRequiredPonyfill_es2018 = 1;\n    (function(module, exports1) {\n        (function(global1, factory) {\n            factory(exports1);\n        })(commonjsGlobal, function(exports1) {\n            /// <reference lib=\"es2015.symbol\" />\n            const SymbolPolyfill = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? Symbol : (description)=>`Symbol(${description})`;\n            /// <reference lib=\"dom\" />\n            function noop() {\n                return undefined;\n            }\n            function getGlobals() {\n                if (typeof self !== \"undefined\") {\n                    return self;\n                } else if (false) {} else if (typeof commonjsGlobal !== \"undefined\") {\n                    return commonjsGlobal;\n                }\n                return undefined;\n            }\n            const globals = getGlobals();\n            function typeIsObject(x) {\n                return typeof x === \"object\" && x !== null || typeof x === \"function\";\n            }\n            const rethrowAssertionErrorRejection = noop;\n            const originalPromise = Promise;\n            const originalPromiseThen = Promise.prototype.then;\n            const originalPromiseResolve = Promise.resolve.bind(originalPromise);\n            const originalPromiseReject = Promise.reject.bind(originalPromise);\n            function newPromise(executor) {\n                return new originalPromise(executor);\n            }\n            function promiseResolvedWith(value1) {\n                return originalPromiseResolve(value1);\n            }\n            function promiseRejectedWith(reason) {\n                return originalPromiseReject(reason);\n            }\n            function PerformPromiseThen(promise, onFulfilled, onRejected) {\n                // There doesn't appear to be any way to correctly emulate the behaviour from JavaScript, so this is just an\n                // approximation.\n                return originalPromiseThen.call(promise, onFulfilled, onRejected);\n            }\n            function uponPromise(promise, onFulfilled, onRejected) {\n                PerformPromiseThen(PerformPromiseThen(promise, onFulfilled, onRejected), undefined, rethrowAssertionErrorRejection);\n            }\n            function uponFulfillment(promise, onFulfilled) {\n                uponPromise(promise, onFulfilled);\n            }\n            function uponRejection(promise, onRejected) {\n                uponPromise(promise, undefined, onRejected);\n            }\n            function transformPromiseWith(promise, fulfillmentHandler, rejectionHandler) {\n                return PerformPromiseThen(promise, fulfillmentHandler, rejectionHandler);\n            }\n            function setPromiseIsHandledToTrue(promise) {\n                PerformPromiseThen(promise, undefined, rethrowAssertionErrorRejection);\n            }\n            const queueMicrotask = (()=>{\n                const globalQueueMicrotask = globals && globals.queueMicrotask;\n                if (typeof globalQueueMicrotask === \"function\") {\n                    return globalQueueMicrotask;\n                }\n                const resolvedPromise = promiseResolvedWith(undefined);\n                return (fn)=>PerformPromiseThen(resolvedPromise, fn);\n            })();\n            function reflectCall(F, V, args) {\n                if (typeof F !== \"function\") {\n                    throw new TypeError(\"Argument is not a function\");\n                }\n                return Function.prototype.apply.call(F, V, args);\n            }\n            function promiseCall(F, V, args) {\n                try {\n                    return promiseResolvedWith(reflectCall(F, V, args));\n                } catch (value1) {\n                    return promiseRejectedWith(value1);\n                }\n            }\n            // Original from Chromium\n            // https://chromium.googlesource.com/chromium/src/+/0aee4434a4dba42a42abaea9bfbc0cd196a63bc1/third_party/blink/renderer/core/streams/SimpleQueue.js\n            const QUEUE_MAX_ARRAY_SIZE = 16384;\n            /**\n\t\t     * Simple queue structure.\n\t\t     *\n\t\t     * Avoids scalability issues with using a packed array directly by using\n\t\t     * multiple arrays in a linked list and keeping the array size bounded.\n\t\t     */ class SimpleQueue {\n                constructor(){\n                    this._cursor = 0;\n                    this._size = 0;\n                    // _front and _back are always defined.\n                    this._front = {\n                        _elements: [],\n                        _next: undefined\n                    };\n                    this._back = this._front;\n                    // The cursor is used to avoid calling Array.shift().\n                    // It contains the index of the front element of the array inside the\n                    // front-most node. It is always in the range [0, QUEUE_MAX_ARRAY_SIZE).\n                    this._cursor = 0;\n                    // When there is only one node, size === elements.length - cursor.\n                    this._size = 0;\n                }\n                get length() {\n                    return this._size;\n                }\n                // For exception safety, this method is structured in order:\n                // 1. Read state\n                // 2. Calculate required state mutations\n                // 3. Perform state mutations\n                push(element) {\n                    const oldBack = this._back;\n                    let newBack = oldBack;\n                    if (oldBack._elements.length === QUEUE_MAX_ARRAY_SIZE - 1) {\n                        newBack = {\n                            _elements: [],\n                            _next: undefined\n                        };\n                    }\n                    // push() is the mutation most likely to throw an exception, so it\n                    // goes first.\n                    oldBack._elements.push(element);\n                    if (newBack !== oldBack) {\n                        this._back = newBack;\n                        oldBack._next = newBack;\n                    }\n                    ++this._size;\n                }\n                // Like push(), shift() follows the read -> calculate -> mutate pattern for\n                // exception safety.\n                shift() {\n                    const oldFront = this._front;\n                    let newFront = oldFront;\n                    const oldCursor = this._cursor;\n                    let newCursor = oldCursor + 1;\n                    const elements = oldFront._elements;\n                    const element = elements[oldCursor];\n                    if (newCursor === QUEUE_MAX_ARRAY_SIZE) {\n                        newFront = oldFront._next;\n                        newCursor = 0;\n                    }\n                    // No mutations before this point.\n                    --this._size;\n                    this._cursor = newCursor;\n                    if (oldFront !== newFront) {\n                        this._front = newFront;\n                    }\n                    // Permit shifted element to be garbage collected.\n                    elements[oldCursor] = undefined;\n                    return element;\n                }\n                // The tricky thing about forEach() is that it can be called\n                // re-entrantly. The queue may be mutated inside the callback. It is easy to\n                // see that push() within the callback has no negative effects since the end\n                // of the queue is checked for on every iteration. If shift() is called\n                // repeatedly within the callback then the next iteration may return an\n                // element that has been removed. In this case the callback will be called\n                // with undefined values until we either \"catch up\" with elements that still\n                // exist or reach the back of the queue.\n                forEach(callback) {\n                    let i = this._cursor;\n                    let node = this._front;\n                    let elements = node._elements;\n                    while(i !== elements.length || node._next !== undefined){\n                        if (i === elements.length) {\n                            node = node._next;\n                            elements = node._elements;\n                            i = 0;\n                            if (elements.length === 0) {\n                                break;\n                            }\n                        }\n                        callback(elements[i]);\n                        ++i;\n                    }\n                }\n                // Return the element that would be returned if shift() was called now,\n                // without modifying the queue.\n                peek() {\n                    const front = this._front;\n                    const cursor = this._cursor;\n                    return front._elements[cursor];\n                }\n            }\n            function ReadableStreamReaderGenericInitialize(reader, stream) {\n                reader._ownerReadableStream = stream;\n                stream._reader = reader;\n                if (stream._state === \"readable\") {\n                    defaultReaderClosedPromiseInitialize(reader);\n                } else if (stream._state === \"closed\") {\n                    defaultReaderClosedPromiseInitializeAsResolved(reader);\n                } else {\n                    defaultReaderClosedPromiseInitializeAsRejected(reader, stream._storedError);\n                }\n            }\n            // A client of ReadableStreamDefaultReader and ReadableStreamBYOBReader may use these functions directly to bypass state\n            // check.\n            function ReadableStreamReaderGenericCancel(reader, reason) {\n                const stream = reader._ownerReadableStream;\n                return ReadableStreamCancel(stream, reason);\n            }\n            function ReadableStreamReaderGenericRelease(reader) {\n                if (reader._ownerReadableStream._state === \"readable\") {\n                    defaultReaderClosedPromiseReject(reader, new TypeError(`Reader was released and can no longer be used to monitor the stream's closedness`));\n                } else {\n                    defaultReaderClosedPromiseResetToRejected(reader, new TypeError(`Reader was released and can no longer be used to monitor the stream's closedness`));\n                }\n                reader._ownerReadableStream._reader = undefined;\n                reader._ownerReadableStream = undefined;\n            }\n            // Helper functions for the readers.\n            function readerLockException(name) {\n                return new TypeError(\"Cannot \" + name + \" a stream using a released reader\");\n            }\n            // Helper functions for the ReadableStreamDefaultReader.\n            function defaultReaderClosedPromiseInitialize(reader) {\n                reader._closedPromise = newPromise((resolve, reject)=>{\n                    reader._closedPromise_resolve = resolve;\n                    reader._closedPromise_reject = reject;\n                });\n            }\n            function defaultReaderClosedPromiseInitializeAsRejected(reader, reason) {\n                defaultReaderClosedPromiseInitialize(reader);\n                defaultReaderClosedPromiseReject(reader, reason);\n            }\n            function defaultReaderClosedPromiseInitializeAsResolved(reader) {\n                defaultReaderClosedPromiseInitialize(reader);\n                defaultReaderClosedPromiseResolve(reader);\n            }\n            function defaultReaderClosedPromiseReject(reader, reason) {\n                if (reader._closedPromise_reject === undefined) {\n                    return;\n                }\n                setPromiseIsHandledToTrue(reader._closedPromise);\n                reader._closedPromise_reject(reason);\n                reader._closedPromise_resolve = undefined;\n                reader._closedPromise_reject = undefined;\n            }\n            function defaultReaderClosedPromiseResetToRejected(reader, reason) {\n                defaultReaderClosedPromiseInitializeAsRejected(reader, reason);\n            }\n            function defaultReaderClosedPromiseResolve(reader) {\n                if (reader._closedPromise_resolve === undefined) {\n                    return;\n                }\n                reader._closedPromise_resolve(undefined);\n                reader._closedPromise_resolve = undefined;\n                reader._closedPromise_reject = undefined;\n            }\n            const AbortSteps = SymbolPolyfill(\"[[AbortSteps]]\");\n            const ErrorSteps = SymbolPolyfill(\"[[ErrorSteps]]\");\n            const CancelSteps = SymbolPolyfill(\"[[CancelSteps]]\");\n            const PullSteps = SymbolPolyfill(\"[[PullSteps]]\");\n            /// <reference lib=\"es2015.core\" />\n            // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isFinite#Polyfill\n            const NumberIsFinite = Number.isFinite || function(x) {\n                return typeof x === \"number\" && isFinite(x);\n            };\n            /// <reference lib=\"es2015.core\" />\n            // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc#Polyfill\n            const MathTrunc = Math.trunc || function(v) {\n                return v < 0 ? Math.ceil(v) : Math.floor(v);\n            };\n            // https://heycam.github.io/webidl/#idl-dictionaries\n            function isDictionary(x) {\n                return typeof x === \"object\" || typeof x === \"function\";\n            }\n            function assertDictionary(obj, context) {\n                if (obj !== undefined && !isDictionary(obj)) {\n                    throw new TypeError(`${context} is not an object.`);\n                }\n            }\n            // https://heycam.github.io/webidl/#idl-callback-functions\n            function assertFunction(x, context) {\n                if (typeof x !== \"function\") {\n                    throw new TypeError(`${context} is not a function.`);\n                }\n            }\n            // https://heycam.github.io/webidl/#idl-object\n            function isObject(x) {\n                return typeof x === \"object\" && x !== null || typeof x === \"function\";\n            }\n            function assertObject(x, context) {\n                if (!isObject(x)) {\n                    throw new TypeError(`${context} is not an object.`);\n                }\n            }\n            function assertRequiredArgument(x, position, context) {\n                if (x === undefined) {\n                    throw new TypeError(`Parameter ${position} is required in '${context}'.`);\n                }\n            }\n            function assertRequiredField(x, field, context) {\n                if (x === undefined) {\n                    throw new TypeError(`${field} is required in '${context}'.`);\n                }\n            }\n            // https://heycam.github.io/webidl/#idl-unrestricted-double\n            function convertUnrestrictedDouble(value1) {\n                return Number(value1);\n            }\n            function censorNegativeZero(x) {\n                return x === 0 ? 0 : x;\n            }\n            function integerPart(x) {\n                return censorNegativeZero(MathTrunc(x));\n            }\n            // https://heycam.github.io/webidl/#idl-unsigned-long-long\n            function convertUnsignedLongLongWithEnforceRange(value1, context) {\n                const lowerBound = 0;\n                const upperBound = Number.MAX_SAFE_INTEGER;\n                let x = Number(value1);\n                x = censorNegativeZero(x);\n                if (!NumberIsFinite(x)) {\n                    throw new TypeError(`${context} is not a finite number`);\n                }\n                x = integerPart(x);\n                if (x < lowerBound || x > upperBound) {\n                    throw new TypeError(`${context} is outside the accepted range of ${lowerBound} to ${upperBound}, inclusive`);\n                }\n                if (!NumberIsFinite(x) || x === 0) {\n                    return 0;\n                }\n                // TODO Use BigInt if supported?\n                // let xBigInt = BigInt(integerPart(x));\n                // xBigInt = BigInt.asUintN(64, xBigInt);\n                // return Number(xBigInt);\n                return x;\n            }\n            function assertReadableStream(x, context) {\n                if (!IsReadableStream(x)) {\n                    throw new TypeError(`${context} is not a ReadableStream.`);\n                }\n            }\n            // Abstract operations for the ReadableStream.\n            function AcquireReadableStreamDefaultReader(stream) {\n                return new ReadableStreamDefaultReader(stream);\n            }\n            // ReadableStream API exposed for controllers.\n            function ReadableStreamAddReadRequest(stream, readRequest) {\n                stream._reader._readRequests.push(readRequest);\n            }\n            function ReadableStreamFulfillReadRequest(stream, chunk, done) {\n                const reader = stream._reader;\n                const readRequest = reader._readRequests.shift();\n                if (done) {\n                    readRequest._closeSteps();\n                } else {\n                    readRequest._chunkSteps(chunk);\n                }\n            }\n            function ReadableStreamGetNumReadRequests(stream) {\n                return stream._reader._readRequests.length;\n            }\n            function ReadableStreamHasDefaultReader(stream) {\n                const reader = stream._reader;\n                if (reader === undefined) {\n                    return false;\n                }\n                if (!IsReadableStreamDefaultReader(reader)) {\n                    return false;\n                }\n                return true;\n            }\n            /**\n\t\t     * A default reader vended by a {@link ReadableStream}.\n\t\t     *\n\t\t     * @public\n\t\t     */ class ReadableStreamDefaultReader {\n                constructor(stream){\n                    assertRequiredArgument(stream, 1, \"ReadableStreamDefaultReader\");\n                    assertReadableStream(stream, \"First parameter\");\n                    if (IsReadableStreamLocked(stream)) {\n                        throw new TypeError(\"This stream has already been locked for exclusive reading by another reader\");\n                    }\n                    ReadableStreamReaderGenericInitialize(this, stream);\n                    this._readRequests = new SimpleQueue();\n                }\n                /**\n\t\t         * Returns a promise that will be fulfilled when the stream becomes closed,\n\t\t         * or rejected if the stream ever errors or the reader's lock is released before the stream finishes closing.\n\t\t         */ get closed() {\n                    if (!IsReadableStreamDefaultReader(this)) {\n                        return promiseRejectedWith(defaultReaderBrandCheckException(\"closed\"));\n                    }\n                    return this._closedPromise;\n                }\n                /**\n\t\t         * If the reader is active, behaves the same as {@link ReadableStream.cancel | stream.cancel(reason)}.\n\t\t         */ cancel(reason = undefined) {\n                    if (!IsReadableStreamDefaultReader(this)) {\n                        return promiseRejectedWith(defaultReaderBrandCheckException(\"cancel\"));\n                    }\n                    if (this._ownerReadableStream === undefined) {\n                        return promiseRejectedWith(readerLockException(\"cancel\"));\n                    }\n                    return ReadableStreamReaderGenericCancel(this, reason);\n                }\n                /**\n\t\t         * Returns a promise that allows access to the next chunk from the stream's internal queue, if available.\n\t\t         *\n\t\t         * If reading a chunk causes the queue to become empty, more data will be pulled from the underlying source.\n\t\t         */ read() {\n                    if (!IsReadableStreamDefaultReader(this)) {\n                        return promiseRejectedWith(defaultReaderBrandCheckException(\"read\"));\n                    }\n                    if (this._ownerReadableStream === undefined) {\n                        return promiseRejectedWith(readerLockException(\"read from\"));\n                    }\n                    let resolvePromise;\n                    let rejectPromise;\n                    const promise = newPromise((resolve, reject)=>{\n                        resolvePromise = resolve;\n                        rejectPromise = reject;\n                    });\n                    const readRequest = {\n                        _chunkSteps: (chunk)=>resolvePromise({\n                                value: chunk,\n                                done: false\n                            }),\n                        _closeSteps: ()=>resolvePromise({\n                                value: undefined,\n                                done: true\n                            }),\n                        _errorSteps: (e)=>rejectPromise(e)\n                    };\n                    ReadableStreamDefaultReaderRead(this, readRequest);\n                    return promise;\n                }\n                /**\n\t\t         * Releases the reader's lock on the corresponding stream. After the lock is released, the reader is no longer active.\n\t\t         * If the associated stream is errored when the lock is released, the reader will appear errored in the same way\n\t\t         * from now on; otherwise, the reader will appear closed.\n\t\t         *\n\t\t         * A reader's lock cannot be released while it still has a pending read request, i.e., if a promise returned by\n\t\t         * the reader's {@link ReadableStreamDefaultReader.read | read()} method has not yet been settled. Attempting to\n\t\t         * do so will throw a `TypeError` and leave the reader locked to the stream.\n\t\t         */ releaseLock() {\n                    if (!IsReadableStreamDefaultReader(this)) {\n                        throw defaultReaderBrandCheckException(\"releaseLock\");\n                    }\n                    if (this._ownerReadableStream === undefined) {\n                        return;\n                    }\n                    if (this._readRequests.length > 0) {\n                        throw new TypeError(\"Tried to release a reader lock when that reader has pending read() calls un-settled\");\n                    }\n                    ReadableStreamReaderGenericRelease(this);\n                }\n            }\n            Object.defineProperties(ReadableStreamDefaultReader.prototype, {\n                cancel: {\n                    enumerable: true\n                },\n                read: {\n                    enumerable: true\n                },\n                releaseLock: {\n                    enumerable: true\n                },\n                closed: {\n                    enumerable: true\n                }\n            });\n            if (typeof SymbolPolyfill.toStringTag === \"symbol\") {\n                Object.defineProperty(ReadableStreamDefaultReader.prototype, SymbolPolyfill.toStringTag, {\n                    value: \"ReadableStreamDefaultReader\",\n                    configurable: true\n                });\n            }\n            // Abstract operations for the readers.\n            function IsReadableStreamDefaultReader(x) {\n                if (!typeIsObject(x)) {\n                    return false;\n                }\n                if (!Object.prototype.hasOwnProperty.call(x, \"_readRequests\")) {\n                    return false;\n                }\n                return x instanceof ReadableStreamDefaultReader;\n            }\n            function ReadableStreamDefaultReaderRead(reader, readRequest) {\n                const stream = reader._ownerReadableStream;\n                stream._disturbed = true;\n                if (stream._state === \"closed\") {\n                    readRequest._closeSteps();\n                } else if (stream._state === \"errored\") {\n                    readRequest._errorSteps(stream._storedError);\n                } else {\n                    stream._readableStreamController[PullSteps](readRequest);\n                }\n            }\n            // Helper functions for the ReadableStreamDefaultReader.\n            function defaultReaderBrandCheckException(name) {\n                return new TypeError(`ReadableStreamDefaultReader.prototype.${name} can only be used on a ReadableStreamDefaultReader`);\n            }\n            /// <reference lib=\"es2018.asynciterable\" />\n            /* eslint-disable @typescript-eslint/no-empty-function */ const AsyncIteratorPrototype = Object.getPrototypeOf(Object.getPrototypeOf(async function*() {}).prototype);\n            /// <reference lib=\"es2018.asynciterable\" />\n            class ReadableStreamAsyncIteratorImpl {\n                constructor(reader, preventCancel){\n                    this._ongoingPromise = undefined;\n                    this._isFinished = false;\n                    this._reader = reader;\n                    this._preventCancel = preventCancel;\n                }\n                next() {\n                    const nextSteps = ()=>this._nextSteps();\n                    this._ongoingPromise = this._ongoingPromise ? transformPromiseWith(this._ongoingPromise, nextSteps, nextSteps) : nextSteps();\n                    return this._ongoingPromise;\n                }\n                return(value1) {\n                    const returnSteps = ()=>this._returnSteps(value1);\n                    return this._ongoingPromise ? transformPromiseWith(this._ongoingPromise, returnSteps, returnSteps) : returnSteps();\n                }\n                _nextSteps() {\n                    if (this._isFinished) {\n                        return Promise.resolve({\n                            value: undefined,\n                            done: true\n                        });\n                    }\n                    const reader = this._reader;\n                    if (reader._ownerReadableStream === undefined) {\n                        return promiseRejectedWith(readerLockException(\"iterate\"));\n                    }\n                    let resolvePromise;\n                    let rejectPromise;\n                    const promise = newPromise((resolve, reject)=>{\n                        resolvePromise = resolve;\n                        rejectPromise = reject;\n                    });\n                    const readRequest = {\n                        _chunkSteps: (chunk)=>{\n                            this._ongoingPromise = undefined;\n                            // This needs to be delayed by one microtask, otherwise we stop pulling too early which breaks a test.\n                            // FIXME Is this a bug in the specification, or in the test?\n                            queueMicrotask(()=>resolvePromise({\n                                    value: chunk,\n                                    done: false\n                                }));\n                        },\n                        _closeSteps: ()=>{\n                            this._ongoingPromise = undefined;\n                            this._isFinished = true;\n                            ReadableStreamReaderGenericRelease(reader);\n                            resolvePromise({\n                                value: undefined,\n                                done: true\n                            });\n                        },\n                        _errorSteps: (reason)=>{\n                            this._ongoingPromise = undefined;\n                            this._isFinished = true;\n                            ReadableStreamReaderGenericRelease(reader);\n                            rejectPromise(reason);\n                        }\n                    };\n                    ReadableStreamDefaultReaderRead(reader, readRequest);\n                    return promise;\n                }\n                _returnSteps(value1) {\n                    if (this._isFinished) {\n                        return Promise.resolve({\n                            value: value1,\n                            done: true\n                        });\n                    }\n                    this._isFinished = true;\n                    const reader = this._reader;\n                    if (reader._ownerReadableStream === undefined) {\n                        return promiseRejectedWith(readerLockException(\"finish iterating\"));\n                    }\n                    if (!this._preventCancel) {\n                        const result = ReadableStreamReaderGenericCancel(reader, value1);\n                        ReadableStreamReaderGenericRelease(reader);\n                        return transformPromiseWith(result, ()=>({\n                                value: value1,\n                                done: true\n                            }));\n                    }\n                    ReadableStreamReaderGenericRelease(reader);\n                    return promiseResolvedWith({\n                        value: value1,\n                        done: true\n                    });\n                }\n            }\n            const ReadableStreamAsyncIteratorPrototype = {\n                next () {\n                    if (!IsReadableStreamAsyncIterator(this)) {\n                        return promiseRejectedWith(streamAsyncIteratorBrandCheckException(\"next\"));\n                    }\n                    return this._asyncIteratorImpl.next();\n                },\n                return (value1) {\n                    if (!IsReadableStreamAsyncIterator(this)) {\n                        return promiseRejectedWith(streamAsyncIteratorBrandCheckException(\"return\"));\n                    }\n                    return this._asyncIteratorImpl.return(value1);\n                }\n            };\n            if (AsyncIteratorPrototype !== undefined) {\n                Object.setPrototypeOf(ReadableStreamAsyncIteratorPrototype, AsyncIteratorPrototype);\n            }\n            // Abstract operations for the ReadableStream.\n            function AcquireReadableStreamAsyncIterator(stream, preventCancel) {\n                const reader = AcquireReadableStreamDefaultReader(stream);\n                const impl = new ReadableStreamAsyncIteratorImpl(reader, preventCancel);\n                const iterator = Object.create(ReadableStreamAsyncIteratorPrototype);\n                iterator._asyncIteratorImpl = impl;\n                return iterator;\n            }\n            function IsReadableStreamAsyncIterator(x) {\n                if (!typeIsObject(x)) {\n                    return false;\n                }\n                if (!Object.prototype.hasOwnProperty.call(x, \"_asyncIteratorImpl\")) {\n                    return false;\n                }\n                try {\n                    // noinspection SuspiciousTypeOfGuard\n                    return x._asyncIteratorImpl instanceof ReadableStreamAsyncIteratorImpl;\n                } catch (_a) {\n                    return false;\n                }\n            }\n            // Helper functions for the ReadableStream.\n            function streamAsyncIteratorBrandCheckException(name) {\n                return new TypeError(`ReadableStreamAsyncIterator.${name} can only be used on a ReadableSteamAsyncIterator`);\n            }\n            /// <reference lib=\"es2015.core\" />\n            // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN#Polyfill\n            const NumberIsNaN = Number.isNaN || function(x) {\n                // eslint-disable-next-line no-self-compare\n                return x !== x;\n            };\n            function CreateArrayFromList(elements) {\n                // We use arrays to represent lists, so this is basically a no-op.\n                // Do a slice though just in case we happen to depend on the unique-ness.\n                return elements.slice();\n            }\n            function CopyDataBlockBytes(dest, destOffset, src, srcOffset, n) {\n                new Uint8Array(dest).set(new Uint8Array(src, srcOffset, n), destOffset);\n            }\n            // Not implemented correctly\n            function TransferArrayBuffer(O) {\n                return O;\n            }\n            // Not implemented correctly\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            function IsDetachedBuffer(O) {\n                return false;\n            }\n            function ArrayBufferSlice(buffer, begin, end) {\n                // ArrayBuffer.prototype.slice is not available on IE10\n                // https://www.caniuse.com/mdn-javascript_builtins_arraybuffer_slice\n                if (buffer.slice) {\n                    return buffer.slice(begin, end);\n                }\n                const length = end - begin;\n                const slice = new ArrayBuffer(length);\n                CopyDataBlockBytes(slice, 0, buffer, begin, length);\n                return slice;\n            }\n            function IsNonNegativeNumber(v) {\n                if (typeof v !== \"number\") {\n                    return false;\n                }\n                if (NumberIsNaN(v)) {\n                    return false;\n                }\n                if (v < 0) {\n                    return false;\n                }\n                return true;\n            }\n            function CloneAsUint8Array(O) {\n                const buffer = ArrayBufferSlice(O.buffer, O.byteOffset, O.byteOffset + O.byteLength);\n                return new Uint8Array(buffer);\n            }\n            function DequeueValue(container) {\n                const pair = container._queue.shift();\n                container._queueTotalSize -= pair.size;\n                if (container._queueTotalSize < 0) {\n                    container._queueTotalSize = 0;\n                }\n                return pair.value;\n            }\n            function EnqueueValueWithSize(container, value1, size) {\n                if (!IsNonNegativeNumber(size) || size === Infinity) {\n                    throw new RangeError(\"Size must be a finite, non-NaN, non-negative number.\");\n                }\n                container._queue.push({\n                    value: value1,\n                    size\n                });\n                container._queueTotalSize += size;\n            }\n            function PeekQueueValue(container) {\n                const pair = container._queue.peek();\n                return pair.value;\n            }\n            function ResetQueue(container) {\n                container._queue = new SimpleQueue();\n                container._queueTotalSize = 0;\n            }\n            /**\n\t\t     * A pull-into request in a {@link ReadableByteStreamController}.\n\t\t     *\n\t\t     * @public\n\t\t     */ class ReadableStreamBYOBRequest {\n                constructor(){\n                    throw new TypeError(\"Illegal constructor\");\n                }\n                /**\n\t\t         * Returns the view for writing in to, or `null` if the BYOB request has already been responded to.\n\t\t         */ get view() {\n                    if (!IsReadableStreamBYOBRequest(this)) {\n                        throw byobRequestBrandCheckException(\"view\");\n                    }\n                    return this._view;\n                }\n                respond(bytesWritten) {\n                    if (!IsReadableStreamBYOBRequest(this)) {\n                        throw byobRequestBrandCheckException(\"respond\");\n                    }\n                    assertRequiredArgument(bytesWritten, 1, \"respond\");\n                    bytesWritten = convertUnsignedLongLongWithEnforceRange(bytesWritten, \"First parameter\");\n                    if (this._associatedReadableByteStreamController === undefined) {\n                        throw new TypeError(\"This BYOB request has been invalidated\");\n                    }\n                    if (IsDetachedBuffer(this._view.buffer)) ;\n                    ReadableByteStreamControllerRespond(this._associatedReadableByteStreamController, bytesWritten);\n                }\n                respondWithNewView(view) {\n                    if (!IsReadableStreamBYOBRequest(this)) {\n                        throw byobRequestBrandCheckException(\"respondWithNewView\");\n                    }\n                    assertRequiredArgument(view, 1, \"respondWithNewView\");\n                    if (!ArrayBuffer.isView(view)) {\n                        throw new TypeError(\"You can only respond with array buffer views\");\n                    }\n                    if (this._associatedReadableByteStreamController === undefined) {\n                        throw new TypeError(\"This BYOB request has been invalidated\");\n                    }\n                    if (IsDetachedBuffer(view.buffer)) ;\n                    ReadableByteStreamControllerRespondWithNewView(this._associatedReadableByteStreamController, view);\n                }\n            }\n            Object.defineProperties(ReadableStreamBYOBRequest.prototype, {\n                respond: {\n                    enumerable: true\n                },\n                respondWithNewView: {\n                    enumerable: true\n                },\n                view: {\n                    enumerable: true\n                }\n            });\n            if (typeof SymbolPolyfill.toStringTag === \"symbol\") {\n                Object.defineProperty(ReadableStreamBYOBRequest.prototype, SymbolPolyfill.toStringTag, {\n                    value: \"ReadableStreamBYOBRequest\",\n                    configurable: true\n                });\n            }\n            /**\n\t\t     * Allows control of a {@link ReadableStream | readable byte stream}'s state and internal queue.\n\t\t     *\n\t\t     * @public\n\t\t     */ class ReadableByteStreamController {\n                constructor(){\n                    throw new TypeError(\"Illegal constructor\");\n                }\n                /**\n\t\t         * Returns the current BYOB pull request, or `null` if there isn't one.\n\t\t         */ get byobRequest() {\n                    if (!IsReadableByteStreamController(this)) {\n                        throw byteStreamControllerBrandCheckException(\"byobRequest\");\n                    }\n                    return ReadableByteStreamControllerGetBYOBRequest(this);\n                }\n                /**\n\t\t         * Returns the desired size to fill the controlled stream's internal queue. It can be negative, if the queue is\n\t\t         * over-full. An underlying byte source ought to use this information to determine when and how to apply backpressure.\n\t\t         */ get desiredSize() {\n                    if (!IsReadableByteStreamController(this)) {\n                        throw byteStreamControllerBrandCheckException(\"desiredSize\");\n                    }\n                    return ReadableByteStreamControllerGetDesiredSize(this);\n                }\n                /**\n\t\t         * Closes the controlled readable stream. Consumers will still be able to read any previously-enqueued chunks from\n\t\t         * the stream, but once those are read, the stream will become closed.\n\t\t         */ close() {\n                    if (!IsReadableByteStreamController(this)) {\n                        throw byteStreamControllerBrandCheckException(\"close\");\n                    }\n                    if (this._closeRequested) {\n                        throw new TypeError(\"The stream has already been closed; do not close it again!\");\n                    }\n                    const state = this._controlledReadableByteStream._state;\n                    if (state !== \"readable\") {\n                        throw new TypeError(`The stream (in ${state} state) is not in the readable state and cannot be closed`);\n                    }\n                    ReadableByteStreamControllerClose(this);\n                }\n                enqueue(chunk) {\n                    if (!IsReadableByteStreamController(this)) {\n                        throw byteStreamControllerBrandCheckException(\"enqueue\");\n                    }\n                    assertRequiredArgument(chunk, 1, \"enqueue\");\n                    if (!ArrayBuffer.isView(chunk)) {\n                        throw new TypeError(\"chunk must be an array buffer view\");\n                    }\n                    if (chunk.byteLength === 0) {\n                        throw new TypeError(\"chunk must have non-zero byteLength\");\n                    }\n                    if (chunk.buffer.byteLength === 0) {\n                        throw new TypeError(`chunk's buffer must have non-zero byteLength`);\n                    }\n                    if (this._closeRequested) {\n                        throw new TypeError(\"stream is closed or draining\");\n                    }\n                    const state = this._controlledReadableByteStream._state;\n                    if (state !== \"readable\") {\n                        throw new TypeError(`The stream (in ${state} state) is not in the readable state and cannot be enqueued to`);\n                    }\n                    ReadableByteStreamControllerEnqueue(this, chunk);\n                }\n                /**\n\t\t         * Errors the controlled readable stream, making all future interactions with it fail with the given error `e`.\n\t\t         */ error(e = undefined) {\n                    if (!IsReadableByteStreamController(this)) {\n                        throw byteStreamControllerBrandCheckException(\"error\");\n                    }\n                    ReadableByteStreamControllerError(this, e);\n                }\n                /** @internal */ [CancelSteps](reason) {\n                    ReadableByteStreamControllerClearPendingPullIntos(this);\n                    ResetQueue(this);\n                    const result = this._cancelAlgorithm(reason);\n                    ReadableByteStreamControllerClearAlgorithms(this);\n                    return result;\n                }\n                /** @internal */ [PullSteps](readRequest) {\n                    const stream = this._controlledReadableByteStream;\n                    if (this._queueTotalSize > 0) {\n                        const entry = this._queue.shift();\n                        this._queueTotalSize -= entry.byteLength;\n                        ReadableByteStreamControllerHandleQueueDrain(this);\n                        const view = new Uint8Array(entry.buffer, entry.byteOffset, entry.byteLength);\n                        readRequest._chunkSteps(view);\n                        return;\n                    }\n                    const autoAllocateChunkSize = this._autoAllocateChunkSize;\n                    if (autoAllocateChunkSize !== undefined) {\n                        let buffer;\n                        try {\n                            buffer = new ArrayBuffer(autoAllocateChunkSize);\n                        } catch (bufferE) {\n                            readRequest._errorSteps(bufferE);\n                            return;\n                        }\n                        const pullIntoDescriptor = {\n                            buffer,\n                            bufferByteLength: autoAllocateChunkSize,\n                            byteOffset: 0,\n                            byteLength: autoAllocateChunkSize,\n                            bytesFilled: 0,\n                            elementSize: 1,\n                            viewConstructor: Uint8Array,\n                            readerType: \"default\"\n                        };\n                        this._pendingPullIntos.push(pullIntoDescriptor);\n                    }\n                    ReadableStreamAddReadRequest(stream, readRequest);\n                    ReadableByteStreamControllerCallPullIfNeeded(this);\n                }\n            }\n            Object.defineProperties(ReadableByteStreamController.prototype, {\n                close: {\n                    enumerable: true\n                },\n                enqueue: {\n                    enumerable: true\n                },\n                error: {\n                    enumerable: true\n                },\n                byobRequest: {\n                    enumerable: true\n                },\n                desiredSize: {\n                    enumerable: true\n                }\n            });\n            if (typeof SymbolPolyfill.toStringTag === \"symbol\") {\n                Object.defineProperty(ReadableByteStreamController.prototype, SymbolPolyfill.toStringTag, {\n                    value: \"ReadableByteStreamController\",\n                    configurable: true\n                });\n            }\n            // Abstract operations for the ReadableByteStreamController.\n            function IsReadableByteStreamController(x) {\n                if (!typeIsObject(x)) {\n                    return false;\n                }\n                if (!Object.prototype.hasOwnProperty.call(x, \"_controlledReadableByteStream\")) {\n                    return false;\n                }\n                return x instanceof ReadableByteStreamController;\n            }\n            function IsReadableStreamBYOBRequest(x) {\n                if (!typeIsObject(x)) {\n                    return false;\n                }\n                if (!Object.prototype.hasOwnProperty.call(x, \"_associatedReadableByteStreamController\")) {\n                    return false;\n                }\n                return x instanceof ReadableStreamBYOBRequest;\n            }\n            function ReadableByteStreamControllerCallPullIfNeeded(controller) {\n                const shouldPull = ReadableByteStreamControllerShouldCallPull(controller);\n                if (!shouldPull) {\n                    return;\n                }\n                if (controller._pulling) {\n                    controller._pullAgain = true;\n                    return;\n                }\n                controller._pulling = true;\n                // TODO: Test controller argument\n                const pullPromise = controller._pullAlgorithm();\n                uponPromise(pullPromise, ()=>{\n                    controller._pulling = false;\n                    if (controller._pullAgain) {\n                        controller._pullAgain = false;\n                        ReadableByteStreamControllerCallPullIfNeeded(controller);\n                    }\n                }, (e)=>{\n                    ReadableByteStreamControllerError(controller, e);\n                });\n            }\n            function ReadableByteStreamControllerClearPendingPullIntos(controller) {\n                ReadableByteStreamControllerInvalidateBYOBRequest(controller);\n                controller._pendingPullIntos = new SimpleQueue();\n            }\n            function ReadableByteStreamControllerCommitPullIntoDescriptor(stream, pullIntoDescriptor) {\n                let done = false;\n                if (stream._state === \"closed\") {\n                    done = true;\n                }\n                const filledView = ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor);\n                if (pullIntoDescriptor.readerType === \"default\") {\n                    ReadableStreamFulfillReadRequest(stream, filledView, done);\n                } else {\n                    ReadableStreamFulfillReadIntoRequest(stream, filledView, done);\n                }\n            }\n            function ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor) {\n                const bytesFilled = pullIntoDescriptor.bytesFilled;\n                const elementSize = pullIntoDescriptor.elementSize;\n                return new pullIntoDescriptor.viewConstructor(pullIntoDescriptor.buffer, pullIntoDescriptor.byteOffset, bytesFilled / elementSize);\n            }\n            function ReadableByteStreamControllerEnqueueChunkToQueue(controller, buffer, byteOffset, byteLength) {\n                controller._queue.push({\n                    buffer,\n                    byteOffset,\n                    byteLength\n                });\n                controller._queueTotalSize += byteLength;\n            }\n            function ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor) {\n                const elementSize = pullIntoDescriptor.elementSize;\n                const currentAlignedBytes = pullIntoDescriptor.bytesFilled - pullIntoDescriptor.bytesFilled % elementSize;\n                const maxBytesToCopy = Math.min(controller._queueTotalSize, pullIntoDescriptor.byteLength - pullIntoDescriptor.bytesFilled);\n                const maxBytesFilled = pullIntoDescriptor.bytesFilled + maxBytesToCopy;\n                const maxAlignedBytes = maxBytesFilled - maxBytesFilled % elementSize;\n                let totalBytesToCopyRemaining = maxBytesToCopy;\n                let ready = false;\n                if (maxAlignedBytes > currentAlignedBytes) {\n                    totalBytesToCopyRemaining = maxAlignedBytes - pullIntoDescriptor.bytesFilled;\n                    ready = true;\n                }\n                const queue = controller._queue;\n                while(totalBytesToCopyRemaining > 0){\n                    const headOfQueue = queue.peek();\n                    const bytesToCopy = Math.min(totalBytesToCopyRemaining, headOfQueue.byteLength);\n                    const destStart = pullIntoDescriptor.byteOffset + pullIntoDescriptor.bytesFilled;\n                    CopyDataBlockBytes(pullIntoDescriptor.buffer, destStart, headOfQueue.buffer, headOfQueue.byteOffset, bytesToCopy);\n                    if (headOfQueue.byteLength === bytesToCopy) {\n                        queue.shift();\n                    } else {\n                        headOfQueue.byteOffset += bytesToCopy;\n                        headOfQueue.byteLength -= bytesToCopy;\n                    }\n                    controller._queueTotalSize -= bytesToCopy;\n                    ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, bytesToCopy, pullIntoDescriptor);\n                    totalBytesToCopyRemaining -= bytesToCopy;\n                }\n                return ready;\n            }\n            function ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, size, pullIntoDescriptor) {\n                pullIntoDescriptor.bytesFilled += size;\n            }\n            function ReadableByteStreamControllerHandleQueueDrain(controller) {\n                if (controller._queueTotalSize === 0 && controller._closeRequested) {\n                    ReadableByteStreamControllerClearAlgorithms(controller);\n                    ReadableStreamClose(controller._controlledReadableByteStream);\n                } else {\n                    ReadableByteStreamControllerCallPullIfNeeded(controller);\n                }\n            }\n            function ReadableByteStreamControllerInvalidateBYOBRequest(controller) {\n                if (controller._byobRequest === null) {\n                    return;\n                }\n                controller._byobRequest._associatedReadableByteStreamController = undefined;\n                controller._byobRequest._view = null;\n                controller._byobRequest = null;\n            }\n            function ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller) {\n                while(controller._pendingPullIntos.length > 0){\n                    if (controller._queueTotalSize === 0) {\n                        return;\n                    }\n                    const pullIntoDescriptor = controller._pendingPullIntos.peek();\n                    if (ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor)) {\n                        ReadableByteStreamControllerShiftPendingPullInto(controller);\n                        ReadableByteStreamControllerCommitPullIntoDescriptor(controller._controlledReadableByteStream, pullIntoDescriptor);\n                    }\n                }\n            }\n            function ReadableByteStreamControllerPullInto(controller, view, readIntoRequest) {\n                const stream = controller._controlledReadableByteStream;\n                let elementSize = 1;\n                if (view.constructor !== DataView) {\n                    elementSize = view.constructor.BYTES_PER_ELEMENT;\n                }\n                const ctor = view.constructor;\n                // try {\n                const buffer = TransferArrayBuffer(view.buffer);\n                // } catch (e) {\n                //   readIntoRequest._errorSteps(e);\n                //   return;\n                // }\n                const pullIntoDescriptor = {\n                    buffer,\n                    bufferByteLength: buffer.byteLength,\n                    byteOffset: view.byteOffset,\n                    byteLength: view.byteLength,\n                    bytesFilled: 0,\n                    elementSize,\n                    viewConstructor: ctor,\n                    readerType: \"byob\"\n                };\n                if (controller._pendingPullIntos.length > 0) {\n                    controller._pendingPullIntos.push(pullIntoDescriptor);\n                    // No ReadableByteStreamControllerCallPullIfNeeded() call since:\n                    // - No change happens on desiredSize\n                    // - The source has already been notified of that there's at least 1 pending read(view)\n                    ReadableStreamAddReadIntoRequest(stream, readIntoRequest);\n                    return;\n                }\n                if (stream._state === \"closed\") {\n                    const emptyView = new ctor(pullIntoDescriptor.buffer, pullIntoDescriptor.byteOffset, 0);\n                    readIntoRequest._closeSteps(emptyView);\n                    return;\n                }\n                if (controller._queueTotalSize > 0) {\n                    if (ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor)) {\n                        const filledView = ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor);\n                        ReadableByteStreamControllerHandleQueueDrain(controller);\n                        readIntoRequest._chunkSteps(filledView);\n                        return;\n                    }\n                    if (controller._closeRequested) {\n                        const e = new TypeError(\"Insufficient bytes to fill elements in the given buffer\");\n                        ReadableByteStreamControllerError(controller, e);\n                        readIntoRequest._errorSteps(e);\n                        return;\n                    }\n                }\n                controller._pendingPullIntos.push(pullIntoDescriptor);\n                ReadableStreamAddReadIntoRequest(stream, readIntoRequest);\n                ReadableByteStreamControllerCallPullIfNeeded(controller);\n            }\n            function ReadableByteStreamControllerRespondInClosedState(controller, firstDescriptor) {\n                const stream = controller._controlledReadableByteStream;\n                if (ReadableStreamHasBYOBReader(stream)) {\n                    while(ReadableStreamGetNumReadIntoRequests(stream) > 0){\n                        const pullIntoDescriptor = ReadableByteStreamControllerShiftPendingPullInto(controller);\n                        ReadableByteStreamControllerCommitPullIntoDescriptor(stream, pullIntoDescriptor);\n                    }\n                }\n            }\n            function ReadableByteStreamControllerRespondInReadableState(controller, bytesWritten, pullIntoDescriptor) {\n                ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, bytesWritten, pullIntoDescriptor);\n                if (pullIntoDescriptor.bytesFilled < pullIntoDescriptor.elementSize) {\n                    return;\n                }\n                ReadableByteStreamControllerShiftPendingPullInto(controller);\n                const remainderSize = pullIntoDescriptor.bytesFilled % pullIntoDescriptor.elementSize;\n                if (remainderSize > 0) {\n                    const end = pullIntoDescriptor.byteOffset + pullIntoDescriptor.bytesFilled;\n                    const remainder = ArrayBufferSlice(pullIntoDescriptor.buffer, end - remainderSize, end);\n                    ReadableByteStreamControllerEnqueueChunkToQueue(controller, remainder, 0, remainder.byteLength);\n                }\n                pullIntoDescriptor.bytesFilled -= remainderSize;\n                ReadableByteStreamControllerCommitPullIntoDescriptor(controller._controlledReadableByteStream, pullIntoDescriptor);\n                ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller);\n            }\n            function ReadableByteStreamControllerRespondInternal(controller, bytesWritten) {\n                const firstDescriptor = controller._pendingPullIntos.peek();\n                ReadableByteStreamControllerInvalidateBYOBRequest(controller);\n                const state = controller._controlledReadableByteStream._state;\n                if (state === \"closed\") {\n                    ReadableByteStreamControllerRespondInClosedState(controller);\n                } else {\n                    ReadableByteStreamControllerRespondInReadableState(controller, bytesWritten, firstDescriptor);\n                }\n                ReadableByteStreamControllerCallPullIfNeeded(controller);\n            }\n            function ReadableByteStreamControllerShiftPendingPullInto(controller) {\n                const descriptor = controller._pendingPullIntos.shift();\n                return descriptor;\n            }\n            function ReadableByteStreamControllerShouldCallPull(controller) {\n                const stream = controller._controlledReadableByteStream;\n                if (stream._state !== \"readable\") {\n                    return false;\n                }\n                if (controller._closeRequested) {\n                    return false;\n                }\n                if (!controller._started) {\n                    return false;\n                }\n                if (ReadableStreamHasDefaultReader(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {\n                    return true;\n                }\n                if (ReadableStreamHasBYOBReader(stream) && ReadableStreamGetNumReadIntoRequests(stream) > 0) {\n                    return true;\n                }\n                const desiredSize = ReadableByteStreamControllerGetDesiredSize(controller);\n                if (desiredSize > 0) {\n                    return true;\n                }\n                return false;\n            }\n            function ReadableByteStreamControllerClearAlgorithms(controller) {\n                controller._pullAlgorithm = undefined;\n                controller._cancelAlgorithm = undefined;\n            }\n            // A client of ReadableByteStreamController may use these functions directly to bypass state check.\n            function ReadableByteStreamControllerClose(controller) {\n                const stream = controller._controlledReadableByteStream;\n                if (controller._closeRequested || stream._state !== \"readable\") {\n                    return;\n                }\n                if (controller._queueTotalSize > 0) {\n                    controller._closeRequested = true;\n                    return;\n                }\n                if (controller._pendingPullIntos.length > 0) {\n                    const firstPendingPullInto = controller._pendingPullIntos.peek();\n                    if (firstPendingPullInto.bytesFilled > 0) {\n                        const e = new TypeError(\"Insufficient bytes to fill elements in the given buffer\");\n                        ReadableByteStreamControllerError(controller, e);\n                        throw e;\n                    }\n                }\n                ReadableByteStreamControllerClearAlgorithms(controller);\n                ReadableStreamClose(stream);\n            }\n            function ReadableByteStreamControllerEnqueue(controller, chunk) {\n                const stream = controller._controlledReadableByteStream;\n                if (controller._closeRequested || stream._state !== \"readable\") {\n                    return;\n                }\n                const buffer = chunk.buffer;\n                const byteOffset = chunk.byteOffset;\n                const byteLength = chunk.byteLength;\n                const transferredBuffer = TransferArrayBuffer(buffer);\n                if (controller._pendingPullIntos.length > 0) {\n                    const firstPendingPullInto = controller._pendingPullIntos.peek();\n                    if (IsDetachedBuffer(firstPendingPullInto.buffer)) ;\n                    firstPendingPullInto.buffer = TransferArrayBuffer(firstPendingPullInto.buffer);\n                }\n                ReadableByteStreamControllerInvalidateBYOBRequest(controller);\n                if (ReadableStreamHasDefaultReader(stream)) {\n                    if (ReadableStreamGetNumReadRequests(stream) === 0) {\n                        ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);\n                    } else {\n                        if (controller._pendingPullIntos.length > 0) {\n                            ReadableByteStreamControllerShiftPendingPullInto(controller);\n                        }\n                        const transferredView = new Uint8Array(transferredBuffer, byteOffset, byteLength);\n                        ReadableStreamFulfillReadRequest(stream, transferredView, false);\n                    }\n                } else if (ReadableStreamHasBYOBReader(stream)) {\n                    // TODO: Ideally in this branch detaching should happen only if the buffer is not consumed fully.\n                    ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);\n                    ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller);\n                } else {\n                    ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);\n                }\n                ReadableByteStreamControllerCallPullIfNeeded(controller);\n            }\n            function ReadableByteStreamControllerError(controller, e) {\n                const stream = controller._controlledReadableByteStream;\n                if (stream._state !== \"readable\") {\n                    return;\n                }\n                ReadableByteStreamControllerClearPendingPullIntos(controller);\n                ResetQueue(controller);\n                ReadableByteStreamControllerClearAlgorithms(controller);\n                ReadableStreamError(stream, e);\n            }\n            function ReadableByteStreamControllerGetBYOBRequest(controller) {\n                if (controller._byobRequest === null && controller._pendingPullIntos.length > 0) {\n                    const firstDescriptor = controller._pendingPullIntos.peek();\n                    const view = new Uint8Array(firstDescriptor.buffer, firstDescriptor.byteOffset + firstDescriptor.bytesFilled, firstDescriptor.byteLength - firstDescriptor.bytesFilled);\n                    const byobRequest = Object.create(ReadableStreamBYOBRequest.prototype);\n                    SetUpReadableStreamBYOBRequest(byobRequest, controller, view);\n                    controller._byobRequest = byobRequest;\n                }\n                return controller._byobRequest;\n            }\n            function ReadableByteStreamControllerGetDesiredSize(controller) {\n                const state = controller._controlledReadableByteStream._state;\n                if (state === \"errored\") {\n                    return null;\n                }\n                if (state === \"closed\") {\n                    return 0;\n                }\n                return controller._strategyHWM - controller._queueTotalSize;\n            }\n            function ReadableByteStreamControllerRespond(controller, bytesWritten) {\n                const firstDescriptor = controller._pendingPullIntos.peek();\n                const state = controller._controlledReadableByteStream._state;\n                if (state === \"closed\") {\n                    if (bytesWritten !== 0) {\n                        throw new TypeError(\"bytesWritten must be 0 when calling respond() on a closed stream\");\n                    }\n                } else {\n                    if (bytesWritten === 0) {\n                        throw new TypeError(\"bytesWritten must be greater than 0 when calling respond() on a readable stream\");\n                    }\n                    if (firstDescriptor.bytesFilled + bytesWritten > firstDescriptor.byteLength) {\n                        throw new RangeError(\"bytesWritten out of range\");\n                    }\n                }\n                firstDescriptor.buffer = TransferArrayBuffer(firstDescriptor.buffer);\n                ReadableByteStreamControllerRespondInternal(controller, bytesWritten);\n            }\n            function ReadableByteStreamControllerRespondWithNewView(controller, view) {\n                const firstDescriptor = controller._pendingPullIntos.peek();\n                const state = controller._controlledReadableByteStream._state;\n                if (state === \"closed\") {\n                    if (view.byteLength !== 0) {\n                        throw new TypeError(\"The view's length must be 0 when calling respondWithNewView() on a closed stream\");\n                    }\n                } else {\n                    if (view.byteLength === 0) {\n                        throw new TypeError(\"The view's length must be greater than 0 when calling respondWithNewView() on a readable stream\");\n                    }\n                }\n                if (firstDescriptor.byteOffset + firstDescriptor.bytesFilled !== view.byteOffset) {\n                    throw new RangeError(\"The region specified by view does not match byobRequest\");\n                }\n                if (firstDescriptor.bufferByteLength !== view.buffer.byteLength) {\n                    throw new RangeError(\"The buffer of view has different capacity than byobRequest\");\n                }\n                if (firstDescriptor.bytesFilled + view.byteLength > firstDescriptor.byteLength) {\n                    throw new RangeError(\"The region specified by view is larger than byobRequest\");\n                }\n                const viewByteLength = view.byteLength;\n                firstDescriptor.buffer = TransferArrayBuffer(view.buffer);\n                ReadableByteStreamControllerRespondInternal(controller, viewByteLength);\n            }\n            function SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, autoAllocateChunkSize) {\n                controller._controlledReadableByteStream = stream;\n                controller._pullAgain = false;\n                controller._pulling = false;\n                controller._byobRequest = null;\n                // Need to set the slots so that the assert doesn't fire. In the spec the slots already exist implicitly.\n                controller._queue = controller._queueTotalSize = undefined;\n                ResetQueue(controller);\n                controller._closeRequested = false;\n                controller._started = false;\n                controller._strategyHWM = highWaterMark;\n                controller._pullAlgorithm = pullAlgorithm;\n                controller._cancelAlgorithm = cancelAlgorithm;\n                controller._autoAllocateChunkSize = autoAllocateChunkSize;\n                controller._pendingPullIntos = new SimpleQueue();\n                stream._readableStreamController = controller;\n                const startResult = startAlgorithm();\n                uponPromise(promiseResolvedWith(startResult), ()=>{\n                    controller._started = true;\n                    ReadableByteStreamControllerCallPullIfNeeded(controller);\n                }, (r)=>{\n                    ReadableByteStreamControllerError(controller, r);\n                });\n            }\n            function SetUpReadableByteStreamControllerFromUnderlyingSource(stream, underlyingByteSource, highWaterMark) {\n                const controller = Object.create(ReadableByteStreamController.prototype);\n                let startAlgorithm = ()=>undefined;\n                let pullAlgorithm = ()=>promiseResolvedWith(undefined);\n                let cancelAlgorithm = ()=>promiseResolvedWith(undefined);\n                if (underlyingByteSource.start !== undefined) {\n                    startAlgorithm = ()=>underlyingByteSource.start(controller);\n                }\n                if (underlyingByteSource.pull !== undefined) {\n                    pullAlgorithm = ()=>underlyingByteSource.pull(controller);\n                }\n                if (underlyingByteSource.cancel !== undefined) {\n                    cancelAlgorithm = (reason)=>underlyingByteSource.cancel(reason);\n                }\n                const autoAllocateChunkSize = underlyingByteSource.autoAllocateChunkSize;\n                if (autoAllocateChunkSize === 0) {\n                    throw new TypeError(\"autoAllocateChunkSize must be greater than 0\");\n                }\n                SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, autoAllocateChunkSize);\n            }\n            function SetUpReadableStreamBYOBRequest(request, controller, view) {\n                request._associatedReadableByteStreamController = controller;\n                request._view = view;\n            }\n            // Helper functions for the ReadableStreamBYOBRequest.\n            function byobRequestBrandCheckException(name) {\n                return new TypeError(`ReadableStreamBYOBRequest.prototype.${name} can only be used on a ReadableStreamBYOBRequest`);\n            }\n            // Helper functions for the ReadableByteStreamController.\n            function byteStreamControllerBrandCheckException(name) {\n                return new TypeError(`ReadableByteStreamController.prototype.${name} can only be used on a ReadableByteStreamController`);\n            }\n            // Abstract operations for the ReadableStream.\n            function AcquireReadableStreamBYOBReader(stream) {\n                return new ReadableStreamBYOBReader(stream);\n            }\n            // ReadableStream API exposed for controllers.\n            function ReadableStreamAddReadIntoRequest(stream, readIntoRequest) {\n                stream._reader._readIntoRequests.push(readIntoRequest);\n            }\n            function ReadableStreamFulfillReadIntoRequest(stream, chunk, done) {\n                const reader = stream._reader;\n                const readIntoRequest = reader._readIntoRequests.shift();\n                if (done) {\n                    readIntoRequest._closeSteps(chunk);\n                } else {\n                    readIntoRequest._chunkSteps(chunk);\n                }\n            }\n            function ReadableStreamGetNumReadIntoRequests(stream) {\n                return stream._reader._readIntoRequests.length;\n            }\n            function ReadableStreamHasBYOBReader(stream) {\n                const reader = stream._reader;\n                if (reader === undefined) {\n                    return false;\n                }\n                if (!IsReadableStreamBYOBReader(reader)) {\n                    return false;\n                }\n                return true;\n            }\n            /**\n\t\t     * A BYOB reader vended by a {@link ReadableStream}.\n\t\t     *\n\t\t     * @public\n\t\t     */ class ReadableStreamBYOBReader {\n                constructor(stream){\n                    assertRequiredArgument(stream, 1, \"ReadableStreamBYOBReader\");\n                    assertReadableStream(stream, \"First parameter\");\n                    if (IsReadableStreamLocked(stream)) {\n                        throw new TypeError(\"This stream has already been locked for exclusive reading by another reader\");\n                    }\n                    if (!IsReadableByteStreamController(stream._readableStreamController)) {\n                        throw new TypeError(\"Cannot construct a ReadableStreamBYOBReader for a stream not constructed with a byte \" + \"source\");\n                    }\n                    ReadableStreamReaderGenericInitialize(this, stream);\n                    this._readIntoRequests = new SimpleQueue();\n                }\n                /**\n\t\t         * Returns a promise that will be fulfilled when the stream becomes closed, or rejected if the stream ever errors or\n\t\t         * the reader's lock is released before the stream finishes closing.\n\t\t         */ get closed() {\n                    if (!IsReadableStreamBYOBReader(this)) {\n                        return promiseRejectedWith(byobReaderBrandCheckException(\"closed\"));\n                    }\n                    return this._closedPromise;\n                }\n                /**\n\t\t         * If the reader is active, behaves the same as {@link ReadableStream.cancel | stream.cancel(reason)}.\n\t\t         */ cancel(reason = undefined) {\n                    if (!IsReadableStreamBYOBReader(this)) {\n                        return promiseRejectedWith(byobReaderBrandCheckException(\"cancel\"));\n                    }\n                    if (this._ownerReadableStream === undefined) {\n                        return promiseRejectedWith(readerLockException(\"cancel\"));\n                    }\n                    return ReadableStreamReaderGenericCancel(this, reason);\n                }\n                /**\n\t\t         * Attempts to reads bytes into view, and returns a promise resolved with the result.\n\t\t         *\n\t\t         * If reading a chunk causes the queue to become empty, more data will be pulled from the underlying source.\n\t\t         */ read(view) {\n                    if (!IsReadableStreamBYOBReader(this)) {\n                        return promiseRejectedWith(byobReaderBrandCheckException(\"read\"));\n                    }\n                    if (!ArrayBuffer.isView(view)) {\n                        return promiseRejectedWith(new TypeError(\"view must be an array buffer view\"));\n                    }\n                    if (view.byteLength === 0) {\n                        return promiseRejectedWith(new TypeError(\"view must have non-zero byteLength\"));\n                    }\n                    if (view.buffer.byteLength === 0) {\n                        return promiseRejectedWith(new TypeError(`view's buffer must have non-zero byteLength`));\n                    }\n                    if (IsDetachedBuffer(view.buffer)) ;\n                    if (this._ownerReadableStream === undefined) {\n                        return promiseRejectedWith(readerLockException(\"read from\"));\n                    }\n                    let resolvePromise;\n                    let rejectPromise;\n                    const promise = newPromise((resolve, reject)=>{\n                        resolvePromise = resolve;\n                        rejectPromise = reject;\n                    });\n                    const readIntoRequest = {\n                        _chunkSteps: (chunk)=>resolvePromise({\n                                value: chunk,\n                                done: false\n                            }),\n                        _closeSteps: (chunk)=>resolvePromise({\n                                value: chunk,\n                                done: true\n                            }),\n                        _errorSteps: (e)=>rejectPromise(e)\n                    };\n                    ReadableStreamBYOBReaderRead(this, view, readIntoRequest);\n                    return promise;\n                }\n                /**\n\t\t         * Releases the reader's lock on the corresponding stream. After the lock is released, the reader is no longer active.\n\t\t         * If the associated stream is errored when the lock is released, the reader will appear errored in the same way\n\t\t         * from now on; otherwise, the reader will appear closed.\n\t\t         *\n\t\t         * A reader's lock cannot be released while it still has a pending read request, i.e., if a promise returned by\n\t\t         * the reader's {@link ReadableStreamBYOBReader.read | read()} method has not yet been settled. Attempting to\n\t\t         * do so will throw a `TypeError` and leave the reader locked to the stream.\n\t\t         */ releaseLock() {\n                    if (!IsReadableStreamBYOBReader(this)) {\n                        throw byobReaderBrandCheckException(\"releaseLock\");\n                    }\n                    if (this._ownerReadableStream === undefined) {\n                        return;\n                    }\n                    if (this._readIntoRequests.length > 0) {\n                        throw new TypeError(\"Tried to release a reader lock when that reader has pending read() calls un-settled\");\n                    }\n                    ReadableStreamReaderGenericRelease(this);\n                }\n            }\n            Object.defineProperties(ReadableStreamBYOBReader.prototype, {\n                cancel: {\n                    enumerable: true\n                },\n                read: {\n                    enumerable: true\n                },\n                releaseLock: {\n                    enumerable: true\n                },\n                closed: {\n                    enumerable: true\n                }\n            });\n            if (typeof SymbolPolyfill.toStringTag === \"symbol\") {\n                Object.defineProperty(ReadableStreamBYOBReader.prototype, SymbolPolyfill.toStringTag, {\n                    value: \"ReadableStreamBYOBReader\",\n                    configurable: true\n                });\n            }\n            // Abstract operations for the readers.\n            function IsReadableStreamBYOBReader(x) {\n                if (!typeIsObject(x)) {\n                    return false;\n                }\n                if (!Object.prototype.hasOwnProperty.call(x, \"_readIntoRequests\")) {\n                    return false;\n                }\n                return x instanceof ReadableStreamBYOBReader;\n            }\n            function ReadableStreamBYOBReaderRead(reader, view, readIntoRequest) {\n                const stream = reader._ownerReadableStream;\n                stream._disturbed = true;\n                if (stream._state === \"errored\") {\n                    readIntoRequest._errorSteps(stream._storedError);\n                } else {\n                    ReadableByteStreamControllerPullInto(stream._readableStreamController, view, readIntoRequest);\n                }\n            }\n            // Helper functions for the ReadableStreamBYOBReader.\n            function byobReaderBrandCheckException(name) {\n                return new TypeError(`ReadableStreamBYOBReader.prototype.${name} can only be used on a ReadableStreamBYOBReader`);\n            }\n            function ExtractHighWaterMark(strategy, defaultHWM) {\n                const { highWaterMark } = strategy;\n                if (highWaterMark === undefined) {\n                    return defaultHWM;\n                }\n                if (NumberIsNaN(highWaterMark) || highWaterMark < 0) {\n                    throw new RangeError(\"Invalid highWaterMark\");\n                }\n                return highWaterMark;\n            }\n            function ExtractSizeAlgorithm(strategy) {\n                const { size } = strategy;\n                if (!size) {\n                    return ()=>1;\n                }\n                return size;\n            }\n            function convertQueuingStrategy(init, context) {\n                assertDictionary(init, context);\n                const highWaterMark = init === null || init === void 0 ? void 0 : init.highWaterMark;\n                const size = init === null || init === void 0 ? void 0 : init.size;\n                return {\n                    highWaterMark: highWaterMark === undefined ? undefined : convertUnrestrictedDouble(highWaterMark),\n                    size: size === undefined ? undefined : convertQueuingStrategySize(size, `${context} has member 'size' that`)\n                };\n            }\n            function convertQueuingStrategySize(fn, context) {\n                assertFunction(fn, context);\n                return (chunk)=>convertUnrestrictedDouble(fn(chunk));\n            }\n            function convertUnderlyingSink(original, context) {\n                assertDictionary(original, context);\n                const abort = original === null || original === void 0 ? void 0 : original.abort;\n                const close = original === null || original === void 0 ? void 0 : original.close;\n                const start = original === null || original === void 0 ? void 0 : original.start;\n                const type = original === null || original === void 0 ? void 0 : original.type;\n                const write = original === null || original === void 0 ? void 0 : original.write;\n                return {\n                    abort: abort === undefined ? undefined : convertUnderlyingSinkAbortCallback(abort, original, `${context} has member 'abort' that`),\n                    close: close === undefined ? undefined : convertUnderlyingSinkCloseCallback(close, original, `${context} has member 'close' that`),\n                    start: start === undefined ? undefined : convertUnderlyingSinkStartCallback(start, original, `${context} has member 'start' that`),\n                    write: write === undefined ? undefined : convertUnderlyingSinkWriteCallback(write, original, `${context} has member 'write' that`),\n                    type\n                };\n            }\n            function convertUnderlyingSinkAbortCallback(fn, original, context) {\n                assertFunction(fn, context);\n                return (reason)=>promiseCall(fn, original, [\n                        reason\n                    ]);\n            }\n            function convertUnderlyingSinkCloseCallback(fn, original, context) {\n                assertFunction(fn, context);\n                return ()=>promiseCall(fn, original, []);\n            }\n            function convertUnderlyingSinkStartCallback(fn, original, context) {\n                assertFunction(fn, context);\n                return (controller)=>reflectCall(fn, original, [\n                        controller\n                    ]);\n            }\n            function convertUnderlyingSinkWriteCallback(fn, original, context) {\n                assertFunction(fn, context);\n                return (chunk, controller)=>promiseCall(fn, original, [\n                        chunk,\n                        controller\n                    ]);\n            }\n            function assertWritableStream(x, context) {\n                if (!IsWritableStream(x)) {\n                    throw new TypeError(`${context} is not a WritableStream.`);\n                }\n            }\n            function isAbortSignal(value1) {\n                if (typeof value1 !== \"object\" || value1 === null) {\n                    return false;\n                }\n                try {\n                    return typeof value1.aborted === \"boolean\";\n                } catch (_a) {\n                    // AbortSignal.prototype.aborted throws if its brand check fails\n                    return false;\n                }\n            }\n            const supportsAbortController = typeof AbortController === \"function\";\n            /**\n\t\t     * Construct a new AbortController, if supported by the platform.\n\t\t     *\n\t\t     * @internal\n\t\t     */ function createAbortController() {\n                if (supportsAbortController) {\n                    return new AbortController();\n                }\n                return undefined;\n            }\n            /**\n\t\t     * A writable stream represents a destination for data, into which you can write.\n\t\t     *\n\t\t     * @public\n\t\t     */ class WritableStream {\n                constructor(rawUnderlyingSink = {}, rawStrategy = {}){\n                    if (rawUnderlyingSink === undefined) {\n                        rawUnderlyingSink = null;\n                    } else {\n                        assertObject(rawUnderlyingSink, \"First parameter\");\n                    }\n                    const strategy = convertQueuingStrategy(rawStrategy, \"Second parameter\");\n                    const underlyingSink = convertUnderlyingSink(rawUnderlyingSink, \"First parameter\");\n                    InitializeWritableStream(this);\n                    const type = underlyingSink.type;\n                    if (type !== undefined) {\n                        throw new RangeError(\"Invalid type is specified\");\n                    }\n                    const sizeAlgorithm = ExtractSizeAlgorithm(strategy);\n                    const highWaterMark = ExtractHighWaterMark(strategy, 1);\n                    SetUpWritableStreamDefaultControllerFromUnderlyingSink(this, underlyingSink, highWaterMark, sizeAlgorithm);\n                }\n                /**\n\t\t         * Returns whether or not the writable stream is locked to a writer.\n\t\t         */ get locked() {\n                    if (!IsWritableStream(this)) {\n                        throw streamBrandCheckException$2(\"locked\");\n                    }\n                    return IsWritableStreamLocked(this);\n                }\n                /**\n\t\t         * Aborts the stream, signaling that the producer can no longer successfully write to the stream and it is to be\n\t\t         * immediately moved to an errored state, with any queued-up writes discarded. This will also execute any abort\n\t\t         * mechanism of the underlying sink.\n\t\t         *\n\t\t         * The returned promise will fulfill if the stream shuts down successfully, or reject if the underlying sink signaled\n\t\t         * that there was an error doing so. Additionally, it will reject with a `TypeError` (without attempting to cancel\n\t\t         * the stream) if the stream is currently locked.\n\t\t         */ abort(reason = undefined) {\n                    if (!IsWritableStream(this)) {\n                        return promiseRejectedWith(streamBrandCheckException$2(\"abort\"));\n                    }\n                    if (IsWritableStreamLocked(this)) {\n                        return promiseRejectedWith(new TypeError(\"Cannot abort a stream that already has a writer\"));\n                    }\n                    return WritableStreamAbort(this, reason);\n                }\n                /**\n\t\t         * Closes the stream. The underlying sink will finish processing any previously-written chunks, before invoking its\n\t\t         * close behavior. During this time any further attempts to write will fail (without erroring the stream).\n\t\t         *\n\t\t         * The method returns a promise that will fulfill if all remaining chunks are successfully written and the stream\n\t\t         * successfully closes, or rejects if an error is encountered during this process. Additionally, it will reject with\n\t\t         * a `TypeError` (without attempting to cancel the stream) if the stream is currently locked.\n\t\t         */ close() {\n                    if (!IsWritableStream(this)) {\n                        return promiseRejectedWith(streamBrandCheckException$2(\"close\"));\n                    }\n                    if (IsWritableStreamLocked(this)) {\n                        return promiseRejectedWith(new TypeError(\"Cannot close a stream that already has a writer\"));\n                    }\n                    if (WritableStreamCloseQueuedOrInFlight(this)) {\n                        return promiseRejectedWith(new TypeError(\"Cannot close an already-closing stream\"));\n                    }\n                    return WritableStreamClose(this);\n                }\n                /**\n\t\t         * Creates a {@link WritableStreamDefaultWriter | writer} and locks the stream to the new writer. While the stream\n\t\t         * is locked, no other writer can be acquired until this one is released.\n\t\t         *\n\t\t         * This functionality is especially useful for creating abstractions that desire the ability to write to a stream\n\t\t         * without interruption or interleaving. By getting a writer for the stream, you can ensure nobody else can write at\n\t\t         * the same time, which would cause the resulting written data to be unpredictable and probably useless.\n\t\t         */ getWriter() {\n                    if (!IsWritableStream(this)) {\n                        throw streamBrandCheckException$2(\"getWriter\");\n                    }\n                    return AcquireWritableStreamDefaultWriter(this);\n                }\n            }\n            Object.defineProperties(WritableStream.prototype, {\n                abort: {\n                    enumerable: true\n                },\n                close: {\n                    enumerable: true\n                },\n                getWriter: {\n                    enumerable: true\n                },\n                locked: {\n                    enumerable: true\n                }\n            });\n            if (typeof SymbolPolyfill.toStringTag === \"symbol\") {\n                Object.defineProperty(WritableStream.prototype, SymbolPolyfill.toStringTag, {\n                    value: \"WritableStream\",\n                    configurable: true\n                });\n            }\n            // Abstract operations for the WritableStream.\n            function AcquireWritableStreamDefaultWriter(stream) {\n                return new WritableStreamDefaultWriter(stream);\n            }\n            // Throws if and only if startAlgorithm throws.\n            function CreateWritableStream(startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark = 1, sizeAlgorithm = ()=>1) {\n                const stream = Object.create(WritableStream.prototype);\n                InitializeWritableStream(stream);\n                const controller = Object.create(WritableStreamDefaultController.prototype);\n                SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm);\n                return stream;\n            }\n            function InitializeWritableStream(stream) {\n                stream._state = \"writable\";\n                // The error that will be reported by new method calls once the state becomes errored. Only set when [[state]] is\n                // 'erroring' or 'errored'. May be set to an undefined value.\n                stream._storedError = undefined;\n                stream._writer = undefined;\n                // Initialize to undefined first because the constructor of the controller checks this\n                // variable to validate the caller.\n                stream._writableStreamController = undefined;\n                // This queue is placed here instead of the writer class in order to allow for passing a writer to the next data\n                // producer without waiting for the queued writes to finish.\n                stream._writeRequests = new SimpleQueue();\n                // Write requests are removed from _writeRequests when write() is called on the underlying sink. This prevents\n                // them from being erroneously rejected on error. If a write() call is in-flight, the request is stored here.\n                stream._inFlightWriteRequest = undefined;\n                // The promise that was returned from writer.close(). Stored here because it may be fulfilled after the writer\n                // has been detached.\n                stream._closeRequest = undefined;\n                // Close request is removed from _closeRequest when close() is called on the underlying sink. This prevents it\n                // from being erroneously rejected on error. If a close() call is in-flight, the request is stored here.\n                stream._inFlightCloseRequest = undefined;\n                // The promise that was returned from writer.abort(). This may also be fulfilled after the writer has detached.\n                stream._pendingAbortRequest = undefined;\n                // The backpressure signal set by the controller.\n                stream._backpressure = false;\n            }\n            function IsWritableStream(x) {\n                if (!typeIsObject(x)) {\n                    return false;\n                }\n                if (!Object.prototype.hasOwnProperty.call(x, \"_writableStreamController\")) {\n                    return false;\n                }\n                return x instanceof WritableStream;\n            }\n            function IsWritableStreamLocked(stream) {\n                if (stream._writer === undefined) {\n                    return false;\n                }\n                return true;\n            }\n            function WritableStreamAbort(stream, reason) {\n                var _a;\n                if (stream._state === \"closed\" || stream._state === \"errored\") {\n                    return promiseResolvedWith(undefined);\n                }\n                stream._writableStreamController._abortReason = reason;\n                (_a = stream._writableStreamController._abortController) === null || _a === void 0 ? void 0 : _a.abort();\n                // TypeScript narrows the type of `stream._state` down to 'writable' | 'erroring',\n                // but it doesn't know that signaling abort runs author code that might have changed the state.\n                // Widen the type again by casting to WritableStreamState.\n                const state = stream._state;\n                if (state === \"closed\" || state === \"errored\") {\n                    return promiseResolvedWith(undefined);\n                }\n                if (stream._pendingAbortRequest !== undefined) {\n                    return stream._pendingAbortRequest._promise;\n                }\n                let wasAlreadyErroring = false;\n                if (state === \"erroring\") {\n                    wasAlreadyErroring = true;\n                    // reason will not be used, so don't keep a reference to it.\n                    reason = undefined;\n                }\n                const promise = newPromise((resolve, reject)=>{\n                    stream._pendingAbortRequest = {\n                        _promise: undefined,\n                        _resolve: resolve,\n                        _reject: reject,\n                        _reason: reason,\n                        _wasAlreadyErroring: wasAlreadyErroring\n                    };\n                });\n                stream._pendingAbortRequest._promise = promise;\n                if (!wasAlreadyErroring) {\n                    WritableStreamStartErroring(stream, reason);\n                }\n                return promise;\n            }\n            function WritableStreamClose(stream) {\n                const state = stream._state;\n                if (state === \"closed\" || state === \"errored\") {\n                    return promiseRejectedWith(new TypeError(`The stream (in ${state} state) is not in the writable state and cannot be closed`));\n                }\n                const promise = newPromise((resolve, reject)=>{\n                    const closeRequest = {\n                        _resolve: resolve,\n                        _reject: reject\n                    };\n                    stream._closeRequest = closeRequest;\n                });\n                const writer = stream._writer;\n                if (writer !== undefined && stream._backpressure && state === \"writable\") {\n                    defaultWriterReadyPromiseResolve(writer);\n                }\n                WritableStreamDefaultControllerClose(stream._writableStreamController);\n                return promise;\n            }\n            // WritableStream API exposed for controllers.\n            function WritableStreamAddWriteRequest(stream) {\n                const promise = newPromise((resolve, reject)=>{\n                    const writeRequest = {\n                        _resolve: resolve,\n                        _reject: reject\n                    };\n                    stream._writeRequests.push(writeRequest);\n                });\n                return promise;\n            }\n            function WritableStreamDealWithRejection(stream, error) {\n                const state = stream._state;\n                if (state === \"writable\") {\n                    WritableStreamStartErroring(stream, error);\n                    return;\n                }\n                WritableStreamFinishErroring(stream);\n            }\n            function WritableStreamStartErroring(stream, reason) {\n                const controller = stream._writableStreamController;\n                stream._state = \"erroring\";\n                stream._storedError = reason;\n                const writer = stream._writer;\n                if (writer !== undefined) {\n                    WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, reason);\n                }\n                if (!WritableStreamHasOperationMarkedInFlight(stream) && controller._started) {\n                    WritableStreamFinishErroring(stream);\n                }\n            }\n            function WritableStreamFinishErroring(stream) {\n                stream._state = \"errored\";\n                stream._writableStreamController[ErrorSteps]();\n                const storedError = stream._storedError;\n                stream._writeRequests.forEach((writeRequest)=>{\n                    writeRequest._reject(storedError);\n                });\n                stream._writeRequests = new SimpleQueue();\n                if (stream._pendingAbortRequest === undefined) {\n                    WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n                    return;\n                }\n                const abortRequest = stream._pendingAbortRequest;\n                stream._pendingAbortRequest = undefined;\n                if (abortRequest._wasAlreadyErroring) {\n                    abortRequest._reject(storedError);\n                    WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n                    return;\n                }\n                const promise = stream._writableStreamController[AbortSteps](abortRequest._reason);\n                uponPromise(promise, ()=>{\n                    abortRequest._resolve();\n                    WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n                }, (reason)=>{\n                    abortRequest._reject(reason);\n                    WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n                });\n            }\n            function WritableStreamFinishInFlightWrite(stream) {\n                stream._inFlightWriteRequest._resolve(undefined);\n                stream._inFlightWriteRequest = undefined;\n            }\n            function WritableStreamFinishInFlightWriteWithError(stream, error) {\n                stream._inFlightWriteRequest._reject(error);\n                stream._inFlightWriteRequest = undefined;\n                WritableStreamDealWithRejection(stream, error);\n            }\n            function WritableStreamFinishInFlightClose(stream) {\n                stream._inFlightCloseRequest._resolve(undefined);\n                stream._inFlightCloseRequest = undefined;\n                const state = stream._state;\n                if (state === \"erroring\") {\n                    // The error was too late to do anything, so it is ignored.\n                    stream._storedError = undefined;\n                    if (stream._pendingAbortRequest !== undefined) {\n                        stream._pendingAbortRequest._resolve();\n                        stream._pendingAbortRequest = undefined;\n                    }\n                }\n                stream._state = \"closed\";\n                const writer = stream._writer;\n                if (writer !== undefined) {\n                    defaultWriterClosedPromiseResolve(writer);\n                }\n            }\n            function WritableStreamFinishInFlightCloseWithError(stream, error) {\n                stream._inFlightCloseRequest._reject(error);\n                stream._inFlightCloseRequest = undefined;\n                // Never execute sink abort() after sink close().\n                if (stream._pendingAbortRequest !== undefined) {\n                    stream._pendingAbortRequest._reject(error);\n                    stream._pendingAbortRequest = undefined;\n                }\n                WritableStreamDealWithRejection(stream, error);\n            }\n            // TODO(ricea): Fix alphabetical order.\n            function WritableStreamCloseQueuedOrInFlight(stream) {\n                if (stream._closeRequest === undefined && stream._inFlightCloseRequest === undefined) {\n                    return false;\n                }\n                return true;\n            }\n            function WritableStreamHasOperationMarkedInFlight(stream) {\n                if (stream._inFlightWriteRequest === undefined && stream._inFlightCloseRequest === undefined) {\n                    return false;\n                }\n                return true;\n            }\n            function WritableStreamMarkCloseRequestInFlight(stream) {\n                stream._inFlightCloseRequest = stream._closeRequest;\n                stream._closeRequest = undefined;\n            }\n            function WritableStreamMarkFirstWriteRequestInFlight(stream) {\n                stream._inFlightWriteRequest = stream._writeRequests.shift();\n            }\n            function WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream) {\n                if (stream._closeRequest !== undefined) {\n                    stream._closeRequest._reject(stream._storedError);\n                    stream._closeRequest = undefined;\n                }\n                const writer = stream._writer;\n                if (writer !== undefined) {\n                    defaultWriterClosedPromiseReject(writer, stream._storedError);\n                }\n            }\n            function WritableStreamUpdateBackpressure(stream, backpressure) {\n                const writer = stream._writer;\n                if (writer !== undefined && backpressure !== stream._backpressure) {\n                    if (backpressure) {\n                        defaultWriterReadyPromiseReset(writer);\n                    } else {\n                        defaultWriterReadyPromiseResolve(writer);\n                    }\n                }\n                stream._backpressure = backpressure;\n            }\n            /**\n\t\t     * A default writer vended by a {@link WritableStream}.\n\t\t     *\n\t\t     * @public\n\t\t     */ class WritableStreamDefaultWriter {\n                constructor(stream){\n                    assertRequiredArgument(stream, 1, \"WritableStreamDefaultWriter\");\n                    assertWritableStream(stream, \"First parameter\");\n                    if (IsWritableStreamLocked(stream)) {\n                        throw new TypeError(\"This stream has already been locked for exclusive writing by another writer\");\n                    }\n                    this._ownerWritableStream = stream;\n                    stream._writer = this;\n                    const state = stream._state;\n                    if (state === \"writable\") {\n                        if (!WritableStreamCloseQueuedOrInFlight(stream) && stream._backpressure) {\n                            defaultWriterReadyPromiseInitialize(this);\n                        } else {\n                            defaultWriterReadyPromiseInitializeAsResolved(this);\n                        }\n                        defaultWriterClosedPromiseInitialize(this);\n                    } else if (state === \"erroring\") {\n                        defaultWriterReadyPromiseInitializeAsRejected(this, stream._storedError);\n                        defaultWriterClosedPromiseInitialize(this);\n                    } else if (state === \"closed\") {\n                        defaultWriterReadyPromiseInitializeAsResolved(this);\n                        defaultWriterClosedPromiseInitializeAsResolved(this);\n                    } else {\n                        const storedError = stream._storedError;\n                        defaultWriterReadyPromiseInitializeAsRejected(this, storedError);\n                        defaultWriterClosedPromiseInitializeAsRejected(this, storedError);\n                    }\n                }\n                /**\n\t\t         * Returns a promise that will be fulfilled when the stream becomes closed, or rejected if the stream ever errors or\n\t\t         * the writer’s lock is released before the stream finishes closing.\n\t\t         */ get closed() {\n                    if (!IsWritableStreamDefaultWriter(this)) {\n                        return promiseRejectedWith(defaultWriterBrandCheckException(\"closed\"));\n                    }\n                    return this._closedPromise;\n                }\n                /**\n\t\t         * Returns the desired size to fill the stream’s internal queue. It can be negative, if the queue is over-full.\n\t\t         * A producer can use this information to determine the right amount of data to write.\n\t\t         *\n\t\t         * It will be `null` if the stream cannot be successfully written to (due to either being errored, or having an abort\n\t\t         * queued up). It will return zero if the stream is closed. And the getter will throw an exception if invoked when\n\t\t         * the writer’s lock is released.\n\t\t         */ get desiredSize() {\n                    if (!IsWritableStreamDefaultWriter(this)) {\n                        throw defaultWriterBrandCheckException(\"desiredSize\");\n                    }\n                    if (this._ownerWritableStream === undefined) {\n                        throw defaultWriterLockException(\"desiredSize\");\n                    }\n                    return WritableStreamDefaultWriterGetDesiredSize(this);\n                }\n                /**\n\t\t         * Returns a promise that will be fulfilled when the desired size to fill the stream’s internal queue transitions\n\t\t         * from non-positive to positive, signaling that it is no longer applying backpressure. Once the desired size dips\n\t\t         * back to zero or below, the getter will return a new promise that stays pending until the next transition.\n\t\t         *\n\t\t         * If the stream becomes errored or aborted, or the writer’s lock is released, the returned promise will become\n\t\t         * rejected.\n\t\t         */ get ready() {\n                    if (!IsWritableStreamDefaultWriter(this)) {\n                        return promiseRejectedWith(defaultWriterBrandCheckException(\"ready\"));\n                    }\n                    return this._readyPromise;\n                }\n                /**\n\t\t         * If the reader is active, behaves the same as {@link WritableStream.abort | stream.abort(reason)}.\n\t\t         */ abort(reason = undefined) {\n                    if (!IsWritableStreamDefaultWriter(this)) {\n                        return promiseRejectedWith(defaultWriterBrandCheckException(\"abort\"));\n                    }\n                    if (this._ownerWritableStream === undefined) {\n                        return promiseRejectedWith(defaultWriterLockException(\"abort\"));\n                    }\n                    return WritableStreamDefaultWriterAbort(this, reason);\n                }\n                /**\n\t\t         * If the reader is active, behaves the same as {@link WritableStream.close | stream.close()}.\n\t\t         */ close() {\n                    if (!IsWritableStreamDefaultWriter(this)) {\n                        return promiseRejectedWith(defaultWriterBrandCheckException(\"close\"));\n                    }\n                    const stream = this._ownerWritableStream;\n                    if (stream === undefined) {\n                        return promiseRejectedWith(defaultWriterLockException(\"close\"));\n                    }\n                    if (WritableStreamCloseQueuedOrInFlight(stream)) {\n                        return promiseRejectedWith(new TypeError(\"Cannot close an already-closing stream\"));\n                    }\n                    return WritableStreamDefaultWriterClose(this);\n                }\n                /**\n\t\t         * Releases the writer’s lock on the corresponding stream. After the lock is released, the writer is no longer active.\n\t\t         * If the associated stream is errored when the lock is released, the writer will appear errored in the same way from\n\t\t         * now on; otherwise, the writer will appear closed.\n\t\t         *\n\t\t         * Note that the lock can still be released even if some ongoing writes have not yet finished (i.e. even if the\n\t\t         * promises returned from previous calls to {@link WritableStreamDefaultWriter.write | write()} have not yet settled).\n\t\t         * It’s not necessary to hold the lock on the writer for the duration of the write; the lock instead simply prevents\n\t\t         * other producers from writing in an interleaved manner.\n\t\t         */ releaseLock() {\n                    if (!IsWritableStreamDefaultWriter(this)) {\n                        throw defaultWriterBrandCheckException(\"releaseLock\");\n                    }\n                    const stream = this._ownerWritableStream;\n                    if (stream === undefined) {\n                        return;\n                    }\n                    WritableStreamDefaultWriterRelease(this);\n                }\n                write(chunk = undefined) {\n                    if (!IsWritableStreamDefaultWriter(this)) {\n                        return promiseRejectedWith(defaultWriterBrandCheckException(\"write\"));\n                    }\n                    if (this._ownerWritableStream === undefined) {\n                        return promiseRejectedWith(defaultWriterLockException(\"write to\"));\n                    }\n                    return WritableStreamDefaultWriterWrite(this, chunk);\n                }\n            }\n            Object.defineProperties(WritableStreamDefaultWriter.prototype, {\n                abort: {\n                    enumerable: true\n                },\n                close: {\n                    enumerable: true\n                },\n                releaseLock: {\n                    enumerable: true\n                },\n                write: {\n                    enumerable: true\n                },\n                closed: {\n                    enumerable: true\n                },\n                desiredSize: {\n                    enumerable: true\n                },\n                ready: {\n                    enumerable: true\n                }\n            });\n            if (typeof SymbolPolyfill.toStringTag === \"symbol\") {\n                Object.defineProperty(WritableStreamDefaultWriter.prototype, SymbolPolyfill.toStringTag, {\n                    value: \"WritableStreamDefaultWriter\",\n                    configurable: true\n                });\n            }\n            // Abstract operations for the WritableStreamDefaultWriter.\n            function IsWritableStreamDefaultWriter(x) {\n                if (!typeIsObject(x)) {\n                    return false;\n                }\n                if (!Object.prototype.hasOwnProperty.call(x, \"_ownerWritableStream\")) {\n                    return false;\n                }\n                return x instanceof WritableStreamDefaultWriter;\n            }\n            // A client of WritableStreamDefaultWriter may use these functions directly to bypass state check.\n            function WritableStreamDefaultWriterAbort(writer, reason) {\n                const stream = writer._ownerWritableStream;\n                return WritableStreamAbort(stream, reason);\n            }\n            function WritableStreamDefaultWriterClose(writer) {\n                const stream = writer._ownerWritableStream;\n                return WritableStreamClose(stream);\n            }\n            function WritableStreamDefaultWriterCloseWithErrorPropagation(writer) {\n                const stream = writer._ownerWritableStream;\n                const state = stream._state;\n                if (WritableStreamCloseQueuedOrInFlight(stream) || state === \"closed\") {\n                    return promiseResolvedWith(undefined);\n                }\n                if (state === \"errored\") {\n                    return promiseRejectedWith(stream._storedError);\n                }\n                return WritableStreamDefaultWriterClose(writer);\n            }\n            function WritableStreamDefaultWriterEnsureClosedPromiseRejected(writer, error) {\n                if (writer._closedPromiseState === \"pending\") {\n                    defaultWriterClosedPromiseReject(writer, error);\n                } else {\n                    defaultWriterClosedPromiseResetToRejected(writer, error);\n                }\n            }\n            function WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, error) {\n                if (writer._readyPromiseState === \"pending\") {\n                    defaultWriterReadyPromiseReject(writer, error);\n                } else {\n                    defaultWriterReadyPromiseResetToRejected(writer, error);\n                }\n            }\n            function WritableStreamDefaultWriterGetDesiredSize(writer) {\n                const stream = writer._ownerWritableStream;\n                const state = stream._state;\n                if (state === \"errored\" || state === \"erroring\") {\n                    return null;\n                }\n                if (state === \"closed\") {\n                    return 0;\n                }\n                return WritableStreamDefaultControllerGetDesiredSize(stream._writableStreamController);\n            }\n            function WritableStreamDefaultWriterRelease(writer) {\n                const stream = writer._ownerWritableStream;\n                const releasedError = new TypeError(`Writer was released and can no longer be used to monitor the stream's closedness`);\n                WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, releasedError);\n                // The state transitions to \"errored\" before the sink abort() method runs, but the writer.closed promise is not\n                // rejected until afterwards. This means that simply testing state will not work.\n                WritableStreamDefaultWriterEnsureClosedPromiseRejected(writer, releasedError);\n                stream._writer = undefined;\n                writer._ownerWritableStream = undefined;\n            }\n            function WritableStreamDefaultWriterWrite(writer, chunk) {\n                const stream = writer._ownerWritableStream;\n                const controller = stream._writableStreamController;\n                const chunkSize = WritableStreamDefaultControllerGetChunkSize(controller, chunk);\n                if (stream !== writer._ownerWritableStream) {\n                    return promiseRejectedWith(defaultWriterLockException(\"write to\"));\n                }\n                const state = stream._state;\n                if (state === \"errored\") {\n                    return promiseRejectedWith(stream._storedError);\n                }\n                if (WritableStreamCloseQueuedOrInFlight(stream) || state === \"closed\") {\n                    return promiseRejectedWith(new TypeError(\"The stream is closing or closed and cannot be written to\"));\n                }\n                if (state === \"erroring\") {\n                    return promiseRejectedWith(stream._storedError);\n                }\n                const promise = WritableStreamAddWriteRequest(stream);\n                WritableStreamDefaultControllerWrite(controller, chunk, chunkSize);\n                return promise;\n            }\n            const closeSentinel = {};\n            /**\n\t\t     * Allows control of a {@link WritableStream | writable stream}'s state and internal queue.\n\t\t     *\n\t\t     * @public\n\t\t     */ class WritableStreamDefaultController {\n                constructor(){\n                    throw new TypeError(\"Illegal constructor\");\n                }\n                /**\n\t\t         * The reason which was passed to `WritableStream.abort(reason)` when the stream was aborted.\n\t\t         *\n\t\t         * @deprecated\n\t\t         *  This property has been removed from the specification, see https://github.com/whatwg/streams/pull/1177.\n\t\t         *  Use {@link WritableStreamDefaultController.signal}'s `reason` instead.\n\t\t         */ get abortReason() {\n                    if (!IsWritableStreamDefaultController(this)) {\n                        throw defaultControllerBrandCheckException$2(\"abortReason\");\n                    }\n                    return this._abortReason;\n                }\n                /**\n\t\t         * An `AbortSignal` that can be used to abort the pending write or close operation when the stream is aborted.\n\t\t         */ get signal() {\n                    if (!IsWritableStreamDefaultController(this)) {\n                        throw defaultControllerBrandCheckException$2(\"signal\");\n                    }\n                    if (this._abortController === undefined) {\n                        // Older browsers or older Node versions may not support `AbortController` or `AbortSignal`.\n                        // We don't want to bundle and ship an `AbortController` polyfill together with our polyfill,\n                        // so instead we only implement support for `signal` if we find a global `AbortController` constructor.\n                        throw new TypeError(\"WritableStreamDefaultController.prototype.signal is not supported\");\n                    }\n                    return this._abortController.signal;\n                }\n                /**\n\t\t         * Closes the controlled writable stream, making all future interactions with it fail with the given error `e`.\n\t\t         *\n\t\t         * This method is rarely used, since usually it suffices to return a rejected promise from one of the underlying\n\t\t         * sink's methods. However, it can be useful for suddenly shutting down a stream in response to an event outside the\n\t\t         * normal lifecycle of interactions with the underlying sink.\n\t\t         */ error(e = undefined) {\n                    if (!IsWritableStreamDefaultController(this)) {\n                        throw defaultControllerBrandCheckException$2(\"error\");\n                    }\n                    const state = this._controlledWritableStream._state;\n                    if (state !== \"writable\") {\n                        // The stream is closed, errored or will be soon. The sink can't do anything useful if it gets an error here, so\n                        // just treat it as a no-op.\n                        return;\n                    }\n                    WritableStreamDefaultControllerError(this, e);\n                }\n                /** @internal */ [AbortSteps](reason) {\n                    const result = this._abortAlgorithm(reason);\n                    WritableStreamDefaultControllerClearAlgorithms(this);\n                    return result;\n                }\n                /** @internal */ [ErrorSteps]() {\n                    ResetQueue(this);\n                }\n            }\n            Object.defineProperties(WritableStreamDefaultController.prototype, {\n                abortReason: {\n                    enumerable: true\n                },\n                signal: {\n                    enumerable: true\n                },\n                error: {\n                    enumerable: true\n                }\n            });\n            if (typeof SymbolPolyfill.toStringTag === \"symbol\") {\n                Object.defineProperty(WritableStreamDefaultController.prototype, SymbolPolyfill.toStringTag, {\n                    value: \"WritableStreamDefaultController\",\n                    configurable: true\n                });\n            }\n            // Abstract operations implementing interface required by the WritableStream.\n            function IsWritableStreamDefaultController(x) {\n                if (!typeIsObject(x)) {\n                    return false;\n                }\n                if (!Object.prototype.hasOwnProperty.call(x, \"_controlledWritableStream\")) {\n                    return false;\n                }\n                return x instanceof WritableStreamDefaultController;\n            }\n            function SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm) {\n                controller._controlledWritableStream = stream;\n                stream._writableStreamController = controller;\n                // Need to set the slots so that the assert doesn't fire. In the spec the slots already exist implicitly.\n                controller._queue = undefined;\n                controller._queueTotalSize = undefined;\n                ResetQueue(controller);\n                controller._abortReason = undefined;\n                controller._abortController = createAbortController();\n                controller._started = false;\n                controller._strategySizeAlgorithm = sizeAlgorithm;\n                controller._strategyHWM = highWaterMark;\n                controller._writeAlgorithm = writeAlgorithm;\n                controller._closeAlgorithm = closeAlgorithm;\n                controller._abortAlgorithm = abortAlgorithm;\n                const backpressure = WritableStreamDefaultControllerGetBackpressure(controller);\n                WritableStreamUpdateBackpressure(stream, backpressure);\n                const startResult = startAlgorithm();\n                const startPromise = promiseResolvedWith(startResult);\n                uponPromise(startPromise, ()=>{\n                    controller._started = true;\n                    WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n                }, (r)=>{\n                    controller._started = true;\n                    WritableStreamDealWithRejection(stream, r);\n                });\n            }\n            function SetUpWritableStreamDefaultControllerFromUnderlyingSink(stream, underlyingSink, highWaterMark, sizeAlgorithm) {\n                const controller = Object.create(WritableStreamDefaultController.prototype);\n                let startAlgorithm = ()=>undefined;\n                let writeAlgorithm = ()=>promiseResolvedWith(undefined);\n                let closeAlgorithm = ()=>promiseResolvedWith(undefined);\n                let abortAlgorithm = ()=>promiseResolvedWith(undefined);\n                if (underlyingSink.start !== undefined) {\n                    startAlgorithm = ()=>underlyingSink.start(controller);\n                }\n                if (underlyingSink.write !== undefined) {\n                    writeAlgorithm = (chunk)=>underlyingSink.write(chunk, controller);\n                }\n                if (underlyingSink.close !== undefined) {\n                    closeAlgorithm = ()=>underlyingSink.close();\n                }\n                if (underlyingSink.abort !== undefined) {\n                    abortAlgorithm = (reason)=>underlyingSink.abort(reason);\n                }\n                SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm);\n            }\n            // ClearAlgorithms may be called twice. Erroring the same stream in multiple ways will often result in redundant calls.\n            function WritableStreamDefaultControllerClearAlgorithms(controller) {\n                controller._writeAlgorithm = undefined;\n                controller._closeAlgorithm = undefined;\n                controller._abortAlgorithm = undefined;\n                controller._strategySizeAlgorithm = undefined;\n            }\n            function WritableStreamDefaultControllerClose(controller) {\n                EnqueueValueWithSize(controller, closeSentinel, 0);\n                WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n            }\n            function WritableStreamDefaultControllerGetChunkSize(controller, chunk) {\n                try {\n                    return controller._strategySizeAlgorithm(chunk);\n                } catch (chunkSizeE) {\n                    WritableStreamDefaultControllerErrorIfNeeded(controller, chunkSizeE);\n                    return 1;\n                }\n            }\n            function WritableStreamDefaultControllerGetDesiredSize(controller) {\n                return controller._strategyHWM - controller._queueTotalSize;\n            }\n            function WritableStreamDefaultControllerWrite(controller, chunk, chunkSize) {\n                try {\n                    EnqueueValueWithSize(controller, chunk, chunkSize);\n                } catch (enqueueE) {\n                    WritableStreamDefaultControllerErrorIfNeeded(controller, enqueueE);\n                    return;\n                }\n                const stream = controller._controlledWritableStream;\n                if (!WritableStreamCloseQueuedOrInFlight(stream) && stream._state === \"writable\") {\n                    const backpressure = WritableStreamDefaultControllerGetBackpressure(controller);\n                    WritableStreamUpdateBackpressure(stream, backpressure);\n                }\n                WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n            }\n            // Abstract operations for the WritableStreamDefaultController.\n            function WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller) {\n                const stream = controller._controlledWritableStream;\n                if (!controller._started) {\n                    return;\n                }\n                if (stream._inFlightWriteRequest !== undefined) {\n                    return;\n                }\n                const state = stream._state;\n                if (state === \"erroring\") {\n                    WritableStreamFinishErroring(stream);\n                    return;\n                }\n                if (controller._queue.length === 0) {\n                    return;\n                }\n                const value1 = PeekQueueValue(controller);\n                if (value1 === closeSentinel) {\n                    WritableStreamDefaultControllerProcessClose(controller);\n                } else {\n                    WritableStreamDefaultControllerProcessWrite(controller, value1);\n                }\n            }\n            function WritableStreamDefaultControllerErrorIfNeeded(controller, error) {\n                if (controller._controlledWritableStream._state === \"writable\") {\n                    WritableStreamDefaultControllerError(controller, error);\n                }\n            }\n            function WritableStreamDefaultControllerProcessClose(controller) {\n                const stream = controller._controlledWritableStream;\n                WritableStreamMarkCloseRequestInFlight(stream);\n                DequeueValue(controller);\n                const sinkClosePromise = controller._closeAlgorithm();\n                WritableStreamDefaultControllerClearAlgorithms(controller);\n                uponPromise(sinkClosePromise, ()=>{\n                    WritableStreamFinishInFlightClose(stream);\n                }, (reason)=>{\n                    WritableStreamFinishInFlightCloseWithError(stream, reason);\n                });\n            }\n            function WritableStreamDefaultControllerProcessWrite(controller, chunk) {\n                const stream = controller._controlledWritableStream;\n                WritableStreamMarkFirstWriteRequestInFlight(stream);\n                const sinkWritePromise = controller._writeAlgorithm(chunk);\n                uponPromise(sinkWritePromise, ()=>{\n                    WritableStreamFinishInFlightWrite(stream);\n                    const state = stream._state;\n                    DequeueValue(controller);\n                    if (!WritableStreamCloseQueuedOrInFlight(stream) && state === \"writable\") {\n                        const backpressure = WritableStreamDefaultControllerGetBackpressure(controller);\n                        WritableStreamUpdateBackpressure(stream, backpressure);\n                    }\n                    WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n                }, (reason)=>{\n                    if (stream._state === \"writable\") {\n                        WritableStreamDefaultControllerClearAlgorithms(controller);\n                    }\n                    WritableStreamFinishInFlightWriteWithError(stream, reason);\n                });\n            }\n            function WritableStreamDefaultControllerGetBackpressure(controller) {\n                const desiredSize = WritableStreamDefaultControllerGetDesiredSize(controller);\n                return desiredSize <= 0;\n            }\n            // A client of WritableStreamDefaultController may use these functions directly to bypass state check.\n            function WritableStreamDefaultControllerError(controller, error) {\n                const stream = controller._controlledWritableStream;\n                WritableStreamDefaultControllerClearAlgorithms(controller);\n                WritableStreamStartErroring(stream, error);\n            }\n            // Helper functions for the WritableStream.\n            function streamBrandCheckException$2(name) {\n                return new TypeError(`WritableStream.prototype.${name} can only be used on a WritableStream`);\n            }\n            // Helper functions for the WritableStreamDefaultController.\n            function defaultControllerBrandCheckException$2(name) {\n                return new TypeError(`WritableStreamDefaultController.prototype.${name} can only be used on a WritableStreamDefaultController`);\n            }\n            // Helper functions for the WritableStreamDefaultWriter.\n            function defaultWriterBrandCheckException(name) {\n                return new TypeError(`WritableStreamDefaultWriter.prototype.${name} can only be used on a WritableStreamDefaultWriter`);\n            }\n            function defaultWriterLockException(name) {\n                return new TypeError(\"Cannot \" + name + \" a stream using a released writer\");\n            }\n            function defaultWriterClosedPromiseInitialize(writer) {\n                writer._closedPromise = newPromise((resolve, reject)=>{\n                    writer._closedPromise_resolve = resolve;\n                    writer._closedPromise_reject = reject;\n                    writer._closedPromiseState = \"pending\";\n                });\n            }\n            function defaultWriterClosedPromiseInitializeAsRejected(writer, reason) {\n                defaultWriterClosedPromiseInitialize(writer);\n                defaultWriterClosedPromiseReject(writer, reason);\n            }\n            function defaultWriterClosedPromiseInitializeAsResolved(writer) {\n                defaultWriterClosedPromiseInitialize(writer);\n                defaultWriterClosedPromiseResolve(writer);\n            }\n            function defaultWriterClosedPromiseReject(writer, reason) {\n                if (writer._closedPromise_reject === undefined) {\n                    return;\n                }\n                setPromiseIsHandledToTrue(writer._closedPromise);\n                writer._closedPromise_reject(reason);\n                writer._closedPromise_resolve = undefined;\n                writer._closedPromise_reject = undefined;\n                writer._closedPromiseState = \"rejected\";\n            }\n            function defaultWriterClosedPromiseResetToRejected(writer, reason) {\n                defaultWriterClosedPromiseInitializeAsRejected(writer, reason);\n            }\n            function defaultWriterClosedPromiseResolve(writer) {\n                if (writer._closedPromise_resolve === undefined) {\n                    return;\n                }\n                writer._closedPromise_resolve(undefined);\n                writer._closedPromise_resolve = undefined;\n                writer._closedPromise_reject = undefined;\n                writer._closedPromiseState = \"resolved\";\n            }\n            function defaultWriterReadyPromiseInitialize(writer) {\n                writer._readyPromise = newPromise((resolve, reject)=>{\n                    writer._readyPromise_resolve = resolve;\n                    writer._readyPromise_reject = reject;\n                });\n                writer._readyPromiseState = \"pending\";\n            }\n            function defaultWriterReadyPromiseInitializeAsRejected(writer, reason) {\n                defaultWriterReadyPromiseInitialize(writer);\n                defaultWriterReadyPromiseReject(writer, reason);\n            }\n            function defaultWriterReadyPromiseInitializeAsResolved(writer) {\n                defaultWriterReadyPromiseInitialize(writer);\n                defaultWriterReadyPromiseResolve(writer);\n            }\n            function defaultWriterReadyPromiseReject(writer, reason) {\n                if (writer._readyPromise_reject === undefined) {\n                    return;\n                }\n                setPromiseIsHandledToTrue(writer._readyPromise);\n                writer._readyPromise_reject(reason);\n                writer._readyPromise_resolve = undefined;\n                writer._readyPromise_reject = undefined;\n                writer._readyPromiseState = \"rejected\";\n            }\n            function defaultWriterReadyPromiseReset(writer) {\n                defaultWriterReadyPromiseInitialize(writer);\n            }\n            function defaultWriterReadyPromiseResetToRejected(writer, reason) {\n                defaultWriterReadyPromiseInitializeAsRejected(writer, reason);\n            }\n            function defaultWriterReadyPromiseResolve(writer) {\n                if (writer._readyPromise_resolve === undefined) {\n                    return;\n                }\n                writer._readyPromise_resolve(undefined);\n                writer._readyPromise_resolve = undefined;\n                writer._readyPromise_reject = undefined;\n                writer._readyPromiseState = \"fulfilled\";\n            }\n            /// <reference lib=\"dom\" />\n            const NativeDOMException = typeof DOMException !== \"undefined\" ? DOMException : undefined;\n            /// <reference types=\"node\" />\n            function isDOMExceptionConstructor(ctor) {\n                if (!(typeof ctor === \"function\" || typeof ctor === \"object\")) {\n                    return false;\n                }\n                try {\n                    new ctor();\n                    return true;\n                } catch (_a) {\n                    return false;\n                }\n            }\n            function createDOMExceptionPolyfill() {\n                // eslint-disable-next-line no-shadow\n                const ctor = function DOMException1(message, name) {\n                    this.message = message || \"\";\n                    this.name = name || \"Error\";\n                    if (Error.captureStackTrace) {\n                        Error.captureStackTrace(this, this.constructor);\n                    }\n                };\n                ctor.prototype = Object.create(Error.prototype);\n                Object.defineProperty(ctor.prototype, \"constructor\", {\n                    value: ctor,\n                    writable: true,\n                    configurable: true\n                });\n                return ctor;\n            }\n            // eslint-disable-next-line no-redeclare\n            const DOMException$1 = isDOMExceptionConstructor(NativeDOMException) ? NativeDOMException : createDOMExceptionPolyfill();\n            function ReadableStreamPipeTo(source, dest, preventClose, preventAbort, preventCancel, signal) {\n                const reader = AcquireReadableStreamDefaultReader(source);\n                const writer = AcquireWritableStreamDefaultWriter(dest);\n                source._disturbed = true;\n                let shuttingDown = false;\n                // This is used to keep track of the spec's requirement that we wait for ongoing writes during shutdown.\n                let currentWrite = promiseResolvedWith(undefined);\n                return newPromise((resolve, reject)=>{\n                    let abortAlgorithm;\n                    if (signal !== undefined) {\n                        abortAlgorithm = ()=>{\n                            const error = new DOMException$1(\"Aborted\", \"AbortError\");\n                            const actions = [];\n                            if (!preventAbort) {\n                                actions.push(()=>{\n                                    if (dest._state === \"writable\") {\n                                        return WritableStreamAbort(dest, error);\n                                    }\n                                    return promiseResolvedWith(undefined);\n                                });\n                            }\n                            if (!preventCancel) {\n                                actions.push(()=>{\n                                    if (source._state === \"readable\") {\n                                        return ReadableStreamCancel(source, error);\n                                    }\n                                    return promiseResolvedWith(undefined);\n                                });\n                            }\n                            shutdownWithAction(()=>Promise.all(actions.map((action)=>action())), true, error);\n                        };\n                        if (signal.aborted) {\n                            abortAlgorithm();\n                            return;\n                        }\n                        signal.addEventListener(\"abort\", abortAlgorithm);\n                    }\n                    // Using reader and writer, read all chunks from this and write them to dest\n                    // - Backpressure must be enforced\n                    // - Shutdown must stop all activity\n                    function pipeLoop() {\n                        return newPromise((resolveLoop, rejectLoop)=>{\n                            function next(done) {\n                                if (done) {\n                                    resolveLoop();\n                                } else {\n                                    // Use `PerformPromiseThen` instead of `uponPromise` to avoid\n                                    // adding unnecessary `.catch(rethrowAssertionErrorRejection)` handlers\n                                    PerformPromiseThen(pipeStep(), next, rejectLoop);\n                                }\n                            }\n                            next(false);\n                        });\n                    }\n                    function pipeStep() {\n                        if (shuttingDown) {\n                            return promiseResolvedWith(true);\n                        }\n                        return PerformPromiseThen(writer._readyPromise, ()=>{\n                            return newPromise((resolveRead, rejectRead)=>{\n                                ReadableStreamDefaultReaderRead(reader, {\n                                    _chunkSteps: (chunk)=>{\n                                        currentWrite = PerformPromiseThen(WritableStreamDefaultWriterWrite(writer, chunk), undefined, noop);\n                                        resolveRead(false);\n                                    },\n                                    _closeSteps: ()=>resolveRead(true),\n                                    _errorSteps: rejectRead\n                                });\n                            });\n                        });\n                    }\n                    // Errors must be propagated forward\n                    isOrBecomesErrored(source, reader._closedPromise, (storedError)=>{\n                        if (!preventAbort) {\n                            shutdownWithAction(()=>WritableStreamAbort(dest, storedError), true, storedError);\n                        } else {\n                            shutdown(true, storedError);\n                        }\n                    });\n                    // Errors must be propagated backward\n                    isOrBecomesErrored(dest, writer._closedPromise, (storedError)=>{\n                        if (!preventCancel) {\n                            shutdownWithAction(()=>ReadableStreamCancel(source, storedError), true, storedError);\n                        } else {\n                            shutdown(true, storedError);\n                        }\n                    });\n                    // Closing must be propagated forward\n                    isOrBecomesClosed(source, reader._closedPromise, ()=>{\n                        if (!preventClose) {\n                            shutdownWithAction(()=>WritableStreamDefaultWriterCloseWithErrorPropagation(writer));\n                        } else {\n                            shutdown();\n                        }\n                    });\n                    // Closing must be propagated backward\n                    if (WritableStreamCloseQueuedOrInFlight(dest) || dest._state === \"closed\") {\n                        const destClosed = new TypeError(\"the destination writable stream closed before all data could be piped to it\");\n                        if (!preventCancel) {\n                            shutdownWithAction(()=>ReadableStreamCancel(source, destClosed), true, destClosed);\n                        } else {\n                            shutdown(true, destClosed);\n                        }\n                    }\n                    setPromiseIsHandledToTrue(pipeLoop());\n                    function waitForWritesToFinish() {\n                        // Another write may have started while we were waiting on this currentWrite, so we have to be sure to wait\n                        // for that too.\n                        const oldCurrentWrite = currentWrite;\n                        return PerformPromiseThen(currentWrite, ()=>oldCurrentWrite !== currentWrite ? waitForWritesToFinish() : undefined);\n                    }\n                    function isOrBecomesErrored(stream, promise, action) {\n                        if (stream._state === \"errored\") {\n                            action(stream._storedError);\n                        } else {\n                            uponRejection(promise, action);\n                        }\n                    }\n                    function isOrBecomesClosed(stream, promise, action) {\n                        if (stream._state === \"closed\") {\n                            action();\n                        } else {\n                            uponFulfillment(promise, action);\n                        }\n                    }\n                    function shutdownWithAction(action, originalIsError, originalError) {\n                        if (shuttingDown) {\n                            return;\n                        }\n                        shuttingDown = true;\n                        if (dest._state === \"writable\" && !WritableStreamCloseQueuedOrInFlight(dest)) {\n                            uponFulfillment(waitForWritesToFinish(), doTheRest);\n                        } else {\n                            doTheRest();\n                        }\n                        function doTheRest() {\n                            uponPromise(action(), ()=>finalize(originalIsError, originalError), (newError)=>finalize(true, newError));\n                        }\n                    }\n                    function shutdown(isError, error) {\n                        if (shuttingDown) {\n                            return;\n                        }\n                        shuttingDown = true;\n                        if (dest._state === \"writable\" && !WritableStreamCloseQueuedOrInFlight(dest)) {\n                            uponFulfillment(waitForWritesToFinish(), ()=>finalize(isError, error));\n                        } else {\n                            finalize(isError, error);\n                        }\n                    }\n                    function finalize(isError, error) {\n                        WritableStreamDefaultWriterRelease(writer);\n                        ReadableStreamReaderGenericRelease(reader);\n                        if (signal !== undefined) {\n                            signal.removeEventListener(\"abort\", abortAlgorithm);\n                        }\n                        if (isError) {\n                            reject(error);\n                        } else {\n                            resolve(undefined);\n                        }\n                    }\n                });\n            }\n            /**\n\t\t     * Allows control of a {@link ReadableStream | readable stream}'s state and internal queue.\n\t\t     *\n\t\t     * @public\n\t\t     */ class ReadableStreamDefaultController {\n                constructor(){\n                    throw new TypeError(\"Illegal constructor\");\n                }\n                /**\n\t\t         * Returns the desired size to fill the controlled stream's internal queue. It can be negative, if the queue is\n\t\t         * over-full. An underlying source ought to use this information to determine when and how to apply backpressure.\n\t\t         */ get desiredSize() {\n                    if (!IsReadableStreamDefaultController(this)) {\n                        throw defaultControllerBrandCheckException$1(\"desiredSize\");\n                    }\n                    return ReadableStreamDefaultControllerGetDesiredSize(this);\n                }\n                /**\n\t\t         * Closes the controlled readable stream. Consumers will still be able to read any previously-enqueued chunks from\n\t\t         * the stream, but once those are read, the stream will become closed.\n\t\t         */ close() {\n                    if (!IsReadableStreamDefaultController(this)) {\n                        throw defaultControllerBrandCheckException$1(\"close\");\n                    }\n                    if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(this)) {\n                        throw new TypeError(\"The stream is not in a state that permits close\");\n                    }\n                    ReadableStreamDefaultControllerClose(this);\n                }\n                enqueue(chunk = undefined) {\n                    if (!IsReadableStreamDefaultController(this)) {\n                        throw defaultControllerBrandCheckException$1(\"enqueue\");\n                    }\n                    if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(this)) {\n                        throw new TypeError(\"The stream is not in a state that permits enqueue\");\n                    }\n                    return ReadableStreamDefaultControllerEnqueue(this, chunk);\n                }\n                /**\n\t\t         * Errors the controlled readable stream, making all future interactions with it fail with the given error `e`.\n\t\t         */ error(e = undefined) {\n                    if (!IsReadableStreamDefaultController(this)) {\n                        throw defaultControllerBrandCheckException$1(\"error\");\n                    }\n                    ReadableStreamDefaultControllerError(this, e);\n                }\n                /** @internal */ [CancelSteps](reason) {\n                    ResetQueue(this);\n                    const result = this._cancelAlgorithm(reason);\n                    ReadableStreamDefaultControllerClearAlgorithms(this);\n                    return result;\n                }\n                /** @internal */ [PullSteps](readRequest) {\n                    const stream = this._controlledReadableStream;\n                    if (this._queue.length > 0) {\n                        const chunk = DequeueValue(this);\n                        if (this._closeRequested && this._queue.length === 0) {\n                            ReadableStreamDefaultControllerClearAlgorithms(this);\n                            ReadableStreamClose(stream);\n                        } else {\n                            ReadableStreamDefaultControllerCallPullIfNeeded(this);\n                        }\n                        readRequest._chunkSteps(chunk);\n                    } else {\n                        ReadableStreamAddReadRequest(stream, readRequest);\n                        ReadableStreamDefaultControllerCallPullIfNeeded(this);\n                    }\n                }\n            }\n            Object.defineProperties(ReadableStreamDefaultController.prototype, {\n                close: {\n                    enumerable: true\n                },\n                enqueue: {\n                    enumerable: true\n                },\n                error: {\n                    enumerable: true\n                },\n                desiredSize: {\n                    enumerable: true\n                }\n            });\n            if (typeof SymbolPolyfill.toStringTag === \"symbol\") {\n                Object.defineProperty(ReadableStreamDefaultController.prototype, SymbolPolyfill.toStringTag, {\n                    value: \"ReadableStreamDefaultController\",\n                    configurable: true\n                });\n            }\n            // Abstract operations for the ReadableStreamDefaultController.\n            function IsReadableStreamDefaultController(x) {\n                if (!typeIsObject(x)) {\n                    return false;\n                }\n                if (!Object.prototype.hasOwnProperty.call(x, \"_controlledReadableStream\")) {\n                    return false;\n                }\n                return x instanceof ReadableStreamDefaultController;\n            }\n            function ReadableStreamDefaultControllerCallPullIfNeeded(controller) {\n                const shouldPull = ReadableStreamDefaultControllerShouldCallPull(controller);\n                if (!shouldPull) {\n                    return;\n                }\n                if (controller._pulling) {\n                    controller._pullAgain = true;\n                    return;\n                }\n                controller._pulling = true;\n                const pullPromise = controller._pullAlgorithm();\n                uponPromise(pullPromise, ()=>{\n                    controller._pulling = false;\n                    if (controller._pullAgain) {\n                        controller._pullAgain = false;\n                        ReadableStreamDefaultControllerCallPullIfNeeded(controller);\n                    }\n                }, (e)=>{\n                    ReadableStreamDefaultControllerError(controller, e);\n                });\n            }\n            function ReadableStreamDefaultControllerShouldCallPull(controller) {\n                const stream = controller._controlledReadableStream;\n                if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {\n                    return false;\n                }\n                if (!controller._started) {\n                    return false;\n                }\n                if (IsReadableStreamLocked(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {\n                    return true;\n                }\n                const desiredSize = ReadableStreamDefaultControllerGetDesiredSize(controller);\n                if (desiredSize > 0) {\n                    return true;\n                }\n                return false;\n            }\n            function ReadableStreamDefaultControllerClearAlgorithms(controller) {\n                controller._pullAlgorithm = undefined;\n                controller._cancelAlgorithm = undefined;\n                controller._strategySizeAlgorithm = undefined;\n            }\n            // A client of ReadableStreamDefaultController may use these functions directly to bypass state check.\n            function ReadableStreamDefaultControllerClose(controller) {\n                if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {\n                    return;\n                }\n                const stream = controller._controlledReadableStream;\n                controller._closeRequested = true;\n                if (controller._queue.length === 0) {\n                    ReadableStreamDefaultControllerClearAlgorithms(controller);\n                    ReadableStreamClose(stream);\n                }\n            }\n            function ReadableStreamDefaultControllerEnqueue(controller, chunk) {\n                if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {\n                    return;\n                }\n                const stream = controller._controlledReadableStream;\n                if (IsReadableStreamLocked(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {\n                    ReadableStreamFulfillReadRequest(stream, chunk, false);\n                } else {\n                    let chunkSize;\n                    try {\n                        chunkSize = controller._strategySizeAlgorithm(chunk);\n                    } catch (chunkSizeE) {\n                        ReadableStreamDefaultControllerError(controller, chunkSizeE);\n                        throw chunkSizeE;\n                    }\n                    try {\n                        EnqueueValueWithSize(controller, chunk, chunkSize);\n                    } catch (enqueueE) {\n                        ReadableStreamDefaultControllerError(controller, enqueueE);\n                        throw enqueueE;\n                    }\n                }\n                ReadableStreamDefaultControllerCallPullIfNeeded(controller);\n            }\n            function ReadableStreamDefaultControllerError(controller, e) {\n                const stream = controller._controlledReadableStream;\n                if (stream._state !== \"readable\") {\n                    return;\n                }\n                ResetQueue(controller);\n                ReadableStreamDefaultControllerClearAlgorithms(controller);\n                ReadableStreamError(stream, e);\n            }\n            function ReadableStreamDefaultControllerGetDesiredSize(controller) {\n                const state = controller._controlledReadableStream._state;\n                if (state === \"errored\") {\n                    return null;\n                }\n                if (state === \"closed\") {\n                    return 0;\n                }\n                return controller._strategyHWM - controller._queueTotalSize;\n            }\n            // This is used in the implementation of TransformStream.\n            function ReadableStreamDefaultControllerHasBackpressure(controller) {\n                if (ReadableStreamDefaultControllerShouldCallPull(controller)) {\n                    return false;\n                }\n                return true;\n            }\n            function ReadableStreamDefaultControllerCanCloseOrEnqueue(controller) {\n                const state = controller._controlledReadableStream._state;\n                if (!controller._closeRequested && state === \"readable\") {\n                    return true;\n                }\n                return false;\n            }\n            function SetUpReadableStreamDefaultController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm) {\n                controller._controlledReadableStream = stream;\n                controller._queue = undefined;\n                controller._queueTotalSize = undefined;\n                ResetQueue(controller);\n                controller._started = false;\n                controller._closeRequested = false;\n                controller._pullAgain = false;\n                controller._pulling = false;\n                controller._strategySizeAlgorithm = sizeAlgorithm;\n                controller._strategyHWM = highWaterMark;\n                controller._pullAlgorithm = pullAlgorithm;\n                controller._cancelAlgorithm = cancelAlgorithm;\n                stream._readableStreamController = controller;\n                const startResult = startAlgorithm();\n                uponPromise(promiseResolvedWith(startResult), ()=>{\n                    controller._started = true;\n                    ReadableStreamDefaultControllerCallPullIfNeeded(controller);\n                }, (r)=>{\n                    ReadableStreamDefaultControllerError(controller, r);\n                });\n            }\n            function SetUpReadableStreamDefaultControllerFromUnderlyingSource(stream, underlyingSource, highWaterMark, sizeAlgorithm) {\n                const controller = Object.create(ReadableStreamDefaultController.prototype);\n                let startAlgorithm = ()=>undefined;\n                let pullAlgorithm = ()=>promiseResolvedWith(undefined);\n                let cancelAlgorithm = ()=>promiseResolvedWith(undefined);\n                if (underlyingSource.start !== undefined) {\n                    startAlgorithm = ()=>underlyingSource.start(controller);\n                }\n                if (underlyingSource.pull !== undefined) {\n                    pullAlgorithm = ()=>underlyingSource.pull(controller);\n                }\n                if (underlyingSource.cancel !== undefined) {\n                    cancelAlgorithm = (reason)=>underlyingSource.cancel(reason);\n                }\n                SetUpReadableStreamDefaultController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm);\n            }\n            // Helper functions for the ReadableStreamDefaultController.\n            function defaultControllerBrandCheckException$1(name) {\n                return new TypeError(`ReadableStreamDefaultController.prototype.${name} can only be used on a ReadableStreamDefaultController`);\n            }\n            function ReadableStreamTee(stream, cloneForBranch2) {\n                if (IsReadableByteStreamController(stream._readableStreamController)) {\n                    return ReadableByteStreamTee(stream);\n                }\n                return ReadableStreamDefaultTee(stream);\n            }\n            function ReadableStreamDefaultTee(stream, cloneForBranch2) {\n                const reader = AcquireReadableStreamDefaultReader(stream);\n                let reading = false;\n                let readAgain = false;\n                let canceled1 = false;\n                let canceled2 = false;\n                let reason1;\n                let reason2;\n                let branch1;\n                let branch2;\n                let resolveCancelPromise;\n                const cancelPromise = newPromise((resolve)=>{\n                    resolveCancelPromise = resolve;\n                });\n                function pullAlgorithm() {\n                    if (reading) {\n                        readAgain = true;\n                        return promiseResolvedWith(undefined);\n                    }\n                    reading = true;\n                    const readRequest = {\n                        _chunkSteps: (chunk)=>{\n                            // This needs to be delayed a microtask because it takes at least a microtask to detect errors (using\n                            // reader._closedPromise below), and we want errors in stream to error both branches immediately. We cannot let\n                            // successful synchronously-available reads get ahead of asynchronously-available errors.\n                            queueMicrotask(()=>{\n                                readAgain = false;\n                                const chunk1 = chunk;\n                                const chunk2 = chunk;\n                                // There is no way to access the cloning code right now in the reference implementation.\n                                // If we add one then we'll need an implementation for serializable objects.\n                                // if (!canceled2 && cloneForBranch2) {\n                                //   chunk2 = StructuredDeserialize(StructuredSerialize(chunk2));\n                                // }\n                                if (!canceled1) {\n                                    ReadableStreamDefaultControllerEnqueue(branch1._readableStreamController, chunk1);\n                                }\n                                if (!canceled2) {\n                                    ReadableStreamDefaultControllerEnqueue(branch2._readableStreamController, chunk2);\n                                }\n                                reading = false;\n                                if (readAgain) {\n                                    pullAlgorithm();\n                                }\n                            });\n                        },\n                        _closeSteps: ()=>{\n                            reading = false;\n                            if (!canceled1) {\n                                ReadableStreamDefaultControllerClose(branch1._readableStreamController);\n                            }\n                            if (!canceled2) {\n                                ReadableStreamDefaultControllerClose(branch2._readableStreamController);\n                            }\n                            if (!canceled1 || !canceled2) {\n                                resolveCancelPromise(undefined);\n                            }\n                        },\n                        _errorSteps: ()=>{\n                            reading = false;\n                        }\n                    };\n                    ReadableStreamDefaultReaderRead(reader, readRequest);\n                    return promiseResolvedWith(undefined);\n                }\n                function cancel1Algorithm(reason) {\n                    canceled1 = true;\n                    reason1 = reason;\n                    if (canceled2) {\n                        const compositeReason = CreateArrayFromList([\n                            reason1,\n                            reason2\n                        ]);\n                        const cancelResult = ReadableStreamCancel(stream, compositeReason);\n                        resolveCancelPromise(cancelResult);\n                    }\n                    return cancelPromise;\n                }\n                function cancel2Algorithm(reason) {\n                    canceled2 = true;\n                    reason2 = reason;\n                    if (canceled1) {\n                        const compositeReason = CreateArrayFromList([\n                            reason1,\n                            reason2\n                        ]);\n                        const cancelResult = ReadableStreamCancel(stream, compositeReason);\n                        resolveCancelPromise(cancelResult);\n                    }\n                    return cancelPromise;\n                }\n                function startAlgorithm() {\n                // do nothing\n                }\n                branch1 = CreateReadableStream(startAlgorithm, pullAlgorithm, cancel1Algorithm);\n                branch2 = CreateReadableStream(startAlgorithm, pullAlgorithm, cancel2Algorithm);\n                uponRejection(reader._closedPromise, (r)=>{\n                    ReadableStreamDefaultControllerError(branch1._readableStreamController, r);\n                    ReadableStreamDefaultControllerError(branch2._readableStreamController, r);\n                    if (!canceled1 || !canceled2) {\n                        resolveCancelPromise(undefined);\n                    }\n                });\n                return [\n                    branch1,\n                    branch2\n                ];\n            }\n            function ReadableByteStreamTee(stream) {\n                let reader = AcquireReadableStreamDefaultReader(stream);\n                let reading = false;\n                let readAgainForBranch1 = false;\n                let readAgainForBranch2 = false;\n                let canceled1 = false;\n                let canceled2 = false;\n                let reason1;\n                let reason2;\n                let branch1;\n                let branch2;\n                let resolveCancelPromise;\n                const cancelPromise = newPromise((resolve)=>{\n                    resolveCancelPromise = resolve;\n                });\n                function forwardReaderError(thisReader) {\n                    uponRejection(thisReader._closedPromise, (r)=>{\n                        if (thisReader !== reader) {\n                            return;\n                        }\n                        ReadableByteStreamControllerError(branch1._readableStreamController, r);\n                        ReadableByteStreamControllerError(branch2._readableStreamController, r);\n                        if (!canceled1 || !canceled2) {\n                            resolveCancelPromise(undefined);\n                        }\n                    });\n                }\n                function pullWithDefaultReader() {\n                    if (IsReadableStreamBYOBReader(reader)) {\n                        ReadableStreamReaderGenericRelease(reader);\n                        reader = AcquireReadableStreamDefaultReader(stream);\n                        forwardReaderError(reader);\n                    }\n                    const readRequest = {\n                        _chunkSteps: (chunk)=>{\n                            // This needs to be delayed a microtask because it takes at least a microtask to detect errors (using\n                            // reader._closedPromise below), and we want errors in stream to error both branches immediately. We cannot let\n                            // successful synchronously-available reads get ahead of asynchronously-available errors.\n                            queueMicrotask(()=>{\n                                readAgainForBranch1 = false;\n                                readAgainForBranch2 = false;\n                                const chunk1 = chunk;\n                                let chunk2 = chunk;\n                                if (!canceled1 && !canceled2) {\n                                    try {\n                                        chunk2 = CloneAsUint8Array(chunk);\n                                    } catch (cloneE) {\n                                        ReadableByteStreamControllerError(branch1._readableStreamController, cloneE);\n                                        ReadableByteStreamControllerError(branch2._readableStreamController, cloneE);\n                                        resolveCancelPromise(ReadableStreamCancel(stream, cloneE));\n                                        return;\n                                    }\n                                }\n                                if (!canceled1) {\n                                    ReadableByteStreamControllerEnqueue(branch1._readableStreamController, chunk1);\n                                }\n                                if (!canceled2) {\n                                    ReadableByteStreamControllerEnqueue(branch2._readableStreamController, chunk2);\n                                }\n                                reading = false;\n                                if (readAgainForBranch1) {\n                                    pull1Algorithm();\n                                } else if (readAgainForBranch2) {\n                                    pull2Algorithm();\n                                }\n                            });\n                        },\n                        _closeSteps: ()=>{\n                            reading = false;\n                            if (!canceled1) {\n                                ReadableByteStreamControllerClose(branch1._readableStreamController);\n                            }\n                            if (!canceled2) {\n                                ReadableByteStreamControllerClose(branch2._readableStreamController);\n                            }\n                            if (branch1._readableStreamController._pendingPullIntos.length > 0) {\n                                ReadableByteStreamControllerRespond(branch1._readableStreamController, 0);\n                            }\n                            if (branch2._readableStreamController._pendingPullIntos.length > 0) {\n                                ReadableByteStreamControllerRespond(branch2._readableStreamController, 0);\n                            }\n                            if (!canceled1 || !canceled2) {\n                                resolveCancelPromise(undefined);\n                            }\n                        },\n                        _errorSteps: ()=>{\n                            reading = false;\n                        }\n                    };\n                    ReadableStreamDefaultReaderRead(reader, readRequest);\n                }\n                function pullWithBYOBReader(view, forBranch2) {\n                    if (IsReadableStreamDefaultReader(reader)) {\n                        ReadableStreamReaderGenericRelease(reader);\n                        reader = AcquireReadableStreamBYOBReader(stream);\n                        forwardReaderError(reader);\n                    }\n                    const byobBranch = forBranch2 ? branch2 : branch1;\n                    const otherBranch = forBranch2 ? branch1 : branch2;\n                    const readIntoRequest = {\n                        _chunkSteps: (chunk)=>{\n                            // This needs to be delayed a microtask because it takes at least a microtask to detect errors (using\n                            // reader._closedPromise below), and we want errors in stream to error both branches immediately. We cannot let\n                            // successful synchronously-available reads get ahead of asynchronously-available errors.\n                            queueMicrotask(()=>{\n                                readAgainForBranch1 = false;\n                                readAgainForBranch2 = false;\n                                const byobCanceled = forBranch2 ? canceled2 : canceled1;\n                                const otherCanceled = forBranch2 ? canceled1 : canceled2;\n                                if (!otherCanceled) {\n                                    let clonedChunk;\n                                    try {\n                                        clonedChunk = CloneAsUint8Array(chunk);\n                                    } catch (cloneE) {\n                                        ReadableByteStreamControllerError(byobBranch._readableStreamController, cloneE);\n                                        ReadableByteStreamControllerError(otherBranch._readableStreamController, cloneE);\n                                        resolveCancelPromise(ReadableStreamCancel(stream, cloneE));\n                                        return;\n                                    }\n                                    if (!byobCanceled) {\n                                        ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);\n                                    }\n                                    ReadableByteStreamControllerEnqueue(otherBranch._readableStreamController, clonedChunk);\n                                } else if (!byobCanceled) {\n                                    ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);\n                                }\n                                reading = false;\n                                if (readAgainForBranch1) {\n                                    pull1Algorithm();\n                                } else if (readAgainForBranch2) {\n                                    pull2Algorithm();\n                                }\n                            });\n                        },\n                        _closeSteps: (chunk)=>{\n                            reading = false;\n                            const byobCanceled = forBranch2 ? canceled2 : canceled1;\n                            const otherCanceled = forBranch2 ? canceled1 : canceled2;\n                            if (!byobCanceled) {\n                                ReadableByteStreamControllerClose(byobBranch._readableStreamController);\n                            }\n                            if (!otherCanceled) {\n                                ReadableByteStreamControllerClose(otherBranch._readableStreamController);\n                            }\n                            if (chunk !== undefined) {\n                                if (!byobCanceled) {\n                                    ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);\n                                }\n                                if (!otherCanceled && otherBranch._readableStreamController._pendingPullIntos.length > 0) {\n                                    ReadableByteStreamControllerRespond(otherBranch._readableStreamController, 0);\n                                }\n                            }\n                            if (!byobCanceled || !otherCanceled) {\n                                resolveCancelPromise(undefined);\n                            }\n                        },\n                        _errorSteps: ()=>{\n                            reading = false;\n                        }\n                    };\n                    ReadableStreamBYOBReaderRead(reader, view, readIntoRequest);\n                }\n                function pull1Algorithm() {\n                    if (reading) {\n                        readAgainForBranch1 = true;\n                        return promiseResolvedWith(undefined);\n                    }\n                    reading = true;\n                    const byobRequest = ReadableByteStreamControllerGetBYOBRequest(branch1._readableStreamController);\n                    if (byobRequest === null) {\n                        pullWithDefaultReader();\n                    } else {\n                        pullWithBYOBReader(byobRequest._view, false);\n                    }\n                    return promiseResolvedWith(undefined);\n                }\n                function pull2Algorithm() {\n                    if (reading) {\n                        readAgainForBranch2 = true;\n                        return promiseResolvedWith(undefined);\n                    }\n                    reading = true;\n                    const byobRequest = ReadableByteStreamControllerGetBYOBRequest(branch2._readableStreamController);\n                    if (byobRequest === null) {\n                        pullWithDefaultReader();\n                    } else {\n                        pullWithBYOBReader(byobRequest._view, true);\n                    }\n                    return promiseResolvedWith(undefined);\n                }\n                function cancel1Algorithm(reason) {\n                    canceled1 = true;\n                    reason1 = reason;\n                    if (canceled2) {\n                        const compositeReason = CreateArrayFromList([\n                            reason1,\n                            reason2\n                        ]);\n                        const cancelResult = ReadableStreamCancel(stream, compositeReason);\n                        resolveCancelPromise(cancelResult);\n                    }\n                    return cancelPromise;\n                }\n                function cancel2Algorithm(reason) {\n                    canceled2 = true;\n                    reason2 = reason;\n                    if (canceled1) {\n                        const compositeReason = CreateArrayFromList([\n                            reason1,\n                            reason2\n                        ]);\n                        const cancelResult = ReadableStreamCancel(stream, compositeReason);\n                        resolveCancelPromise(cancelResult);\n                    }\n                    return cancelPromise;\n                }\n                function startAlgorithm() {\n                    return;\n                }\n                branch1 = CreateReadableByteStream(startAlgorithm, pull1Algorithm, cancel1Algorithm);\n                branch2 = CreateReadableByteStream(startAlgorithm, pull2Algorithm, cancel2Algorithm);\n                forwardReaderError(reader);\n                return [\n                    branch1,\n                    branch2\n                ];\n            }\n            function convertUnderlyingDefaultOrByteSource(source, context) {\n                assertDictionary(source, context);\n                const original = source;\n                const autoAllocateChunkSize = original === null || original === void 0 ? void 0 : original.autoAllocateChunkSize;\n                const cancel = original === null || original === void 0 ? void 0 : original.cancel;\n                const pull = original === null || original === void 0 ? void 0 : original.pull;\n                const start = original === null || original === void 0 ? void 0 : original.start;\n                const type = original === null || original === void 0 ? void 0 : original.type;\n                return {\n                    autoAllocateChunkSize: autoAllocateChunkSize === undefined ? undefined : convertUnsignedLongLongWithEnforceRange(autoAllocateChunkSize, `${context} has member 'autoAllocateChunkSize' that`),\n                    cancel: cancel === undefined ? undefined : convertUnderlyingSourceCancelCallback(cancel, original, `${context} has member 'cancel' that`),\n                    pull: pull === undefined ? undefined : convertUnderlyingSourcePullCallback(pull, original, `${context} has member 'pull' that`),\n                    start: start === undefined ? undefined : convertUnderlyingSourceStartCallback(start, original, `${context} has member 'start' that`),\n                    type: type === undefined ? undefined : convertReadableStreamType(type, `${context} has member 'type' that`)\n                };\n            }\n            function convertUnderlyingSourceCancelCallback(fn, original, context) {\n                assertFunction(fn, context);\n                return (reason)=>promiseCall(fn, original, [\n                        reason\n                    ]);\n            }\n            function convertUnderlyingSourcePullCallback(fn, original, context) {\n                assertFunction(fn, context);\n                return (controller)=>promiseCall(fn, original, [\n                        controller\n                    ]);\n            }\n            function convertUnderlyingSourceStartCallback(fn, original, context) {\n                assertFunction(fn, context);\n                return (controller)=>reflectCall(fn, original, [\n                        controller\n                    ]);\n            }\n            function convertReadableStreamType(type, context) {\n                type = `${type}`;\n                if (type !== \"bytes\") {\n                    throw new TypeError(`${context} '${type}' is not a valid enumeration value for ReadableStreamType`);\n                }\n                return type;\n            }\n            function convertReaderOptions(options, context) {\n                assertDictionary(options, context);\n                const mode = options === null || options === void 0 ? void 0 : options.mode;\n                return {\n                    mode: mode === undefined ? undefined : convertReadableStreamReaderMode(mode, `${context} has member 'mode' that`)\n                };\n            }\n            function convertReadableStreamReaderMode(mode, context) {\n                mode = `${mode}`;\n                if (mode !== \"byob\") {\n                    throw new TypeError(`${context} '${mode}' is not a valid enumeration value for ReadableStreamReaderMode`);\n                }\n                return mode;\n            }\n            function convertIteratorOptions(options, context) {\n                assertDictionary(options, context);\n                const preventCancel = options === null || options === void 0 ? void 0 : options.preventCancel;\n                return {\n                    preventCancel: Boolean(preventCancel)\n                };\n            }\n            function convertPipeOptions(options, context) {\n                assertDictionary(options, context);\n                const preventAbort = options === null || options === void 0 ? void 0 : options.preventAbort;\n                const preventCancel = options === null || options === void 0 ? void 0 : options.preventCancel;\n                const preventClose = options === null || options === void 0 ? void 0 : options.preventClose;\n                const signal = options === null || options === void 0 ? void 0 : options.signal;\n                if (signal !== undefined) {\n                    assertAbortSignal(signal, `${context} has member 'signal' that`);\n                }\n                return {\n                    preventAbort: Boolean(preventAbort),\n                    preventCancel: Boolean(preventCancel),\n                    preventClose: Boolean(preventClose),\n                    signal\n                };\n            }\n            function assertAbortSignal(signal, context) {\n                if (!isAbortSignal(signal)) {\n                    throw new TypeError(`${context} is not an AbortSignal.`);\n                }\n            }\n            function convertReadableWritablePair(pair, context) {\n                assertDictionary(pair, context);\n                const readable = pair === null || pair === void 0 ? void 0 : pair.readable;\n                assertRequiredField(readable, \"readable\", \"ReadableWritablePair\");\n                assertReadableStream(readable, `${context} has member 'readable' that`);\n                const writable = pair === null || pair === void 0 ? void 0 : pair.writable;\n                assertRequiredField(writable, \"writable\", \"ReadableWritablePair\");\n                assertWritableStream(writable, `${context} has member 'writable' that`);\n                return {\n                    readable,\n                    writable\n                };\n            }\n            /**\n\t\t     * A readable stream represents a source of data, from which you can read.\n\t\t     *\n\t\t     * @public\n\t\t     */ class ReadableStream1 {\n                constructor(rawUnderlyingSource = {}, rawStrategy = {}){\n                    if (rawUnderlyingSource === undefined) {\n                        rawUnderlyingSource = null;\n                    } else {\n                        assertObject(rawUnderlyingSource, \"First parameter\");\n                    }\n                    const strategy = convertQueuingStrategy(rawStrategy, \"Second parameter\");\n                    const underlyingSource = convertUnderlyingDefaultOrByteSource(rawUnderlyingSource, \"First parameter\");\n                    InitializeReadableStream(this);\n                    if (underlyingSource.type === \"bytes\") {\n                        if (strategy.size !== undefined) {\n                            throw new RangeError(\"The strategy for a byte stream cannot have a size function\");\n                        }\n                        const highWaterMark = ExtractHighWaterMark(strategy, 0);\n                        SetUpReadableByteStreamControllerFromUnderlyingSource(this, underlyingSource, highWaterMark);\n                    } else {\n                        const sizeAlgorithm = ExtractSizeAlgorithm(strategy);\n                        const highWaterMark = ExtractHighWaterMark(strategy, 1);\n                        SetUpReadableStreamDefaultControllerFromUnderlyingSource(this, underlyingSource, highWaterMark, sizeAlgorithm);\n                    }\n                }\n                /**\n\t\t         * Whether or not the readable stream is locked to a {@link ReadableStreamDefaultReader | reader}.\n\t\t         */ get locked() {\n                    if (!IsReadableStream(this)) {\n                        throw streamBrandCheckException$1(\"locked\");\n                    }\n                    return IsReadableStreamLocked(this);\n                }\n                /**\n\t\t         * Cancels the stream, signaling a loss of interest in the stream by a consumer.\n\t\t         *\n\t\t         * The supplied `reason` argument will be given to the underlying source's {@link UnderlyingSource.cancel | cancel()}\n\t\t         * method, which might or might not use it.\n\t\t         */ cancel(reason = undefined) {\n                    if (!IsReadableStream(this)) {\n                        return promiseRejectedWith(streamBrandCheckException$1(\"cancel\"));\n                    }\n                    if (IsReadableStreamLocked(this)) {\n                        return promiseRejectedWith(new TypeError(\"Cannot cancel a stream that already has a reader\"));\n                    }\n                    return ReadableStreamCancel(this, reason);\n                }\n                getReader(rawOptions = undefined) {\n                    if (!IsReadableStream(this)) {\n                        throw streamBrandCheckException$1(\"getReader\");\n                    }\n                    const options = convertReaderOptions(rawOptions, \"First parameter\");\n                    if (options.mode === undefined) {\n                        return AcquireReadableStreamDefaultReader(this);\n                    }\n                    return AcquireReadableStreamBYOBReader(this);\n                }\n                pipeThrough(rawTransform, rawOptions = {}) {\n                    if (!IsReadableStream(this)) {\n                        throw streamBrandCheckException$1(\"pipeThrough\");\n                    }\n                    assertRequiredArgument(rawTransform, 1, \"pipeThrough\");\n                    const transform = convertReadableWritablePair(rawTransform, \"First parameter\");\n                    const options = convertPipeOptions(rawOptions, \"Second parameter\");\n                    if (IsReadableStreamLocked(this)) {\n                        throw new TypeError(\"ReadableStream.prototype.pipeThrough cannot be used on a locked ReadableStream\");\n                    }\n                    if (IsWritableStreamLocked(transform.writable)) {\n                        throw new TypeError(\"ReadableStream.prototype.pipeThrough cannot be used on a locked WritableStream\");\n                    }\n                    const promise = ReadableStreamPipeTo(this, transform.writable, options.preventClose, options.preventAbort, options.preventCancel, options.signal);\n                    setPromiseIsHandledToTrue(promise);\n                    return transform.readable;\n                }\n                pipeTo(destination, rawOptions = {}) {\n                    if (!IsReadableStream(this)) {\n                        return promiseRejectedWith(streamBrandCheckException$1(\"pipeTo\"));\n                    }\n                    if (destination === undefined) {\n                        return promiseRejectedWith(`Parameter 1 is required in 'pipeTo'.`);\n                    }\n                    if (!IsWritableStream(destination)) {\n                        return promiseRejectedWith(new TypeError(`ReadableStream.prototype.pipeTo's first argument must be a WritableStream`));\n                    }\n                    let options;\n                    try {\n                        options = convertPipeOptions(rawOptions, \"Second parameter\");\n                    } catch (e) {\n                        return promiseRejectedWith(e);\n                    }\n                    if (IsReadableStreamLocked(this)) {\n                        return promiseRejectedWith(new TypeError(\"ReadableStream.prototype.pipeTo cannot be used on a locked ReadableStream\"));\n                    }\n                    if (IsWritableStreamLocked(destination)) {\n                        return promiseRejectedWith(new TypeError(\"ReadableStream.prototype.pipeTo cannot be used on a locked WritableStream\"));\n                    }\n                    return ReadableStreamPipeTo(this, destination, options.preventClose, options.preventAbort, options.preventCancel, options.signal);\n                }\n                /**\n\t\t         * Tees this readable stream, returning a two-element array containing the two resulting branches as\n\t\t         * new {@link ReadableStream} instances.\n\t\t         *\n\t\t         * Teeing a stream will lock it, preventing any other consumer from acquiring a reader.\n\t\t         * To cancel the stream, cancel both of the resulting branches; a composite cancellation reason will then be\n\t\t         * propagated to the stream's underlying source.\n\t\t         *\n\t\t         * Note that the chunks seen in each branch will be the same object. If the chunks are not immutable,\n\t\t         * this could allow interference between the two branches.\n\t\t         */ tee() {\n                    if (!IsReadableStream(this)) {\n                        throw streamBrandCheckException$1(\"tee\");\n                    }\n                    const branches = ReadableStreamTee(this);\n                    return CreateArrayFromList(branches);\n                }\n                values(rawOptions = undefined) {\n                    if (!IsReadableStream(this)) {\n                        throw streamBrandCheckException$1(\"values\");\n                    }\n                    const options = convertIteratorOptions(rawOptions, \"First parameter\");\n                    return AcquireReadableStreamAsyncIterator(this, options.preventCancel);\n                }\n            }\n            Object.defineProperties(ReadableStream1.prototype, {\n                cancel: {\n                    enumerable: true\n                },\n                getReader: {\n                    enumerable: true\n                },\n                pipeThrough: {\n                    enumerable: true\n                },\n                pipeTo: {\n                    enumerable: true\n                },\n                tee: {\n                    enumerable: true\n                },\n                values: {\n                    enumerable: true\n                },\n                locked: {\n                    enumerable: true\n                }\n            });\n            if (typeof SymbolPolyfill.toStringTag === \"symbol\") {\n                Object.defineProperty(ReadableStream1.prototype, SymbolPolyfill.toStringTag, {\n                    value: \"ReadableStream\",\n                    configurable: true\n                });\n            }\n            if (typeof SymbolPolyfill.asyncIterator === \"symbol\") {\n                Object.defineProperty(ReadableStream1.prototype, SymbolPolyfill.asyncIterator, {\n                    value: ReadableStream1.prototype.values,\n                    writable: true,\n                    configurable: true\n                });\n            }\n            // Abstract operations for the ReadableStream.\n            // Throws if and only if startAlgorithm throws.\n            function CreateReadableStream(startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark = 1, sizeAlgorithm = ()=>1) {\n                const stream = Object.create(ReadableStream1.prototype);\n                InitializeReadableStream(stream);\n                const controller = Object.create(ReadableStreamDefaultController.prototype);\n                SetUpReadableStreamDefaultController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm);\n                return stream;\n            }\n            // Throws if and only if startAlgorithm throws.\n            function CreateReadableByteStream(startAlgorithm, pullAlgorithm, cancelAlgorithm) {\n                const stream = Object.create(ReadableStream1.prototype);\n                InitializeReadableStream(stream);\n                const controller = Object.create(ReadableByteStreamController.prototype);\n                SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, 0, undefined);\n                return stream;\n            }\n            function InitializeReadableStream(stream) {\n                stream._state = \"readable\";\n                stream._reader = undefined;\n                stream._storedError = undefined;\n                stream._disturbed = false;\n            }\n            function IsReadableStream(x) {\n                if (!typeIsObject(x)) {\n                    return false;\n                }\n                if (!Object.prototype.hasOwnProperty.call(x, \"_readableStreamController\")) {\n                    return false;\n                }\n                return x instanceof ReadableStream1;\n            }\n            function IsReadableStreamLocked(stream) {\n                if (stream._reader === undefined) {\n                    return false;\n                }\n                return true;\n            }\n            // ReadableStream API exposed for controllers.\n            function ReadableStreamCancel(stream, reason) {\n                stream._disturbed = true;\n                if (stream._state === \"closed\") {\n                    return promiseResolvedWith(undefined);\n                }\n                if (stream._state === \"errored\") {\n                    return promiseRejectedWith(stream._storedError);\n                }\n                ReadableStreamClose(stream);\n                const reader = stream._reader;\n                if (reader !== undefined && IsReadableStreamBYOBReader(reader)) {\n                    reader._readIntoRequests.forEach((readIntoRequest)=>{\n                        readIntoRequest._closeSteps(undefined);\n                    });\n                    reader._readIntoRequests = new SimpleQueue();\n                }\n                const sourceCancelPromise = stream._readableStreamController[CancelSteps](reason);\n                return transformPromiseWith(sourceCancelPromise, noop);\n            }\n            function ReadableStreamClose(stream) {\n                stream._state = \"closed\";\n                const reader = stream._reader;\n                if (reader === undefined) {\n                    return;\n                }\n                defaultReaderClosedPromiseResolve(reader);\n                if (IsReadableStreamDefaultReader(reader)) {\n                    reader._readRequests.forEach((readRequest)=>{\n                        readRequest._closeSteps();\n                    });\n                    reader._readRequests = new SimpleQueue();\n                }\n            }\n            function ReadableStreamError(stream, e) {\n                stream._state = \"errored\";\n                stream._storedError = e;\n                const reader = stream._reader;\n                if (reader === undefined) {\n                    return;\n                }\n                defaultReaderClosedPromiseReject(reader, e);\n                if (IsReadableStreamDefaultReader(reader)) {\n                    reader._readRequests.forEach((readRequest)=>{\n                        readRequest._errorSteps(e);\n                    });\n                    reader._readRequests = new SimpleQueue();\n                } else {\n                    reader._readIntoRequests.forEach((readIntoRequest)=>{\n                        readIntoRequest._errorSteps(e);\n                    });\n                    reader._readIntoRequests = new SimpleQueue();\n                }\n            }\n            // Helper functions for the ReadableStream.\n            function streamBrandCheckException$1(name) {\n                return new TypeError(`ReadableStream.prototype.${name} can only be used on a ReadableStream`);\n            }\n            function convertQueuingStrategyInit(init, context) {\n                assertDictionary(init, context);\n                const highWaterMark = init === null || init === void 0 ? void 0 : init.highWaterMark;\n                assertRequiredField(highWaterMark, \"highWaterMark\", \"QueuingStrategyInit\");\n                return {\n                    highWaterMark: convertUnrestrictedDouble(highWaterMark)\n                };\n            }\n            // The size function must not have a prototype property nor be a constructor\n            const byteLengthSizeFunction = (chunk)=>{\n                return chunk.byteLength;\n            };\n            try {\n                Object.defineProperty(byteLengthSizeFunction, \"name\", {\n                    value: \"size\",\n                    configurable: true\n                });\n            } catch (_a) {\n            // This property is non-configurable in older browsers, so ignore if this throws.\n            // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name#browser_compatibility\n            }\n            /**\n\t\t     * A queuing strategy that counts the number of bytes in each chunk.\n\t\t     *\n\t\t     * @public\n\t\t     */ class ByteLengthQueuingStrategy {\n                constructor(options){\n                    assertRequiredArgument(options, 1, \"ByteLengthQueuingStrategy\");\n                    options = convertQueuingStrategyInit(options, \"First parameter\");\n                    this._byteLengthQueuingStrategyHighWaterMark = options.highWaterMark;\n                }\n                /**\n\t\t         * Returns the high water mark provided to the constructor.\n\t\t         */ get highWaterMark() {\n                    if (!IsByteLengthQueuingStrategy(this)) {\n                        throw byteLengthBrandCheckException(\"highWaterMark\");\n                    }\n                    return this._byteLengthQueuingStrategyHighWaterMark;\n                }\n                /**\n\t\t         * Measures the size of `chunk` by returning the value of its `byteLength` property.\n\t\t         */ get size() {\n                    if (!IsByteLengthQueuingStrategy(this)) {\n                        throw byteLengthBrandCheckException(\"size\");\n                    }\n                    return byteLengthSizeFunction;\n                }\n            }\n            Object.defineProperties(ByteLengthQueuingStrategy.prototype, {\n                highWaterMark: {\n                    enumerable: true\n                },\n                size: {\n                    enumerable: true\n                }\n            });\n            if (typeof SymbolPolyfill.toStringTag === \"symbol\") {\n                Object.defineProperty(ByteLengthQueuingStrategy.prototype, SymbolPolyfill.toStringTag, {\n                    value: \"ByteLengthQueuingStrategy\",\n                    configurable: true\n                });\n            }\n            // Helper functions for the ByteLengthQueuingStrategy.\n            function byteLengthBrandCheckException(name) {\n                return new TypeError(`ByteLengthQueuingStrategy.prototype.${name} can only be used on a ByteLengthQueuingStrategy`);\n            }\n            function IsByteLengthQueuingStrategy(x) {\n                if (!typeIsObject(x)) {\n                    return false;\n                }\n                if (!Object.prototype.hasOwnProperty.call(x, \"_byteLengthQueuingStrategyHighWaterMark\")) {\n                    return false;\n                }\n                return x instanceof ByteLengthQueuingStrategy;\n            }\n            // The size function must not have a prototype property nor be a constructor\n            const countSizeFunction = ()=>{\n                return 1;\n            };\n            try {\n                Object.defineProperty(countSizeFunction, \"name\", {\n                    value: \"size\",\n                    configurable: true\n                });\n            } catch (_a) {\n            // This property is non-configurable in older browsers, so ignore if this throws.\n            // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name#browser_compatibility\n            }\n            /**\n\t\t     * A queuing strategy that counts the number of chunks.\n\t\t     *\n\t\t     * @public\n\t\t     */ class CountQueuingStrategy {\n                constructor(options){\n                    assertRequiredArgument(options, 1, \"CountQueuingStrategy\");\n                    options = convertQueuingStrategyInit(options, \"First parameter\");\n                    this._countQueuingStrategyHighWaterMark = options.highWaterMark;\n                }\n                /**\n\t\t         * Returns the high water mark provided to the constructor.\n\t\t         */ get highWaterMark() {\n                    if (!IsCountQueuingStrategy(this)) {\n                        throw countBrandCheckException(\"highWaterMark\");\n                    }\n                    return this._countQueuingStrategyHighWaterMark;\n                }\n                /**\n\t\t         * Measures the size of `chunk` by always returning 1.\n\t\t         * This ensures that the total queue size is a count of the number of chunks in the queue.\n\t\t         */ get size() {\n                    if (!IsCountQueuingStrategy(this)) {\n                        throw countBrandCheckException(\"size\");\n                    }\n                    return countSizeFunction;\n                }\n            }\n            Object.defineProperties(CountQueuingStrategy.prototype, {\n                highWaterMark: {\n                    enumerable: true\n                },\n                size: {\n                    enumerable: true\n                }\n            });\n            if (typeof SymbolPolyfill.toStringTag === \"symbol\") {\n                Object.defineProperty(CountQueuingStrategy.prototype, SymbolPolyfill.toStringTag, {\n                    value: \"CountQueuingStrategy\",\n                    configurable: true\n                });\n            }\n            // Helper functions for the CountQueuingStrategy.\n            function countBrandCheckException(name) {\n                return new TypeError(`CountQueuingStrategy.prototype.${name} can only be used on a CountQueuingStrategy`);\n            }\n            function IsCountQueuingStrategy(x) {\n                if (!typeIsObject(x)) {\n                    return false;\n                }\n                if (!Object.prototype.hasOwnProperty.call(x, \"_countQueuingStrategyHighWaterMark\")) {\n                    return false;\n                }\n                return x instanceof CountQueuingStrategy;\n            }\n            function convertTransformer(original, context) {\n                assertDictionary(original, context);\n                const flush = original === null || original === void 0 ? void 0 : original.flush;\n                const readableType = original === null || original === void 0 ? void 0 : original.readableType;\n                const start = original === null || original === void 0 ? void 0 : original.start;\n                const transform = original === null || original === void 0 ? void 0 : original.transform;\n                const writableType = original === null || original === void 0 ? void 0 : original.writableType;\n                return {\n                    flush: flush === undefined ? undefined : convertTransformerFlushCallback(flush, original, `${context} has member 'flush' that`),\n                    readableType,\n                    start: start === undefined ? undefined : convertTransformerStartCallback(start, original, `${context} has member 'start' that`),\n                    transform: transform === undefined ? undefined : convertTransformerTransformCallback(transform, original, `${context} has member 'transform' that`),\n                    writableType\n                };\n            }\n            function convertTransformerFlushCallback(fn, original, context) {\n                assertFunction(fn, context);\n                return (controller)=>promiseCall(fn, original, [\n                        controller\n                    ]);\n            }\n            function convertTransformerStartCallback(fn, original, context) {\n                assertFunction(fn, context);\n                return (controller)=>reflectCall(fn, original, [\n                        controller\n                    ]);\n            }\n            function convertTransformerTransformCallback(fn, original, context) {\n                assertFunction(fn, context);\n                return (chunk, controller)=>promiseCall(fn, original, [\n                        chunk,\n                        controller\n                    ]);\n            }\n            // Class TransformStream\n            /**\n\t\t     * A transform stream consists of a pair of streams: a {@link WritableStream | writable stream},\n\t\t     * known as its writable side, and a {@link ReadableStream | readable stream}, known as its readable side.\n\t\t     * In a manner specific to the transform stream in question, writes to the writable side result in new data being\n\t\t     * made available for reading from the readable side.\n\t\t     *\n\t\t     * @public\n\t\t     */ class TransformStream {\n                constructor(rawTransformer = {}, rawWritableStrategy = {}, rawReadableStrategy = {}){\n                    if (rawTransformer === undefined) {\n                        rawTransformer = null;\n                    }\n                    const writableStrategy = convertQueuingStrategy(rawWritableStrategy, \"Second parameter\");\n                    const readableStrategy = convertQueuingStrategy(rawReadableStrategy, \"Third parameter\");\n                    const transformer = convertTransformer(rawTransformer, \"First parameter\");\n                    if (transformer.readableType !== undefined) {\n                        throw new RangeError(\"Invalid readableType specified\");\n                    }\n                    if (transformer.writableType !== undefined) {\n                        throw new RangeError(\"Invalid writableType specified\");\n                    }\n                    const readableHighWaterMark = ExtractHighWaterMark(readableStrategy, 0);\n                    const readableSizeAlgorithm = ExtractSizeAlgorithm(readableStrategy);\n                    const writableHighWaterMark = ExtractHighWaterMark(writableStrategy, 1);\n                    const writableSizeAlgorithm = ExtractSizeAlgorithm(writableStrategy);\n                    let startPromise_resolve;\n                    const startPromise = newPromise((resolve)=>{\n                        startPromise_resolve = resolve;\n                    });\n                    InitializeTransformStream(this, startPromise, writableHighWaterMark, writableSizeAlgorithm, readableHighWaterMark, readableSizeAlgorithm);\n                    SetUpTransformStreamDefaultControllerFromTransformer(this, transformer);\n                    if (transformer.start !== undefined) {\n                        startPromise_resolve(transformer.start(this._transformStreamController));\n                    } else {\n                        startPromise_resolve(undefined);\n                    }\n                }\n                /**\n\t\t         * The readable side of the transform stream.\n\t\t         */ get readable() {\n                    if (!IsTransformStream(this)) {\n                        throw streamBrandCheckException(\"readable\");\n                    }\n                    return this._readable;\n                }\n                /**\n\t\t         * The writable side of the transform stream.\n\t\t         */ get writable() {\n                    if (!IsTransformStream(this)) {\n                        throw streamBrandCheckException(\"writable\");\n                    }\n                    return this._writable;\n                }\n            }\n            Object.defineProperties(TransformStream.prototype, {\n                readable: {\n                    enumerable: true\n                },\n                writable: {\n                    enumerable: true\n                }\n            });\n            if (typeof SymbolPolyfill.toStringTag === \"symbol\") {\n                Object.defineProperty(TransformStream.prototype, SymbolPolyfill.toStringTag, {\n                    value: \"TransformStream\",\n                    configurable: true\n                });\n            }\n            function InitializeTransformStream(stream, startPromise, writableHighWaterMark, writableSizeAlgorithm, readableHighWaterMark, readableSizeAlgorithm) {\n                function startAlgorithm() {\n                    return startPromise;\n                }\n                function writeAlgorithm(chunk) {\n                    return TransformStreamDefaultSinkWriteAlgorithm(stream, chunk);\n                }\n                function abortAlgorithm(reason) {\n                    return TransformStreamDefaultSinkAbortAlgorithm(stream, reason);\n                }\n                function closeAlgorithm() {\n                    return TransformStreamDefaultSinkCloseAlgorithm(stream);\n                }\n                stream._writable = CreateWritableStream(startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, writableHighWaterMark, writableSizeAlgorithm);\n                function pullAlgorithm() {\n                    return TransformStreamDefaultSourcePullAlgorithm(stream);\n                }\n                function cancelAlgorithm(reason) {\n                    TransformStreamErrorWritableAndUnblockWrite(stream, reason);\n                    return promiseResolvedWith(undefined);\n                }\n                stream._readable = CreateReadableStream(startAlgorithm, pullAlgorithm, cancelAlgorithm, readableHighWaterMark, readableSizeAlgorithm);\n                // The [[backpressure]] slot is set to undefined so that it can be initialised by TransformStreamSetBackpressure.\n                stream._backpressure = undefined;\n                stream._backpressureChangePromise = undefined;\n                stream._backpressureChangePromise_resolve = undefined;\n                TransformStreamSetBackpressure(stream, true);\n                stream._transformStreamController = undefined;\n            }\n            function IsTransformStream(x) {\n                if (!typeIsObject(x)) {\n                    return false;\n                }\n                if (!Object.prototype.hasOwnProperty.call(x, \"_transformStreamController\")) {\n                    return false;\n                }\n                return x instanceof TransformStream;\n            }\n            // This is a no-op if both sides are already errored.\n            function TransformStreamError(stream, e) {\n                ReadableStreamDefaultControllerError(stream._readable._readableStreamController, e);\n                TransformStreamErrorWritableAndUnblockWrite(stream, e);\n            }\n            function TransformStreamErrorWritableAndUnblockWrite(stream, e) {\n                TransformStreamDefaultControllerClearAlgorithms(stream._transformStreamController);\n                WritableStreamDefaultControllerErrorIfNeeded(stream._writable._writableStreamController, e);\n                if (stream._backpressure) {\n                    // Pretend that pull() was called to permit any pending write() calls to complete. TransformStreamSetBackpressure()\n                    // cannot be called from enqueue() or pull() once the ReadableStream is errored, so this will will be the final time\n                    // _backpressure is set.\n                    TransformStreamSetBackpressure(stream, false);\n                }\n            }\n            function TransformStreamSetBackpressure(stream, backpressure) {\n                // Passes also when called during construction.\n                if (stream._backpressureChangePromise !== undefined) {\n                    stream._backpressureChangePromise_resolve();\n                }\n                stream._backpressureChangePromise = newPromise((resolve)=>{\n                    stream._backpressureChangePromise_resolve = resolve;\n                });\n                stream._backpressure = backpressure;\n            }\n            // Class TransformStreamDefaultController\n            /**\n\t\t     * Allows control of the {@link ReadableStream} and {@link WritableStream} of the associated {@link TransformStream}.\n\t\t     *\n\t\t     * @public\n\t\t     */ class TransformStreamDefaultController {\n                constructor(){\n                    throw new TypeError(\"Illegal constructor\");\n                }\n                /**\n\t\t         * Returns the desired size to fill the readable side’s internal queue. It can be negative, if the queue is over-full.\n\t\t         */ get desiredSize() {\n                    if (!IsTransformStreamDefaultController(this)) {\n                        throw defaultControllerBrandCheckException(\"desiredSize\");\n                    }\n                    const readableController = this._controlledTransformStream._readable._readableStreamController;\n                    return ReadableStreamDefaultControllerGetDesiredSize(readableController);\n                }\n                enqueue(chunk = undefined) {\n                    if (!IsTransformStreamDefaultController(this)) {\n                        throw defaultControllerBrandCheckException(\"enqueue\");\n                    }\n                    TransformStreamDefaultControllerEnqueue(this, chunk);\n                }\n                /**\n\t\t         * Errors both the readable side and the writable side of the controlled transform stream, making all future\n\t\t         * interactions with it fail with the given error `e`. Any chunks queued for transformation will be discarded.\n\t\t         */ error(reason = undefined) {\n                    if (!IsTransformStreamDefaultController(this)) {\n                        throw defaultControllerBrandCheckException(\"error\");\n                    }\n                    TransformStreamDefaultControllerError(this, reason);\n                }\n                /**\n\t\t         * Closes the readable side and errors the writable side of the controlled transform stream. This is useful when the\n\t\t         * transformer only needs to consume a portion of the chunks written to the writable side.\n\t\t         */ terminate() {\n                    if (!IsTransformStreamDefaultController(this)) {\n                        throw defaultControllerBrandCheckException(\"terminate\");\n                    }\n                    TransformStreamDefaultControllerTerminate(this);\n                }\n            }\n            Object.defineProperties(TransformStreamDefaultController.prototype, {\n                enqueue: {\n                    enumerable: true\n                },\n                error: {\n                    enumerable: true\n                },\n                terminate: {\n                    enumerable: true\n                },\n                desiredSize: {\n                    enumerable: true\n                }\n            });\n            if (typeof SymbolPolyfill.toStringTag === \"symbol\") {\n                Object.defineProperty(TransformStreamDefaultController.prototype, SymbolPolyfill.toStringTag, {\n                    value: \"TransformStreamDefaultController\",\n                    configurable: true\n                });\n            }\n            // Transform Stream Default Controller Abstract Operations\n            function IsTransformStreamDefaultController(x) {\n                if (!typeIsObject(x)) {\n                    return false;\n                }\n                if (!Object.prototype.hasOwnProperty.call(x, \"_controlledTransformStream\")) {\n                    return false;\n                }\n                return x instanceof TransformStreamDefaultController;\n            }\n            function SetUpTransformStreamDefaultController(stream, controller, transformAlgorithm, flushAlgorithm) {\n                controller._controlledTransformStream = stream;\n                stream._transformStreamController = controller;\n                controller._transformAlgorithm = transformAlgorithm;\n                controller._flushAlgorithm = flushAlgorithm;\n            }\n            function SetUpTransformStreamDefaultControllerFromTransformer(stream, transformer) {\n                const controller = Object.create(TransformStreamDefaultController.prototype);\n                let transformAlgorithm = (chunk)=>{\n                    try {\n                        TransformStreamDefaultControllerEnqueue(controller, chunk);\n                        return promiseResolvedWith(undefined);\n                    } catch (transformResultE) {\n                        return promiseRejectedWith(transformResultE);\n                    }\n                };\n                let flushAlgorithm = ()=>promiseResolvedWith(undefined);\n                if (transformer.transform !== undefined) {\n                    transformAlgorithm = (chunk)=>transformer.transform(chunk, controller);\n                }\n                if (transformer.flush !== undefined) {\n                    flushAlgorithm = ()=>transformer.flush(controller);\n                }\n                SetUpTransformStreamDefaultController(stream, controller, transformAlgorithm, flushAlgorithm);\n            }\n            function TransformStreamDefaultControllerClearAlgorithms(controller) {\n                controller._transformAlgorithm = undefined;\n                controller._flushAlgorithm = undefined;\n            }\n            function TransformStreamDefaultControllerEnqueue(controller, chunk) {\n                const stream = controller._controlledTransformStream;\n                const readableController = stream._readable._readableStreamController;\n                if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(readableController)) {\n                    throw new TypeError(\"Readable side is not in a state that permits enqueue\");\n                }\n                // We throttle transform invocations based on the backpressure of the ReadableStream, but we still\n                // accept TransformStreamDefaultControllerEnqueue() calls.\n                try {\n                    ReadableStreamDefaultControllerEnqueue(readableController, chunk);\n                } catch (e) {\n                    // This happens when readableStrategy.size() throws.\n                    TransformStreamErrorWritableAndUnblockWrite(stream, e);\n                    throw stream._readable._storedError;\n                }\n                const backpressure = ReadableStreamDefaultControllerHasBackpressure(readableController);\n                if (backpressure !== stream._backpressure) {\n                    TransformStreamSetBackpressure(stream, true);\n                }\n            }\n            function TransformStreamDefaultControllerError(controller, e) {\n                TransformStreamError(controller._controlledTransformStream, e);\n            }\n            function TransformStreamDefaultControllerPerformTransform(controller, chunk) {\n                const transformPromise = controller._transformAlgorithm(chunk);\n                return transformPromiseWith(transformPromise, undefined, (r)=>{\n                    TransformStreamError(controller._controlledTransformStream, r);\n                    throw r;\n                });\n            }\n            function TransformStreamDefaultControllerTerminate(controller) {\n                const stream = controller._controlledTransformStream;\n                const readableController = stream._readable._readableStreamController;\n                ReadableStreamDefaultControllerClose(readableController);\n                const error = new TypeError(\"TransformStream terminated\");\n                TransformStreamErrorWritableAndUnblockWrite(stream, error);\n            }\n            // TransformStreamDefaultSink Algorithms\n            function TransformStreamDefaultSinkWriteAlgorithm(stream, chunk) {\n                const controller = stream._transformStreamController;\n                if (stream._backpressure) {\n                    const backpressureChangePromise = stream._backpressureChangePromise;\n                    return transformPromiseWith(backpressureChangePromise, ()=>{\n                        const writable = stream._writable;\n                        const state = writable._state;\n                        if (state === \"erroring\") {\n                            throw writable._storedError;\n                        }\n                        return TransformStreamDefaultControllerPerformTransform(controller, chunk);\n                    });\n                }\n                return TransformStreamDefaultControllerPerformTransform(controller, chunk);\n            }\n            function TransformStreamDefaultSinkAbortAlgorithm(stream, reason) {\n                // abort() is not called synchronously, so it is possible for abort() to be called when the stream is already\n                // errored.\n                TransformStreamError(stream, reason);\n                return promiseResolvedWith(undefined);\n            }\n            function TransformStreamDefaultSinkCloseAlgorithm(stream) {\n                // stream._readable cannot change after construction, so caching it across a call to user code is safe.\n                const readable = stream._readable;\n                const controller = stream._transformStreamController;\n                const flushPromise = controller._flushAlgorithm();\n                TransformStreamDefaultControllerClearAlgorithms(controller);\n                // Return a promise that is fulfilled with undefined on success.\n                return transformPromiseWith(flushPromise, ()=>{\n                    if (readable._state === \"errored\") {\n                        throw readable._storedError;\n                    }\n                    ReadableStreamDefaultControllerClose(readable._readableStreamController);\n                }, (r)=>{\n                    TransformStreamError(stream, r);\n                    throw readable._storedError;\n                });\n            }\n            // TransformStreamDefaultSource Algorithms\n            function TransformStreamDefaultSourcePullAlgorithm(stream) {\n                // Invariant. Enforced by the promises returned by start() and pull().\n                TransformStreamSetBackpressure(stream, false);\n                // Prevent the next pull() call until there is backpressure.\n                return stream._backpressureChangePromise;\n            }\n            // Helper functions for the TransformStreamDefaultController.\n            function defaultControllerBrandCheckException(name) {\n                return new TypeError(`TransformStreamDefaultController.prototype.${name} can only be used on a TransformStreamDefaultController`);\n            }\n            // Helper functions for the TransformStream.\n            function streamBrandCheckException(name) {\n                return new TypeError(`TransformStream.prototype.${name} can only be used on a TransformStream`);\n            }\n            exports1.ByteLengthQueuingStrategy = ByteLengthQueuingStrategy;\n            exports1.CountQueuingStrategy = CountQueuingStrategy;\n            exports1.ReadableByteStreamController = ReadableByteStreamController;\n            exports1.ReadableStream = ReadableStream1;\n            exports1.ReadableStreamBYOBReader = ReadableStreamBYOBReader;\n            exports1.ReadableStreamBYOBRequest = ReadableStreamBYOBRequest;\n            exports1.ReadableStreamDefaultController = ReadableStreamDefaultController;\n            exports1.ReadableStreamDefaultReader = ReadableStreamDefaultReader;\n            exports1.TransformStream = TransformStream;\n            exports1.TransformStreamDefaultController = TransformStreamDefaultController;\n            exports1.WritableStream = WritableStream;\n            exports1.WritableStreamDefaultController = WritableStreamDefaultController;\n            exports1.WritableStreamDefaultWriter = WritableStreamDefaultWriter;\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n        });\n    })(ponyfill_es2018, ponyfill_es2018.exports);\n    return ponyfill_es2018.exports;\n}\n/* c8 ignore start */ // 64 KiB (same size chrome slice theirs blob into Uint8array's)\nconst POOL_SIZE$1 = 65536;\nif (!globalThis.ReadableStream) {\n    // `node:stream/web` got introduced in v16.5.0 as experimental\n    // and it's preferred over the polyfilled version. So we also\n    // suppress the warning that gets emitted by NodeJS for using it.\n    try {\n        const process1 = __webpack_require__(/*! node:process */ \"node:process\");\n        const { emitWarning } = process1;\n        try {\n            process1.emitWarning = ()=>{};\n            Object.assign(globalThis, __webpack_require__(/*! node:stream/web */ \"node:stream/web\"));\n            process1.emitWarning = emitWarning;\n        } catch (error) {\n            process1.emitWarning = emitWarning;\n            throw error;\n        }\n    } catch (error) {\n        // fallback to polyfill implementation\n        Object.assign(globalThis, requirePonyfill_es2018());\n    }\n}\ntry {\n    // Don't use node: prefix for this, require+node: is not supported until node v14.14\n    // Only `import()` can use prefix in 12.20 and later\n    const { Blob } = __webpack_require__(/*! buffer */ \"buffer\");\n    if (Blob && !Blob.prototype.stream) {\n        Blob.prototype.stream = function name(params) {\n            let position = 0;\n            const blob = this;\n            return new ReadableStream({\n                type: \"bytes\",\n                async pull (ctrl) {\n                    const chunk = blob.slice(position, Math.min(blob.size, position + POOL_SIZE$1));\n                    const buffer = await chunk.arrayBuffer();\n                    position += buffer.byteLength;\n                    ctrl.enqueue(new Uint8Array(buffer));\n                    if (position === blob.size) {\n                        ctrl.close();\n                    }\n                }\n            });\n        };\n    }\n} catch (error) {}\n/*! fetch-blob. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> */ // 64 KiB (same size chrome slice theirs blob into Uint8array's)\nconst POOL_SIZE = 65536;\n/** @param {(Blob | Uint8Array)[]} parts */ async function* toIterator(parts, clone = true) {\n    for (const part of parts){\n        if (\"stream\" in part) {\n            yield* /** @type {AsyncIterableIterator<Uint8Array>} */ part.stream();\n        } else if (ArrayBuffer.isView(part)) {\n            if (clone) {\n                let position = part.byteOffset;\n                const end = part.byteOffset + part.byteLength;\n                while(position !== end){\n                    const size = Math.min(end - position, POOL_SIZE);\n                    const chunk = part.buffer.slice(position, position + size);\n                    position += chunk.byteLength;\n                    yield new Uint8Array(chunk);\n                }\n            } else {\n                yield part;\n            }\n        /* c8 ignore next 10 */ } else {\n            // For blobs that have arrayBuffer but no stream method (nodes buffer.Blob)\n            let position = 0, b = /** @type {Blob} */ part;\n            while(position !== b.size){\n                const chunk = b.slice(position, Math.min(b.size, position + POOL_SIZE));\n                const buffer = await chunk.arrayBuffer();\n                position += buffer.byteLength;\n                yield new Uint8Array(buffer);\n            }\n        }\n    }\n}\nconst _Blob = class Blob {\n    /** @type {Array.<(Blob|Uint8Array)>} */ #parts;\n    #type;\n    #size;\n    #endings;\n    /**\n   * The Blob() constructor returns a new Blob object. The content\n   * of the blob consists of the concatenation of the values given\n   * in the parameter array.\n   *\n   * @param {*} blobParts\n   * @param {{ type?: string, endings?: string }} [options]\n   */ constructor(blobParts = [], options = {}){\n        this.#parts = [];\n        this.#type = \"\";\n        this.#size = 0;\n        this.#endings = \"transparent\";\n        if (typeof blobParts !== \"object\" || blobParts === null) {\n            throw new TypeError(\"Failed to construct 'Blob': The provided value cannot be converted to a sequence.\");\n        }\n        if (typeof blobParts[Symbol.iterator] !== \"function\") {\n            throw new TypeError(\"Failed to construct 'Blob': The object must have a callable @@iterator property.\");\n        }\n        if (typeof options !== \"object\" && typeof options !== \"function\") {\n            throw new TypeError(\"Failed to construct 'Blob': parameter 2 cannot convert to dictionary.\");\n        }\n        if (options === null) options = {};\n        const encoder = new TextEncoder();\n        for (const element of blobParts){\n            let part;\n            if (ArrayBuffer.isView(element)) {\n                part = new Uint8Array(element.buffer.slice(element.byteOffset, element.byteOffset + element.byteLength));\n            } else if (element instanceof ArrayBuffer) {\n                part = new Uint8Array(element.slice(0));\n            } else if (element instanceof Blob) {\n                part = element;\n            } else {\n                part = encoder.encode(`${element}`);\n            }\n            const size = ArrayBuffer.isView(part) ? part.byteLength : part.size;\n            // Avoid pushing empty parts into the array to better GC them\n            if (size) {\n                this.#size += size;\n                this.#parts.push(part);\n            }\n        }\n        this.#endings = `${options.endings === undefined ? \"transparent\" : options.endings}`;\n        const type = options.type === undefined ? \"\" : String(options.type);\n        this.#type = /^[\\x20-\\x7E]*$/.test(type) ? type : \"\";\n    }\n    /**\n   * The Blob interface's size property returns the\n   * size of the Blob in bytes.\n   */ get size() {\n        return this.#size;\n    }\n    /**\n   * The type property of a Blob object returns the MIME type of the file.\n   */ get type() {\n        return this.#type;\n    }\n    /**\n   * The text() method in the Blob interface returns a Promise\n   * that resolves with a string containing the contents of\n   * the blob, interpreted as UTF-8.\n   *\n   * @return {Promise<string>}\n   */ async text() {\n        // More optimized than using this.arrayBuffer()\n        // that requires twice as much ram\n        const decoder = new TextDecoder();\n        let str = \"\";\n        for await (const part of toIterator(this.#parts, false)){\n            str += decoder.decode(part, {\n                stream: true\n            });\n        }\n        // Remaining\n        str += decoder.decode();\n        return str;\n    }\n    /**\n   * The arrayBuffer() method in the Blob interface returns a\n   * Promise that resolves with the contents of the blob as\n   * binary data contained in an ArrayBuffer.\n   *\n   * @return {Promise<ArrayBuffer>}\n   */ async arrayBuffer() {\n        // Easier way... Just a unnecessary overhead\n        // const view = new Uint8Array(this.size);\n        // await this.stream().getReader({mode: 'byob'}).read(view);\n        // return view.buffer;\n        const data = new Uint8Array(this.size);\n        let offset = 0;\n        for await (const chunk of toIterator(this.#parts, false)){\n            data.set(chunk, offset);\n            offset += chunk.length;\n        }\n        return data.buffer;\n    }\n    stream() {\n        const it = toIterator(this.#parts, true);\n        return new globalThis.ReadableStream({\n            // @ts-ignore\n            type: \"bytes\",\n            async pull (ctrl) {\n                const chunk = await it.next();\n                chunk.done ? ctrl.close() : ctrl.enqueue(chunk.value);\n            },\n            async cancel () {\n                await it.return();\n            }\n        });\n    }\n    /**\n   * The Blob interface's slice() method creates and returns a\n   * new Blob object which contains data from a subset of the\n   * blob on which it's called.\n   *\n   * @param {number} [start]\n   * @param {number} [end]\n   * @param {string} [type]\n   */ slice(start = 0, end = this.size, type = \"\") {\n        const { size } = this;\n        let relativeStart = start < 0 ? Math.max(size + start, 0) : Math.min(start, size);\n        let relativeEnd = end < 0 ? Math.max(size + end, 0) : Math.min(end, size);\n        const span = Math.max(relativeEnd - relativeStart, 0);\n        const parts = this.#parts;\n        const blobParts = [];\n        let added = 0;\n        for (const part of parts){\n            // don't add the overflow to new blobParts\n            if (added >= span) {\n                break;\n            }\n            const size = ArrayBuffer.isView(part) ? part.byteLength : part.size;\n            if (relativeStart && size <= relativeStart) {\n                // Skip the beginning and change the relative\n                // start & end position as we skip the unwanted parts\n                relativeStart -= size;\n                relativeEnd -= size;\n            } else {\n                let chunk;\n                if (ArrayBuffer.isView(part)) {\n                    chunk = part.subarray(relativeStart, Math.min(size, relativeEnd));\n                    added += chunk.byteLength;\n                } else {\n                    chunk = part.slice(relativeStart, Math.min(size, relativeEnd));\n                    added += chunk.size;\n                }\n                relativeEnd -= size;\n                blobParts.push(chunk);\n                relativeStart = 0; // All next sequential parts should start at 0\n            }\n        }\n        const blob = new Blob([], {\n            type: String(type).toLowerCase()\n        });\n        blob.#size = span;\n        blob.#parts = blobParts;\n        return blob;\n    }\n    get [Symbol.toStringTag]() {\n        return \"Blob\";\n    }\n    static [Symbol.hasInstance](object) {\n        return object && typeof object === \"object\" && typeof object.constructor === \"function\" && (typeof object.stream === \"function\" || typeof object.arrayBuffer === \"function\") && /^(Blob|File)$/.test(object[Symbol.toStringTag]);\n    }\n};\nObject.defineProperties(_Blob.prototype, {\n    size: {\n        enumerable: true\n    },\n    type: {\n        enumerable: true\n    },\n    slice: {\n        enumerable: true\n    }\n});\n/** @type {typeof globalThis.Blob} */ const Blob = _Blob;\nconst _Blob$1 = Blob;\nconst _File = class File extends _Blob$1 {\n    #lastModified;\n    #name;\n    /**\n   * @param {*[]} fileBits\n   * @param {string} fileName\n   * @param {{lastModified?: number, type?: string}} options\n   */ // @ts-ignore\n    constructor(fileBits, fileName, options = {}){\n        if (arguments.length < 2) {\n            throw new TypeError(`Failed to construct 'File': 2 arguments required, but only ${arguments.length} present.`);\n        }\n        super(fileBits, options);\n        this.#lastModified = 0;\n        this.#name = \"\";\n        if (options === null) options = {};\n        // Simulate WebIDL type casting for NaN value in lastModified option.\n        const lastModified = options.lastModified === undefined ? Date.now() : Number(options.lastModified);\n        if (!Number.isNaN(lastModified)) {\n            this.#lastModified = lastModified;\n        }\n        this.#name = String(fileName);\n    }\n    get name() {\n        return this.#name;\n    }\n    get lastModified() {\n        return this.#lastModified;\n    }\n    get [Symbol.toStringTag]() {\n        return \"File\";\n    }\n    static [Symbol.hasInstance](object) {\n        return !!object && object instanceof _Blob$1 && /^(File)$/.test(object[Symbol.toStringTag]);\n    }\n};\n/** @type {typeof globalThis.File} */ // @ts-ignore\nconst File = _File;\nconst File$1 = File;\n/*! formdata-polyfill. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> */ var { toStringTag: t, iterator: i, hasInstance: h } = Symbol, r = Math.random, m = \"append,set,get,getAll,delete,keys,values,entries,forEach,constructor\".split(\",\"), f = (a, b, c)=>(a += \"\", /^(Blob|File)$/.test(b && b[t]) ? [\n        (c = c !== void 0 ? c + \"\" : b[t] == \"File\" ? b.name : \"blob\", a),\n        b.name !== c || b[t] == \"blob\" ? new File$1([\n            b\n        ], c, b) : b\n    ] : [\n        a,\n        b + \"\"\n    ]), e = (c, f)=>(f ? c : c.replace(/\\r?\\n|\\r/g, \"\\r\\n\")).replace(/\\n/g, \"%0A\").replace(/\\r/g, \"%0D\").replace(/\"/g, \"%22\"), x = (n, a, e)=>{\n    if (a.length < e) {\n        throw new TypeError(`Failed to execute '${n}' on 'FormData': ${e} arguments required, but only ${a.length} present.`);\n    }\n};\n/** @type {typeof globalThis.FormData} */ const FormData = class FormData {\n    #d;\n    constructor(...a){\n        this.#d = [];\n        if (a.length) throw new TypeError(`Failed to construct 'FormData': parameter 1 is not of type 'HTMLFormElement'.`);\n    }\n    get [t]() {\n        return \"FormData\";\n    }\n    [i]() {\n        return this.entries();\n    }\n    static [h](o) {\n        return o && typeof o === \"object\" && o[t] === \"FormData\" && !m.some((m)=>typeof o[m] != \"function\");\n    }\n    append(...a) {\n        x(\"append\", arguments, 2);\n        this.#d.push(f(...a));\n    }\n    delete(a) {\n        x(\"delete\", arguments, 1);\n        a += \"\";\n        this.#d = this.#d.filter(([b])=>b !== a);\n    }\n    get(a) {\n        x(\"get\", arguments, 1);\n        a += \"\";\n        for(var b = this.#d, l = b.length, c = 0; c < l; c++)if (b[c][0] === a) return b[c][1];\n        return null;\n    }\n    getAll(a, b) {\n        x(\"getAll\", arguments, 1);\n        b = [];\n        a += \"\";\n        this.#d.forEach((c)=>c[0] === a && b.push(c[1]));\n        return b;\n    }\n    has(a) {\n        x(\"has\", arguments, 1);\n        a += \"\";\n        return this.#d.some((b)=>b[0] === a);\n    }\n    forEach(a, b) {\n        x(\"forEach\", arguments, 1);\n        for (var [c, d] of this)a.call(b, d, c, this);\n    }\n    set(...a) {\n        x(\"set\", arguments, 2);\n        var b = [], c = !0;\n        a = f(...a);\n        this.#d.forEach((d)=>{\n            d[0] === a[0] ? c && (c = !b.push(a)) : b.push(d);\n        });\n        c && b.push(a);\n        this.#d = b;\n    }\n    *entries() {\n        yield* this.#d;\n    }\n    *keys() {\n        for (var [a] of this)yield a;\n    }\n    *values() {\n        for (var [, a] of this)yield a;\n    }\n};\n/** @param {FormData} F */ function formDataToBlob(F, B = _Blob$1) {\n    var b = `${r()}${r()}`.replace(/\\./g, \"\").slice(-28).padStart(32, \"-\"), c = [], p = `--${b}\\r\\nContent-Disposition: form-data; name=\"`;\n    F.forEach((v, n)=>typeof v == \"string\" ? c.push(p + e(n) + `\"\\r\\n\\r\\n${v.replace(/\\r(?!\\n)|(?<!\\r)\\n/g, \"\\r\\n\")}\\r\\n`) : c.push(p + e(n) + `\"; filename=\"${e(v.name, 1)}\"\\r\\nContent-Type: ${v.type || \"application/octet-stream\"}\\r\\n\\r\\n`, v, \"\\r\\n\"));\n    c.push(`--${b}--`);\n    return new B(c, {\n        type: \"multipart/form-data; boundary=\" + b\n    });\n}\nclass FetchBaseError extends Error {\n    constructor(message, type){\n        super(message);\n        // Hide custom error implementation details from end-users\n        Error.captureStackTrace(this, this.constructor);\n        this.type = type;\n    }\n    get name() {\n        return this.constructor.name;\n    }\n    get [Symbol.toStringTag]() {\n        return this.constructor.name;\n    }\n}\n/**\n * @typedef {{ address?: string, code: string, dest?: string, errno: number, info?: object, message: string, path?: string, port?: number, syscall: string}} SystemError\n*/ /**\n * FetchError interface for operational errors\n */ class FetchError extends FetchBaseError {\n    /**\n\t * @param  {string} message -      Error message for human\n\t * @param  {string} [type] -        Error type for machine\n\t * @param  {SystemError} [systemError] - For Node.js system error\n\t */ constructor(message, type, systemError){\n        super(message, type);\n        // When err.type is `system`, err.erroredSysCall contains system error and err.code contains system error code\n        if (systemError) {\n            // eslint-disable-next-line no-multi-assign\n            this.code = this.errno = systemError.code;\n            this.erroredSysCall = systemError.syscall;\n        }\n    }\n}\n/**\n * Is.js\n *\n * Object type checks.\n */ const NAME = Symbol.toStringTag;\n/**\n * Check if `obj` is a URLSearchParams object\n * ref: https://github.com/node-fetch/node-fetch/issues/296#issuecomment-307598143\n * @param {*} object - Object to check for\n * @return {boolean}\n */ const isURLSearchParameters = (object)=>{\n    return typeof object === \"object\" && typeof object.append === \"function\" && typeof object.delete === \"function\" && typeof object.get === \"function\" && typeof object.getAll === \"function\" && typeof object.has === \"function\" && typeof object.set === \"function\" && typeof object.sort === \"function\" && object[NAME] === \"URLSearchParams\";\n};\n/**\n * Check if `object` is a W3C `Blob` object (which `File` inherits from)\n * @param {*} object - Object to check for\n * @return {boolean}\n */ const isBlob = (object)=>{\n    return object && typeof object === \"object\" && typeof object.arrayBuffer === \"function\" && typeof object.type === \"string\" && typeof object.stream === \"function\" && typeof object.constructor === \"function\" && /^(Blob|File)$/.test(object[NAME]);\n};\n/**\n * Check if `obj` is an instance of AbortSignal.\n * @param {*} object - Object to check for\n * @return {boolean}\n */ const isAbortSignal = (object)=>{\n    return typeof object === \"object\" && (object[NAME] === \"AbortSignal\" || object[NAME] === \"EventTarget\");\n};\n/**\n * isDomainOrSubdomain reports whether sub is a subdomain (or exact match) of\n * the parent domain.\n *\n * Both domains must already be in canonical form.\n * @param {string|URL} original\n * @param {string|URL} destination\n */ const isDomainOrSubdomain = (destination, original)=>{\n    const orig = new URL(original).hostname;\n    const dest = new URL(destination).hostname;\n    return orig === dest || orig.endsWith(`.${dest}`);\n};\n/**\n * isSameProtocol reports whether the two provided URLs use the same protocol.\n *\n * Both domains must already be in canonical form.\n * @param {string|URL} original\n * @param {string|URL} destination\n */ const isSameProtocol = (destination, original)=>{\n    const orig = new URL(original).protocol;\n    const dest = new URL(destination).protocol;\n    return orig === dest;\n};\nconst pipeline = node_util.promisify(Stream.pipeline);\nconst INTERNALS$2 = Symbol(\"Body internals\");\n/**\n * Body mixin\n *\n * Ref: https://fetch.spec.whatwg.org/#body\n *\n * @param   Stream  body  Readable stream\n * @param   Object  opts  Response options\n * @return  Void\n */ class Body {\n    constructor(body, { size = 0 } = {}){\n        let boundary = null;\n        if (body === null) {\n            // Body is undefined or null\n            body = null;\n        } else if (isURLSearchParameters(body)) {\n            // Body is a URLSearchParams\n            body = node_buffer.Buffer.from(body.toString());\n        } else if (isBlob(body)) ;\n        else if (node_buffer.Buffer.isBuffer(body)) ;\n        else if (node_util.types.isAnyArrayBuffer(body)) {\n            // Body is ArrayBuffer\n            body = node_buffer.Buffer.from(body);\n        } else if (ArrayBuffer.isView(body)) {\n            // Body is ArrayBufferView\n            body = node_buffer.Buffer.from(body.buffer, body.byteOffset, body.byteLength);\n        } else if (body instanceof Stream) ;\n        else if (body instanceof FormData) {\n            // Body is FormData\n            body = formDataToBlob(body);\n            boundary = body.type.split(\"=\")[1];\n        } else {\n            // None of the above\n            // coerce to string then buffer\n            body = node_buffer.Buffer.from(String(body));\n        }\n        let stream = body;\n        if (node_buffer.Buffer.isBuffer(body)) {\n            stream = Stream.Readable.from(body);\n        } else if (isBlob(body)) {\n            stream = Stream.Readable.from(body.stream());\n        }\n        this[INTERNALS$2] = {\n            body,\n            stream,\n            boundary,\n            disturbed: false,\n            error: null\n        };\n        this.size = size;\n        if (body instanceof Stream) {\n            body.on(\"error\", (error_)=>{\n                const error = error_ instanceof FetchBaseError ? error_ : new FetchError(`Invalid response body while trying to fetch ${this.url}: ${error_.message}`, \"system\", error_);\n                this[INTERNALS$2].error = error;\n            });\n        }\n    }\n    get body() {\n        return this[INTERNALS$2].stream;\n    }\n    get bodyUsed() {\n        return this[INTERNALS$2].disturbed;\n    }\n    /**\n\t * Decode response as ArrayBuffer\n\t *\n\t * @return  Promise\n\t */ async arrayBuffer() {\n        const { buffer, byteOffset, byteLength } = await consumeBody(this);\n        return buffer.slice(byteOffset, byteOffset + byteLength);\n    }\n    async formData() {\n        const ct = this.headers.get(\"content-type\");\n        if (ct.startsWith(\"application/x-www-form-urlencoded\")) {\n            const formData = new FormData();\n            const parameters = new URLSearchParams(await this.text());\n            for (const [name, value1] of parameters){\n                formData.append(name, value1);\n            }\n            return formData;\n        }\n        const { toFormData } = await __webpack_require__.e(/*! import() */ \"vendor-chunks/node-fetch-native\").then(__webpack_require__.t.bind(__webpack_require__, /*! ../chunks/multipart-parser.cjs */ \"(rsc)/./node_modules/node-fetch-native/dist/chunks/multipart-parser.cjs\", 19));\n        return toFormData(this.body, ct);\n    }\n    /**\n\t * Return raw response as Blob\n\t *\n\t * @return Promise\n\t */ async blob() {\n        const ct = this.headers && this.headers.get(\"content-type\") || this[INTERNALS$2].body && this[INTERNALS$2].body.type || \"\";\n        const buf = await this.arrayBuffer();\n        return new _Blob$1([\n            buf\n        ], {\n            type: ct\n        });\n    }\n    /**\n\t * Decode response as json\n\t *\n\t * @return  Promise\n\t */ async json() {\n        const text = await this.text();\n        return JSON.parse(text);\n    }\n    /**\n\t * Decode response as text\n\t *\n\t * @return  Promise\n\t */ async text() {\n        const buffer = await consumeBody(this);\n        return new TextDecoder().decode(buffer);\n    }\n    /**\n\t * Decode response as buffer (non-spec api)\n\t *\n\t * @return  Promise\n\t */ buffer() {\n        return consumeBody(this);\n    }\n}\nBody.prototype.buffer = node_util.deprecate(Body.prototype.buffer, \"Please use 'response.arrayBuffer()' instead of 'response.buffer()'\", \"node-fetch#buffer\");\n// In browsers, all properties are enumerable.\nObject.defineProperties(Body.prototype, {\n    body: {\n        enumerable: true\n    },\n    bodyUsed: {\n        enumerable: true\n    },\n    arrayBuffer: {\n        enumerable: true\n    },\n    blob: {\n        enumerable: true\n    },\n    json: {\n        enumerable: true\n    },\n    text: {\n        enumerable: true\n    },\n    data: {\n        get: node_util.deprecate(()=>{}, \"data doesn't exist, use json(), text(), arrayBuffer(), or body instead\", \"https://github.com/node-fetch/node-fetch/issues/1000 (response)\")\n    }\n});\n/**\n * Consume and convert an entire Body to a Buffer.\n *\n * Ref: https://fetch.spec.whatwg.org/#concept-body-consume-body\n *\n * @return Promise\n */ async function consumeBody(data) {\n    if (data[INTERNALS$2].disturbed) {\n        throw new TypeError(`body used already for: ${data.url}`);\n    }\n    data[INTERNALS$2].disturbed = true;\n    if (data[INTERNALS$2].error) {\n        throw data[INTERNALS$2].error;\n    }\n    const { body } = data;\n    // Body is null\n    if (body === null) {\n        return node_buffer.Buffer.alloc(0);\n    }\n    /* c8 ignore next 3 */ if (!(body instanceof Stream)) {\n        return node_buffer.Buffer.alloc(0);\n    }\n    // Body is stream\n    // get ready to actually consume the body\n    const accum = [];\n    let accumBytes = 0;\n    try {\n        for await (const chunk of body){\n            if (data.size > 0 && accumBytes + chunk.length > data.size) {\n                const error = new FetchError(`content size at ${data.url} over limit: ${data.size}`, \"max-size\");\n                body.destroy(error);\n                throw error;\n            }\n            accumBytes += chunk.length;\n            accum.push(chunk);\n        }\n    } catch (error) {\n        const error_ = error instanceof FetchBaseError ? error : new FetchError(`Invalid response body while trying to fetch ${data.url}: ${error.message}`, \"system\", error);\n        throw error_;\n    }\n    if (body.readableEnded === true || body._readableState.ended === true) {\n        try {\n            if (accum.every((c)=>typeof c === \"string\")) {\n                return node_buffer.Buffer.from(accum.join(\"\"));\n            }\n            return node_buffer.Buffer.concat(accum, accumBytes);\n        } catch (error) {\n            throw new FetchError(`Could not create Buffer from response body for ${data.url}: ${error.message}`, \"system\", error);\n        }\n    } else {\n        throw new FetchError(`Premature close of server response while trying to fetch ${data.url}`);\n    }\n}\n/**\n * Clone body given Res/Req instance\n *\n * @param   Mixed   instance       Response or Request instance\n * @param   String  highWaterMark  highWaterMark for both PassThrough body streams\n * @return  Mixed\n */ const clone = (instance, highWaterMark)=>{\n    let p1;\n    let p2;\n    let { body } = instance[INTERNALS$2];\n    // Don't allow cloning a used body\n    if (instance.bodyUsed) {\n        throw new Error(\"cannot clone body after it is used\");\n    }\n    // Check that body is a stream and not form-data object\n    // note: we can't clone the form-data object without having it as a dependency\n    if (body instanceof Stream && typeof body.getBoundary !== \"function\") {\n        // Tee instance body\n        p1 = new Stream.PassThrough({\n            highWaterMark\n        });\n        p2 = new Stream.PassThrough({\n            highWaterMark\n        });\n        body.pipe(p1);\n        body.pipe(p2);\n        // Set instance body to teed body and return the other teed body\n        instance[INTERNALS$2].stream = p1;\n        body = p2;\n    }\n    return body;\n};\nconst getNonSpecFormDataBoundary = node_util.deprecate((body)=>body.getBoundary(), \"form-data doesn't follow the spec and requires special treatment. Use alternative package\", \"https://github.com/node-fetch/node-fetch/issues/1167\");\n/**\n * Performs the operation \"extract a `Content-Type` value from |object|\" as\n * specified in the specification:\n * https://fetch.spec.whatwg.org/#concept-bodyinit-extract\n *\n * This function assumes that instance.body is present.\n *\n * @param {any} body Any options.body input\n * @returns {string | null}\n */ const extractContentType = (body, request)=>{\n    // Body is null or undefined\n    if (body === null) {\n        return null;\n    }\n    // Body is string\n    if (typeof body === \"string\") {\n        return \"text/plain;charset=UTF-8\";\n    }\n    // Body is a URLSearchParams\n    if (isURLSearchParameters(body)) {\n        return \"application/x-www-form-urlencoded;charset=UTF-8\";\n    }\n    // Body is blob\n    if (isBlob(body)) {\n        return body.type || null;\n    }\n    // Body is a Buffer (Buffer, ArrayBuffer or ArrayBufferView)\n    if (node_buffer.Buffer.isBuffer(body) || node_util.types.isAnyArrayBuffer(body) || ArrayBuffer.isView(body)) {\n        return null;\n    }\n    if (body instanceof FormData) {\n        return `multipart/form-data; boundary=${request[INTERNALS$2].boundary}`;\n    }\n    // Detect form data input from form-data module\n    if (body && typeof body.getBoundary === \"function\") {\n        return `multipart/form-data;boundary=${getNonSpecFormDataBoundary(body)}`;\n    }\n    // Body is stream - can't really do much about this\n    if (body instanceof Stream) {\n        return null;\n    }\n    // Body constructor defaults other things to string\n    return \"text/plain;charset=UTF-8\";\n};\n/**\n * The Fetch Standard treats this as if \"total bytes\" is a property on the body.\n * For us, we have to explicitly get it with a function.\n *\n * ref: https://fetch.spec.whatwg.org/#concept-body-total-bytes\n *\n * @param {any} obj.body Body object from the Body instance.\n * @returns {number | null}\n */ const getTotalBytes = (request)=>{\n    const { body } = request[INTERNALS$2];\n    // Body is null or undefined\n    if (body === null) {\n        return 0;\n    }\n    // Body is Blob\n    if (isBlob(body)) {\n        return body.size;\n    }\n    // Body is Buffer\n    if (node_buffer.Buffer.isBuffer(body)) {\n        return body.length;\n    }\n    // Detect form data input from form-data module\n    if (body && typeof body.getLengthSync === \"function\") {\n        return body.hasKnownLength && body.hasKnownLength() ? body.getLengthSync() : null;\n    }\n    // Body is stream\n    return null;\n};\n/**\n * Write a Body to a Node.js WritableStream (e.g. http.Request) object.\n *\n * @param {Stream.Writable} dest The stream to write to.\n * @param obj.body Body object from the Body instance.\n * @returns {Promise<void>}\n */ const writeToStream = async (dest, { body })=>{\n    if (body === null) {\n        // Body is null\n        dest.end();\n    } else {\n        // Body is stream\n        await pipeline(body, dest);\n    }\n};\n/**\n * Headers.js\n *\n * Headers class offers convenient helpers\n */ /* c8 ignore next 9 */ const validateHeaderName = typeof http.validateHeaderName === \"function\" ? http.validateHeaderName : (name)=>{\n    if (!/^[\\^`\\-\\w!#$%&'*+.|~]+$/.test(name)) {\n        const error = new TypeError(`Header name must be a valid HTTP token [${name}]`);\n        Object.defineProperty(error, \"code\", {\n            value: \"ERR_INVALID_HTTP_TOKEN\"\n        });\n        throw error;\n    }\n};\n/* c8 ignore next 9 */ const validateHeaderValue = typeof http.validateHeaderValue === \"function\" ? http.validateHeaderValue : (name, value1)=>{\n    if (/[^\\t\\u0020-\\u007E\\u0080-\\u00FF]/.test(value1)) {\n        const error = new TypeError(`Invalid character in header content [\"${name}\"]`);\n        Object.defineProperty(error, \"code\", {\n            value: \"ERR_INVALID_CHAR\"\n        });\n        throw error;\n    }\n};\n/**\n * @typedef {Headers | Record<string, string> | Iterable<readonly [string, string]> | Iterable<Iterable<string>>} HeadersInit\n */ /**\n * This Fetch API interface allows you to perform various actions on HTTP request and response headers.\n * These actions include retrieving, setting, adding to, and removing.\n * A Headers object has an associated header list, which is initially empty and consists of zero or more name and value pairs.\n * You can add to this using methods like append() (see Examples.)\n * In all methods of this interface, header names are matched by case-insensitive byte sequence.\n *\n */ class Headers extends URLSearchParams {\n    /**\n\t * Headers class\n\t *\n\t * @constructor\n\t * @param {HeadersInit} [init] - Response headers\n\t */ constructor(init){\n        // Validate and normalize init object in [name, value(s)][]\n        /** @type {string[][]} */ let result = [];\n        if (init instanceof Headers) {\n            const raw = init.raw();\n            for (const [name, values] of Object.entries(raw)){\n                result.push(...values.map((value1)=>[\n                        name,\n                        value1\n                    ]));\n            }\n        } else if (init == null) ;\n        else if (typeof init === \"object\" && !node_util.types.isBoxedPrimitive(init)) {\n            const method = init[Symbol.iterator];\n            // eslint-disable-next-line no-eq-null, eqeqeq\n            if (method == null) {\n                // Record<ByteString, ByteString>\n                result.push(...Object.entries(init));\n            } else {\n                if (typeof method !== \"function\") {\n                    throw new TypeError(\"Header pairs must be iterable\");\n                }\n                // Sequence<sequence<ByteString>>\n                // Note: per spec we have to first exhaust the lists then process them\n                result = [\n                    ...init\n                ].map((pair)=>{\n                    if (typeof pair !== \"object\" || node_util.types.isBoxedPrimitive(pair)) {\n                        throw new TypeError(\"Each header pair must be an iterable object\");\n                    }\n                    return [\n                        ...pair\n                    ];\n                }).map((pair)=>{\n                    if (pair.length !== 2) {\n                        throw new TypeError(\"Each header pair must be a name/value tuple\");\n                    }\n                    return [\n                        ...pair\n                    ];\n                });\n            }\n        } else {\n            throw new TypeError(\"Failed to construct 'Headers': The provided value is not of type '(sequence<sequence<ByteString>> or record<ByteString, ByteString>)\");\n        }\n        // Validate and lowercase\n        result = result.length > 0 ? result.map(([name, value1])=>{\n            validateHeaderName(name);\n            validateHeaderValue(name, String(value1));\n            return [\n                String(name).toLowerCase(),\n                String(value1)\n            ];\n        }) : undefined;\n        super(result);\n        // Returning a Proxy that will lowercase key names, validate parameters and sort keys\n        // eslint-disable-next-line no-constructor-return\n        return new Proxy(this, {\n            get (target, p, receiver) {\n                switch(p){\n                    case \"append\":\n                    case \"set\":\n                        return (name, value1)=>{\n                            validateHeaderName(name);\n                            validateHeaderValue(name, String(value1));\n                            return URLSearchParams.prototype[p].call(target, String(name).toLowerCase(), String(value1));\n                        };\n                    case \"delete\":\n                    case \"has\":\n                    case \"getAll\":\n                        return (name)=>{\n                            validateHeaderName(name);\n                            return URLSearchParams.prototype[p].call(target, String(name).toLowerCase());\n                        };\n                    case \"keys\":\n                        return ()=>{\n                            target.sort();\n                            return new Set(URLSearchParams.prototype.keys.call(target)).keys();\n                        };\n                    default:\n                        return Reflect.get(target, p, receiver);\n                }\n            }\n        });\n    /* c8 ignore next */ }\n    get [Symbol.toStringTag]() {\n        return this.constructor.name;\n    }\n    toString() {\n        return Object.prototype.toString.call(this);\n    }\n    get(name) {\n        const values = this.getAll(name);\n        if (values.length === 0) {\n            return null;\n        }\n        let value1 = values.join(\", \");\n        if (/^content-encoding$/i.test(name)) {\n            value1 = value1.toLowerCase();\n        }\n        return value1;\n    }\n    forEach(callback, thisArg = undefined) {\n        for (const name of this.keys()){\n            Reflect.apply(callback, thisArg, [\n                this.get(name),\n                name,\n                this\n            ]);\n        }\n    }\n    *values() {\n        for (const name of this.keys()){\n            yield this.get(name);\n        }\n    }\n    /**\n\t * @type {() => IterableIterator<[string, string]>}\n\t */ *entries() {\n        for (const name of this.keys()){\n            yield [\n                name,\n                this.get(name)\n            ];\n        }\n    }\n    [Symbol.iterator]() {\n        return this.entries();\n    }\n    /**\n\t * Node-fetch non-spec method\n\t * returning all headers and their values as array\n\t * @returns {Record<string, string[]>}\n\t */ raw() {\n        return [\n            ...this.keys()\n        ].reduce((result, key)=>{\n            result[key] = this.getAll(key);\n            return result;\n        }, {});\n    }\n    /**\n\t * For better console.log(headers) and also to convert Headers into Node.js Request compatible format\n\t */ [Symbol.for(\"nodejs.util.inspect.custom\")]() {\n        return [\n            ...this.keys()\n        ].reduce((result, key)=>{\n            const values = this.getAll(key);\n            // Http.request() only supports string as Host header.\n            // This hack makes specifying custom Host header possible.\n            if (key === \"host\") {\n                result[key] = values[0];\n            } else {\n                result[key] = values.length > 1 ? values : values[0];\n            }\n            return result;\n        }, {});\n    }\n}\n/**\n * Re-shaping object for Web IDL tests\n * Only need to do it for overridden methods\n */ Object.defineProperties(Headers.prototype, [\n    \"get\",\n    \"entries\",\n    \"forEach\",\n    \"values\"\n].reduce((result, property)=>{\n    result[property] = {\n        enumerable: true\n    };\n    return result;\n}, {}));\n/**\n * Create a Headers object from an http.IncomingMessage.rawHeaders, ignoring those that do\n * not conform to HTTP grammar productions.\n * @param {import('http').IncomingMessage['rawHeaders']} headers\n */ function fromRawHeaders(headers = []) {\n    return new Headers(headers// Split into pairs\n    .reduce((result, value1, index, array)=>{\n        if (index % 2 === 0) {\n            result.push(array.slice(index, index + 2));\n        }\n        return result;\n    }, []).filter(([name, value1])=>{\n        try {\n            validateHeaderName(name);\n            validateHeaderValue(name, String(value1));\n            return true;\n        } catch  {\n            return false;\n        }\n    }));\n}\nconst redirectStatus = new Set([\n    301,\n    302,\n    303,\n    307,\n    308\n]);\n/**\n * Redirect code matching\n *\n * @param {number} code - Status code\n * @return {boolean}\n */ const isRedirect = (code)=>{\n    return redirectStatus.has(code);\n};\n/**\n * Response.js\n *\n * Response class provides content decoding\n */ const INTERNALS$1 = Symbol(\"Response internals\");\n/**\n * Response class\n *\n * Ref: https://fetch.spec.whatwg.org/#response-class\n *\n * @param   Stream  body  Readable stream\n * @param   Object  opts  Response options\n * @return  Void\n */ class Response extends Body {\n    constructor(body = null, options = {}){\n        super(body, options);\n        // eslint-disable-next-line no-eq-null, eqeqeq, no-negated-condition\n        const status = options.status != null ? options.status : 200;\n        const headers = new Headers(options.headers);\n        if (body !== null && !headers.has(\"Content-Type\")) {\n            const contentType = extractContentType(body, this);\n            if (contentType) {\n                headers.append(\"Content-Type\", contentType);\n            }\n        }\n        this[INTERNALS$1] = {\n            type: \"default\",\n            url: options.url,\n            status,\n            statusText: options.statusText || \"\",\n            headers,\n            counter: options.counter,\n            highWaterMark: options.highWaterMark\n        };\n    }\n    get type() {\n        return this[INTERNALS$1].type;\n    }\n    get url() {\n        return this[INTERNALS$1].url || \"\";\n    }\n    get status() {\n        return this[INTERNALS$1].status;\n    }\n    /**\n\t * Convenience property representing if the request ended normally\n\t */ get ok() {\n        return this[INTERNALS$1].status >= 200 && this[INTERNALS$1].status < 300;\n    }\n    get redirected() {\n        return this[INTERNALS$1].counter > 0;\n    }\n    get statusText() {\n        return this[INTERNALS$1].statusText;\n    }\n    get headers() {\n        return this[INTERNALS$1].headers;\n    }\n    get highWaterMark() {\n        return this[INTERNALS$1].highWaterMark;\n    }\n    /**\n\t * Clone this response\n\t *\n\t * @return  Response\n\t */ clone() {\n        return new Response(clone(this, this.highWaterMark), {\n            type: this.type,\n            url: this.url,\n            status: this.status,\n            statusText: this.statusText,\n            headers: this.headers,\n            ok: this.ok,\n            redirected: this.redirected,\n            size: this.size,\n            highWaterMark: this.highWaterMark\n        });\n    }\n    /**\n\t * @param {string} url    The URL that the new response is to originate from.\n\t * @param {number} status An optional status code for the response (e.g., 302.)\n\t * @returns {Response}    A Response object.\n\t */ static redirect(url, status = 302) {\n        if (!isRedirect(status)) {\n            throw new RangeError('Failed to execute \"redirect\" on \"response\": Invalid status code');\n        }\n        return new Response(null, {\n            headers: {\n                location: new URL(url).toString()\n            },\n            status\n        });\n    }\n    static error() {\n        const response = new Response(null, {\n            status: 0,\n            statusText: \"\"\n        });\n        response[INTERNALS$1].type = \"error\";\n        return response;\n    }\n    static json(data = undefined, init = {}) {\n        const body = JSON.stringify(data);\n        if (body === undefined) {\n            throw new TypeError(\"data is not JSON serializable\");\n        }\n        const headers = new Headers(init && init.headers);\n        if (!headers.has(\"content-type\")) {\n            headers.set(\"content-type\", \"application/json\");\n        }\n        return new Response(body, {\n            ...init,\n            headers\n        });\n    }\n    get [Symbol.toStringTag]() {\n        return \"Response\";\n    }\n}\nObject.defineProperties(Response.prototype, {\n    type: {\n        enumerable: true\n    },\n    url: {\n        enumerable: true\n    },\n    status: {\n        enumerable: true\n    },\n    ok: {\n        enumerable: true\n    },\n    redirected: {\n        enumerable: true\n    },\n    statusText: {\n        enumerable: true\n    },\n    headers: {\n        enumerable: true\n    },\n    clone: {\n        enumerable: true\n    }\n});\nconst getSearch = (parsedURL)=>{\n    if (parsedURL.search) {\n        return parsedURL.search;\n    }\n    const lastOffset = parsedURL.href.length - 1;\n    const hash = parsedURL.hash || (parsedURL.href[lastOffset] === \"#\" ? \"#\" : \"\");\n    return parsedURL.href[lastOffset - hash.length] === \"?\" ? \"?\" : \"\";\n};\n/**\n * @external URL\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/URL|URL}\n */ /**\n * @module utils/referrer\n * @private\n */ /**\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#strip-url|Referrer Policy §8.4. Strip url for use as a referrer}\n * @param {string} URL\n * @param {boolean} [originOnly=false]\n */ function stripURLForUseAsAReferrer(url, originOnly = false) {\n    // 1. If url is null, return no referrer.\n    if (url == null) {\n        return \"no-referrer\";\n    }\n    url = new URL(url);\n    // 2. If url's scheme is a local scheme, then return no referrer.\n    if (/^(about|blob|data):$/.test(url.protocol)) {\n        return \"no-referrer\";\n    }\n    // 3. Set url's username to the empty string.\n    url.username = \"\";\n    // 4. Set url's password to null.\n    // Note: `null` appears to be a mistake as this actually results in the password being `\"null\"`.\n    url.password = \"\";\n    // 5. Set url's fragment to null.\n    // Note: `null` appears to be a mistake as this actually results in the fragment being `\"#null\"`.\n    url.hash = \"\";\n    // 6. If the origin-only flag is true, then:\n    if (originOnly) {\n        // 6.1. Set url's path to null.\n        // Note: `null` appears to be a mistake as this actually results in the path being `\"/null\"`.\n        url.pathname = \"\";\n        // 6.2. Set url's query to null.\n        // Note: `null` appears to be a mistake as this actually results in the query being `\"?null\"`.\n        url.search = \"\";\n    }\n    // 7. Return url.\n    return url;\n}\n/**\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#enumdef-referrerpolicy|enum ReferrerPolicy}\n */ const ReferrerPolicy = new Set([\n    \"\",\n    \"no-referrer\",\n    \"no-referrer-when-downgrade\",\n    \"same-origin\",\n    \"origin\",\n    \"strict-origin\",\n    \"origin-when-cross-origin\",\n    \"strict-origin-when-cross-origin\",\n    \"unsafe-url\"\n]);\n/**\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#default-referrer-policy|default referrer policy}\n */ const DEFAULT_REFERRER_POLICY = \"strict-origin-when-cross-origin\";\n/**\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#referrer-policies|Referrer Policy §3. Referrer Policies}\n * @param {string} referrerPolicy\n * @returns {string} referrerPolicy\n */ function validateReferrerPolicy(referrerPolicy) {\n    if (!ReferrerPolicy.has(referrerPolicy)) {\n        throw new TypeError(`Invalid referrerPolicy: ${referrerPolicy}`);\n    }\n    return referrerPolicy;\n}\n/**\n * @see {@link https://w3c.github.io/webappsec-secure-contexts/#is-origin-trustworthy|Referrer Policy §3.2. Is origin potentially trustworthy?}\n * @param {external:URL} url\n * @returns `true`: \"Potentially Trustworthy\", `false`: \"Not Trustworthy\"\n */ function isOriginPotentiallyTrustworthy(url) {\n    // 1. If origin is an opaque origin, return \"Not Trustworthy\".\n    // Not applicable\n    // 2. Assert: origin is a tuple origin.\n    // Not for implementations\n    // 3. If origin's scheme is either \"https\" or \"wss\", return \"Potentially Trustworthy\".\n    if (/^(http|ws)s:$/.test(url.protocol)) {\n        return true;\n    }\n    // 4. If origin's host component matches one of the CIDR notations 127.0.0.0/8 or ::1/128 [RFC4632], return \"Potentially Trustworthy\".\n    const hostIp = url.host.replace(/(^\\[)|(]$)/g, \"\");\n    const hostIPVersion = node_net.isIP(hostIp);\n    if (hostIPVersion === 4 && /^127\\./.test(hostIp)) {\n        return true;\n    }\n    if (hostIPVersion === 6 && /^(((0+:){7})|(::(0+:){0,6}))0*1$/.test(hostIp)) {\n        return true;\n    }\n    // 5. If origin's host component is \"localhost\" or falls within \".localhost\", and the user agent conforms to the name resolution rules in [let-localhost-be-localhost], return \"Potentially Trustworthy\".\n    // We are returning FALSE here because we cannot ensure conformance to\n    // let-localhost-be-loalhost (https://tools.ietf.org/html/draft-west-let-localhost-be-localhost)\n    if (url.host === \"localhost\" || url.host.endsWith(\".localhost\")) {\n        return false;\n    }\n    // 6. If origin's scheme component is file, return \"Potentially Trustworthy\".\n    if (url.protocol === \"file:\") {\n        return true;\n    }\n    // 7. If origin's scheme component is one which the user agent considers to be authenticated, return \"Potentially Trustworthy\".\n    // Not supported\n    // 8. If origin has been configured as a trustworthy origin, return \"Potentially Trustworthy\".\n    // Not supported\n    // 9. Return \"Not Trustworthy\".\n    return false;\n}\n/**\n * @see {@link https://w3c.github.io/webappsec-secure-contexts/#is-url-trustworthy|Referrer Policy §3.3. Is url potentially trustworthy?}\n * @param {external:URL} url\n * @returns `true`: \"Potentially Trustworthy\", `false`: \"Not Trustworthy\"\n */ function isUrlPotentiallyTrustworthy(url) {\n    // 1. If url is \"about:blank\" or \"about:srcdoc\", return \"Potentially Trustworthy\".\n    if (/^about:(blank|srcdoc)$/.test(url)) {\n        return true;\n    }\n    // 2. If url's scheme is \"data\", return \"Potentially Trustworthy\".\n    if (url.protocol === \"data:\") {\n        return true;\n    }\n    // Note: The origin of blob: and filesystem: URLs is the origin of the context in which they were\n    // created. Therefore, blobs created in a trustworthy origin will themselves be potentially\n    // trustworthy.\n    if (/^(blob|filesystem):$/.test(url.protocol)) {\n        return true;\n    }\n    // 3. Return the result of executing §3.2 Is origin potentially trustworthy? on url's origin.\n    return isOriginPotentiallyTrustworthy(url);\n}\n/**\n * Modifies the referrerURL to enforce any extra security policy considerations.\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#determine-requests-referrer|Referrer Policy §8.3. Determine request's Referrer}, step 7\n * @callback module:utils/referrer~referrerURLCallback\n * @param {external:URL} referrerURL\n * @returns {external:URL} modified referrerURL\n */ /**\n * Modifies the referrerOrigin to enforce any extra security policy considerations.\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#determine-requests-referrer|Referrer Policy §8.3. Determine request's Referrer}, step 7\n * @callback module:utils/referrer~referrerOriginCallback\n * @param {external:URL} referrerOrigin\n * @returns {external:URL} modified referrerOrigin\n */ /**\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#determine-requests-referrer|Referrer Policy §8.3. Determine request's Referrer}\n * @param {Request} request\n * @param {object} o\n * @param {module:utils/referrer~referrerURLCallback} o.referrerURLCallback\n * @param {module:utils/referrer~referrerOriginCallback} o.referrerOriginCallback\n * @returns {external:URL} Request's referrer\n */ function determineRequestsReferrer(request, { referrerURLCallback, referrerOriginCallback } = {}) {\n    // There are 2 notes in the specification about invalid pre-conditions.  We return null, here, for\n    // these cases:\n    // > Note: If request's referrer is \"no-referrer\", Fetch will not call into this algorithm.\n    // > Note: If request's referrer policy is the empty string, Fetch will not call into this\n    // > algorithm.\n    if (request.referrer === \"no-referrer\" || request.referrerPolicy === \"\") {\n        return null;\n    }\n    // 1. Let policy be request's associated referrer policy.\n    const policy = request.referrerPolicy;\n    // 2. Let environment be request's client.\n    // not applicable to node.js\n    // 3. Switch on request's referrer:\n    if (request.referrer === \"about:client\") {\n        return \"no-referrer\";\n    }\n    // \"a URL\": Let referrerSource be request's referrer.\n    const referrerSource = request.referrer;\n    // 4. Let request's referrerURL be the result of stripping referrerSource for use as a referrer.\n    let referrerURL = stripURLForUseAsAReferrer(referrerSource);\n    // 5. Let referrerOrigin be the result of stripping referrerSource for use as a referrer, with the\n    //    origin-only flag set to true.\n    let referrerOrigin = stripURLForUseAsAReferrer(referrerSource, true);\n    // 6. If the result of serializing referrerURL is a string whose length is greater than 4096, set\n    //    referrerURL to referrerOrigin.\n    if (referrerURL.toString().length > 4096) {\n        referrerURL = referrerOrigin;\n    }\n    // 7. The user agent MAY alter referrerURL or referrerOrigin at this point to enforce arbitrary\n    //    policy considerations in the interests of minimizing data leakage. For example, the user\n    //    agent could strip the URL down to an origin, modify its host, replace it with an empty\n    //    string, etc.\n    if (referrerURLCallback) {\n        referrerURL = referrerURLCallback(referrerURL);\n    }\n    if (referrerOriginCallback) {\n        referrerOrigin = referrerOriginCallback(referrerOrigin);\n    }\n    // 8.Execute the statements corresponding to the value of policy:\n    const currentURL = new URL(request.url);\n    switch(policy){\n        case \"no-referrer\":\n            return \"no-referrer\";\n        case \"origin\":\n            return referrerOrigin;\n        case \"unsafe-url\":\n            return referrerURL;\n        case \"strict-origin\":\n            // 1. If referrerURL is a potentially trustworthy URL and request's current URL is not a\n            //    potentially trustworthy URL, then return no referrer.\n            if (isUrlPotentiallyTrustworthy(referrerURL) && !isUrlPotentiallyTrustworthy(currentURL)) {\n                return \"no-referrer\";\n            }\n            // 2. Return referrerOrigin.\n            return referrerOrigin.toString();\n        case \"strict-origin-when-cross-origin\":\n            // 1. If the origin of referrerURL and the origin of request's current URL are the same, then\n            //    return referrerURL.\n            if (referrerURL.origin === currentURL.origin) {\n                return referrerURL;\n            }\n            // 2. If referrerURL is a potentially trustworthy URL and request's current URL is not a\n            //    potentially trustworthy URL, then return no referrer.\n            if (isUrlPotentiallyTrustworthy(referrerURL) && !isUrlPotentiallyTrustworthy(currentURL)) {\n                return \"no-referrer\";\n            }\n            // 3. Return referrerOrigin.\n            return referrerOrigin;\n        case \"same-origin\":\n            // 1. If the origin of referrerURL and the origin of request's current URL are the same, then\n            //    return referrerURL.\n            if (referrerURL.origin === currentURL.origin) {\n                return referrerURL;\n            }\n            // 2. Return no referrer.\n            return \"no-referrer\";\n        case \"origin-when-cross-origin\":\n            // 1. If the origin of referrerURL and the origin of request's current URL are the same, then\n            //    return referrerURL.\n            if (referrerURL.origin === currentURL.origin) {\n                return referrerURL;\n            }\n            // Return referrerOrigin.\n            return referrerOrigin;\n        case \"no-referrer-when-downgrade\":\n            // 1. If referrerURL is a potentially trustworthy URL and request's current URL is not a\n            //    potentially trustworthy URL, then return no referrer.\n            if (isUrlPotentiallyTrustworthy(referrerURL) && !isUrlPotentiallyTrustworthy(currentURL)) {\n                return \"no-referrer\";\n            }\n            // 2. Return referrerURL.\n            return referrerURL;\n        default:\n            throw new TypeError(`Invalid referrerPolicy: ${policy}`);\n    }\n}\n/**\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#parse-referrer-policy-from-header|Referrer Policy §8.1. Parse a referrer policy from a Referrer-Policy header}\n * @param {Headers} headers Response headers\n * @returns {string} policy\n */ function parseReferrerPolicyFromHeader(headers) {\n    // 1. Let policy-tokens be the result of extracting header list values given `Referrer-Policy`\n    //    and response’s header list.\n    const policyTokens = (headers.get(\"referrer-policy\") || \"\").split(/[,\\s]+/);\n    // 2. Let policy be the empty string.\n    let policy = \"\";\n    // 3. For each token in policy-tokens, if token is a referrer policy and token is not the empty\n    //    string, then set policy to token.\n    // Note: This algorithm loops over multiple policy values to allow deployment of new policy\n    // values with fallbacks for older user agents, as described in § 11.1 Unknown Policy Values.\n    for (const token of policyTokens){\n        if (token && ReferrerPolicy.has(token)) {\n            policy = token;\n        }\n    }\n    // 4. Return policy.\n    return policy;\n}\n/**\n * Request.js\n *\n * Request class contains server only options\n *\n * All spec algorithm step numbers are based on https://fetch.spec.whatwg.org/commit-snapshots/ae716822cb3a61843226cd090eefc6589446c1d2/.\n */ const INTERNALS = Symbol(\"Request internals\");\n/**\n * Check if `obj` is an instance of Request.\n *\n * @param  {*} object\n * @return {boolean}\n */ const isRequest = (object)=>{\n    return typeof object === \"object\" && typeof object[INTERNALS] === \"object\";\n};\nconst doBadDataWarn = node_util.deprecate(()=>{}, \".data is not a valid RequestInit property, use .body instead\", \"https://github.com/node-fetch/node-fetch/issues/1000 (request)\");\n/**\n * Request class\n *\n * Ref: https://fetch.spec.whatwg.org/#request-class\n *\n * @param   Mixed   input  Url or Request instance\n * @param   Object  init   Custom options\n * @return  Void\n */ class Request extends Body {\n    constructor(input, init = {}){\n        let parsedURL;\n        // Normalize input and force URL to be encoded as UTF-8 (https://github.com/node-fetch/node-fetch/issues/245)\n        if (isRequest(input)) {\n            parsedURL = new URL(input.url);\n        } else {\n            parsedURL = new URL(input);\n            input = {};\n        }\n        if (parsedURL.username !== \"\" || parsedURL.password !== \"\") {\n            throw new TypeError(`${parsedURL} is an url with embedded credentials.`);\n        }\n        let method = init.method || input.method || \"GET\";\n        if (/^(delete|get|head|options|post|put)$/i.test(method)) {\n            method = method.toUpperCase();\n        }\n        if (!isRequest(init) && \"data\" in init) {\n            doBadDataWarn();\n        }\n        // eslint-disable-next-line no-eq-null, eqeqeq\n        if ((init.body != null || isRequest(input) && input.body !== null) && (method === \"GET\" || method === \"HEAD\")) {\n            throw new TypeError(\"Request with GET/HEAD method cannot have body\");\n        }\n        const inputBody = init.body ? init.body : isRequest(input) && input.body !== null ? clone(input) : null;\n        super(inputBody, {\n            size: init.size || input.size || 0\n        });\n        const headers = new Headers(init.headers || input.headers || {});\n        if (inputBody !== null && !headers.has(\"Content-Type\")) {\n            const contentType = extractContentType(inputBody, this);\n            if (contentType) {\n                headers.set(\"Content-Type\", contentType);\n            }\n        }\n        let signal = isRequest(input) ? input.signal : null;\n        if (\"signal\" in init) {\n            signal = init.signal;\n        }\n        // eslint-disable-next-line no-eq-null, eqeqeq\n        if (signal != null && !isAbortSignal(signal)) {\n            throw new TypeError(\"Expected signal to be an instanceof AbortSignal or EventTarget\");\n        }\n        // §5.4, Request constructor steps, step 15.1\n        // eslint-disable-next-line no-eq-null, eqeqeq\n        let referrer = init.referrer == null ? input.referrer : init.referrer;\n        if (referrer === \"\") {\n            // §5.4, Request constructor steps, step 15.2\n            referrer = \"no-referrer\";\n        } else if (referrer) {\n            // §5.4, Request constructor steps, step 15.3.1, 15.3.2\n            const parsedReferrer = new URL(referrer);\n            // §5.4, Request constructor steps, step 15.3.3, 15.3.4\n            referrer = /^about:(\\/\\/)?client$/.test(parsedReferrer) ? \"client\" : parsedReferrer;\n        } else {\n            referrer = undefined;\n        }\n        this[INTERNALS] = {\n            method,\n            redirect: init.redirect || input.redirect || \"follow\",\n            headers,\n            parsedURL,\n            signal,\n            referrer\n        };\n        // Node-fetch-only options\n        this.follow = init.follow === undefined ? input.follow === undefined ? 20 : input.follow : init.follow;\n        this.compress = init.compress === undefined ? input.compress === undefined ? true : input.compress : init.compress;\n        this.counter = init.counter || input.counter || 0;\n        this.agent = init.agent || input.agent;\n        this.highWaterMark = init.highWaterMark || input.highWaterMark || 16384;\n        this.insecureHTTPParser = init.insecureHTTPParser || input.insecureHTTPParser || false;\n        // §5.4, Request constructor steps, step 16.\n        // Default is empty string per https://fetch.spec.whatwg.org/#concept-request-referrer-policy\n        this.referrerPolicy = init.referrerPolicy || input.referrerPolicy || \"\";\n    }\n    /** @returns {string} */ get method() {\n        return this[INTERNALS].method;\n    }\n    /** @returns {string} */ get url() {\n        return node_url.format(this[INTERNALS].parsedURL);\n    }\n    /** @returns {Headers} */ get headers() {\n        return this[INTERNALS].headers;\n    }\n    get redirect() {\n        return this[INTERNALS].redirect;\n    }\n    /** @returns {AbortSignal} */ get signal() {\n        return this[INTERNALS].signal;\n    }\n    // https://fetch.spec.whatwg.org/#dom-request-referrer\n    get referrer() {\n        if (this[INTERNALS].referrer === \"no-referrer\") {\n            return \"\";\n        }\n        if (this[INTERNALS].referrer === \"client\") {\n            return \"about:client\";\n        }\n        if (this[INTERNALS].referrer) {\n            return this[INTERNALS].referrer.toString();\n        }\n        return undefined;\n    }\n    get referrerPolicy() {\n        return this[INTERNALS].referrerPolicy;\n    }\n    set referrerPolicy(referrerPolicy) {\n        this[INTERNALS].referrerPolicy = validateReferrerPolicy(referrerPolicy);\n    }\n    /**\n\t * Clone this request\n\t *\n\t * @return  Request\n\t */ clone() {\n        return new Request(this);\n    }\n    get [Symbol.toStringTag]() {\n        return \"Request\";\n    }\n}\nObject.defineProperties(Request.prototype, {\n    method: {\n        enumerable: true\n    },\n    url: {\n        enumerable: true\n    },\n    headers: {\n        enumerable: true\n    },\n    redirect: {\n        enumerable: true\n    },\n    clone: {\n        enumerable: true\n    },\n    signal: {\n        enumerable: true\n    },\n    referrer: {\n        enumerable: true\n    },\n    referrerPolicy: {\n        enumerable: true\n    }\n});\n/**\n * Convert a Request to Node.js http request options.\n *\n * @param {Request} request - A Request instance\n * @return The options object to be passed to http.request\n */ const getNodeRequestOptions = (request)=>{\n    const { parsedURL } = request[INTERNALS];\n    const headers = new Headers(request[INTERNALS].headers);\n    // Fetch step 1.3\n    if (!headers.has(\"Accept\")) {\n        headers.set(\"Accept\", \"*/*\");\n    }\n    // HTTP-network-or-cache fetch steps 2.4-2.7\n    let contentLengthValue = null;\n    if (request.body === null && /^(post|put)$/i.test(request.method)) {\n        contentLengthValue = \"0\";\n    }\n    if (request.body !== null) {\n        const totalBytes = getTotalBytes(request);\n        // Set Content-Length if totalBytes is a number (that is not NaN)\n        if (typeof totalBytes === \"number\" && !Number.isNaN(totalBytes)) {\n            contentLengthValue = String(totalBytes);\n        }\n    }\n    if (contentLengthValue) {\n        headers.set(\"Content-Length\", contentLengthValue);\n    }\n    // 4.1. Main fetch, step 2.6\n    // > If request's referrer policy is the empty string, then set request's referrer policy to the\n    // > default referrer policy.\n    if (request.referrerPolicy === \"\") {\n        request.referrerPolicy = DEFAULT_REFERRER_POLICY;\n    }\n    // 4.1. Main fetch, step 2.7\n    // > If request's referrer is not \"no-referrer\", set request's referrer to the result of invoking\n    // > determine request's referrer.\n    if (request.referrer && request.referrer !== \"no-referrer\") {\n        request[INTERNALS].referrer = determineRequestsReferrer(request);\n    } else {\n        request[INTERNALS].referrer = \"no-referrer\";\n    }\n    // 4.5. HTTP-network-or-cache fetch, step 6.9\n    // > If httpRequest's referrer is a URL, then append `Referer`/httpRequest's referrer, serialized\n    // >  and isomorphic encoded, to httpRequest's header list.\n    if (request[INTERNALS].referrer instanceof URL) {\n        headers.set(\"Referer\", request.referrer);\n    }\n    // HTTP-network-or-cache fetch step 2.11\n    if (!headers.has(\"User-Agent\")) {\n        headers.set(\"User-Agent\", \"node-fetch\");\n    }\n    // HTTP-network-or-cache fetch step 2.15\n    if (request.compress && !headers.has(\"Accept-Encoding\")) {\n        headers.set(\"Accept-Encoding\", \"gzip, deflate, br\");\n    }\n    let { agent } = request;\n    if (typeof agent === \"function\") {\n        agent = agent(parsedURL);\n    }\n    if (!headers.has(\"Connection\") && !agent) {\n        headers.set(\"Connection\", \"close\");\n    }\n    // HTTP-network fetch step 4.2\n    // chunked encoding is handled by Node.js\n    const search = getSearch(parsedURL);\n    // Pass the full URL directly to request(), but overwrite the following\n    // options:\n    const options = {\n        // Overwrite search to retain trailing ? (issue #776)\n        path: parsedURL.pathname + search,\n        // The following options are not expressed in the URL\n        method: request.method,\n        headers: headers[Symbol.for(\"nodejs.util.inspect.custom\")](),\n        insecureHTTPParser: request.insecureHTTPParser,\n        agent\n    };\n    return {\n        /** @type {URL} */ parsedURL,\n        options\n    };\n};\n/**\n * AbortError interface for cancelled requests\n */ class AbortError extends FetchBaseError {\n    constructor(message, type = \"aborted\"){\n        super(message, type);\n    }\n}\n/*! node-domexception. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> */ if (!globalThis.DOMException) {\n    try {\n        const { MessageChannel } = __webpack_require__(/*! worker_threads */ \"worker_threads\"), port = new MessageChannel().port1, ab = new ArrayBuffer();\n        port.postMessage(ab, [\n            ab,\n            ab\n        ]);\n    } catch (err) {\n        err.constructor.name === \"DOMException\" && (globalThis.DOMException = err.constructor);\n    }\n}\nvar nodeDomexception = globalThis.DOMException;\n/**\n * Index.js\n *\n * a request API compatible with window.fetch\n *\n * All spec algorithm step numbers are based on https://fetch.spec.whatwg.org/commit-snapshots/ae716822cb3a61843226cd090eefc6589446c1d2/.\n */ const supportedSchemas = new Set([\n    \"data:\",\n    \"http:\",\n    \"https:\"\n]);\n/**\n * Fetch function\n *\n * @param   {string | URL | import('./request').default} url - Absolute url or Request instance\n * @param   {*} [options_] - Fetch options\n * @return  {Promise<import('./response').default>}\n */ async function fetch(url, options_) {\n    return new Promise((resolve, reject)=>{\n        // Build request object\n        const request = new Request(url, options_);\n        const { parsedURL, options } = getNodeRequestOptions(request);\n        if (!supportedSchemas.has(parsedURL.protocol)) {\n            throw new TypeError(`node-fetch cannot load ${url}. URL scheme \"${parsedURL.protocol.replace(/:$/, \"\")}\" is not supported.`);\n        }\n        if (parsedURL.protocol === \"data:\") {\n            const data = dataUriToBuffer(request.url);\n            const response = new Response(data, {\n                headers: {\n                    \"Content-Type\": data.typeFull\n                }\n            });\n            resolve(response);\n            return;\n        }\n        // Wrap http.request into fetch\n        const send = (parsedURL.protocol === \"https:\" ? https : http).request;\n        const { signal } = request;\n        let response = null;\n        const abort = ()=>{\n            const error = new AbortError(\"The operation was aborted.\");\n            reject(error);\n            if (request.body && request.body instanceof Stream.Readable) {\n                request.body.destroy(error);\n            }\n            if (!response || !response.body) {\n                return;\n            }\n            response.body.emit(\"error\", error);\n        };\n        if (signal && signal.aborted) {\n            abort();\n            return;\n        }\n        const abortAndFinalize = ()=>{\n            abort();\n            finalize();\n        };\n        // Send request\n        const request_ = send(parsedURL.toString(), options);\n        if (signal) {\n            signal.addEventListener(\"abort\", abortAndFinalize);\n        }\n        const finalize = ()=>{\n            request_.abort();\n            if (signal) {\n                signal.removeEventListener(\"abort\", abortAndFinalize);\n            }\n        };\n        request_.on(\"error\", (error)=>{\n            reject(new FetchError(`request to ${request.url} failed, reason: ${error.message}`, \"system\", error));\n            finalize();\n        });\n        fixResponseChunkedTransferBadEnding(request_, (error)=>{\n            if (response && response.body) {\n                response.body.destroy(error);\n            }\n        });\n        /* c8 ignore next 18 */ if (process.version < \"v14\") {\n            // Before Node.js 14, pipeline() does not fully support async iterators and does not always\n            // properly handle when the socket close/end events are out of order.\n            request_.on(\"socket\", (s)=>{\n                let endedWithEventsCount;\n                s.prependListener(\"end\", ()=>{\n                    endedWithEventsCount = s._eventsCount;\n                });\n                s.prependListener(\"close\", (hadError)=>{\n                    // if end happened before close but the socket didn't emit an error, do it now\n                    if (response && endedWithEventsCount < s._eventsCount && !hadError) {\n                        const error = new Error(\"Premature close\");\n                        error.code = \"ERR_STREAM_PREMATURE_CLOSE\";\n                        response.body.emit(\"error\", error);\n                    }\n                });\n            });\n        }\n        request_.on(\"response\", (response_)=>{\n            request_.setTimeout(0);\n            const headers = fromRawHeaders(response_.rawHeaders);\n            // HTTP fetch step 5\n            if (isRedirect(response_.statusCode)) {\n                // HTTP fetch step 5.2\n                const location = headers.get(\"Location\");\n                // HTTP fetch step 5.3\n                let locationURL = null;\n                try {\n                    locationURL = location === null ? null : new URL(location, request.url);\n                } catch  {\n                    // error here can only be invalid URL in Location: header\n                    // do not throw when options.redirect == manual\n                    // let the user extract the errorneous redirect URL\n                    if (request.redirect !== \"manual\") {\n                        reject(new FetchError(`uri requested responds with an invalid redirect URL: ${location}`, \"invalid-redirect\"));\n                        finalize();\n                        return;\n                    }\n                }\n                // HTTP fetch step 5.5\n                switch(request.redirect){\n                    case \"error\":\n                        reject(new FetchError(`uri requested responds with a redirect, redirect mode is set to error: ${request.url}`, \"no-redirect\"));\n                        finalize();\n                        return;\n                    case \"manual\":\n                        break;\n                    case \"follow\":\n                        {\n                            // HTTP-redirect fetch step 2\n                            if (locationURL === null) {\n                                break;\n                            }\n                            // HTTP-redirect fetch step 5\n                            if (request.counter >= request.follow) {\n                                reject(new FetchError(`maximum redirect reached at: ${request.url}`, \"max-redirect\"));\n                                finalize();\n                                return;\n                            }\n                            // HTTP-redirect fetch step 6 (counter increment)\n                            // Create a new Request object.\n                            const requestOptions = {\n                                headers: new Headers(request.headers),\n                                follow: request.follow,\n                                counter: request.counter + 1,\n                                agent: request.agent,\n                                compress: request.compress,\n                                method: request.method,\n                                body: clone(request),\n                                signal: request.signal,\n                                size: request.size,\n                                referrer: request.referrer,\n                                referrerPolicy: request.referrerPolicy\n                            };\n                            // when forwarding sensitive headers like \"Authorization\",\n                            // \"WWW-Authenticate\", and \"Cookie\" to untrusted targets,\n                            // headers will be ignored when following a redirect to a domain\n                            // that is not a subdomain match or exact match of the initial domain.\n                            // For example, a redirect from \"foo.com\" to either \"foo.com\" or \"sub.foo.com\"\n                            // will forward the sensitive headers, but a redirect to \"bar.com\" will not.\n                            // headers will also be ignored when following a redirect to a domain using\n                            // a different protocol. For example, a redirect from \"https://foo.com\" to \"http://foo.com\"\n                            // will not forward the sensitive headers\n                            if (!isDomainOrSubdomain(request.url, locationURL) || !isSameProtocol(request.url, locationURL)) {\n                                for (const name of [\n                                    \"authorization\",\n                                    \"www-authenticate\",\n                                    \"cookie\",\n                                    \"cookie2\"\n                                ]){\n                                    requestOptions.headers.delete(name);\n                                }\n                            }\n                            // HTTP-redirect fetch step 9\n                            if (response_.statusCode !== 303 && request.body && options_.body instanceof Stream.Readable) {\n                                reject(new FetchError(\"Cannot follow redirect with body being a readable stream\", \"unsupported-redirect\"));\n                                finalize();\n                                return;\n                            }\n                            // HTTP-redirect fetch step 11\n                            if (response_.statusCode === 303 || (response_.statusCode === 301 || response_.statusCode === 302) && request.method === \"POST\") {\n                                requestOptions.method = \"GET\";\n                                requestOptions.body = undefined;\n                                requestOptions.headers.delete(\"content-length\");\n                            }\n                            // HTTP-redirect fetch step 14\n                            const responseReferrerPolicy = parseReferrerPolicyFromHeader(headers);\n                            if (responseReferrerPolicy) {\n                                requestOptions.referrerPolicy = responseReferrerPolicy;\n                            }\n                            // HTTP-redirect fetch step 15\n                            resolve(fetch(new Request(locationURL, requestOptions)));\n                            finalize();\n                            return;\n                        }\n                    default:\n                        return reject(new TypeError(`Redirect option '${request.redirect}' is not a valid value of RequestRedirect`));\n                }\n            }\n            // Prepare response\n            if (signal) {\n                response_.once(\"end\", ()=>{\n                    signal.removeEventListener(\"abort\", abortAndFinalize);\n                });\n            }\n            let body = Stream.pipeline(response_, new Stream.PassThrough(), (error)=>{\n                if (error) {\n                    reject(error);\n                }\n            });\n            // see https://github.com/nodejs/node/pull/29376\n            /* c8 ignore next 3 */ if (process.version < \"v12.10\") {\n                response_.on(\"aborted\", abortAndFinalize);\n            }\n            const responseOptions = {\n                url: request.url,\n                status: response_.statusCode,\n                statusText: response_.statusMessage,\n                headers,\n                size: request.size,\n                counter: request.counter,\n                highWaterMark: request.highWaterMark\n            };\n            // HTTP-network fetch step 12.1.1.3\n            const codings = headers.get(\"Content-Encoding\");\n            // HTTP-network fetch step 12.1.1.4: handle content codings\n            // in following scenarios we ignore compression support\n            // 1. compression support is disabled\n            // 2. HEAD request\n            // 3. no Content-Encoding header\n            // 4. no content response (204)\n            // 5. content not modified response (304)\n            if (!request.compress || request.method === \"HEAD\" || codings === null || response_.statusCode === 204 || response_.statusCode === 304) {\n                response = new Response(body, responseOptions);\n                resolve(response);\n                return;\n            }\n            // For Node v6+\n            // Be less strict when decoding compressed responses, since sometimes\n            // servers send slightly invalid responses that are still accepted\n            // by common browsers.\n            // Always using Z_SYNC_FLUSH is what cURL does.\n            const zlibOptions = {\n                flush: zlib.Z_SYNC_FLUSH,\n                finishFlush: zlib.Z_SYNC_FLUSH\n            };\n            // For gzip\n            if (codings === \"gzip\" || codings === \"x-gzip\") {\n                body = Stream.pipeline(body, zlib.createGunzip(zlibOptions), (error)=>{\n                    if (error) {\n                        reject(error);\n                    }\n                });\n                response = new Response(body, responseOptions);\n                resolve(response);\n                return;\n            }\n            // For deflate\n            if (codings === \"deflate\" || codings === \"x-deflate\") {\n                // Handle the infamous raw deflate response from old servers\n                // a hack for old IIS and Apache servers\n                const raw = Stream.pipeline(response_, new Stream.PassThrough(), (error)=>{\n                    if (error) {\n                        reject(error);\n                    }\n                });\n                raw.once(\"data\", (chunk)=>{\n                    // See http://stackoverflow.com/questions/37519828\n                    if ((chunk[0] & 0x0F) === 0x08) {\n                        body = Stream.pipeline(body, zlib.createInflate(), (error)=>{\n                            if (error) {\n                                reject(error);\n                            }\n                        });\n                    } else {\n                        body = Stream.pipeline(body, zlib.createInflateRaw(), (error)=>{\n                            if (error) {\n                                reject(error);\n                            }\n                        });\n                    }\n                    response = new Response(body, responseOptions);\n                    resolve(response);\n                });\n                raw.once(\"end\", ()=>{\n                    // Some old IIS servers return zero-length OK deflate responses, so\n                    // 'data' is never emitted. See https://github.com/node-fetch/node-fetch/pull/903\n                    if (!response) {\n                        response = new Response(body, responseOptions);\n                        resolve(response);\n                    }\n                });\n                return;\n            }\n            // For br\n            if (codings === \"br\") {\n                body = Stream.pipeline(body, zlib.createBrotliDecompress(), (error)=>{\n                    if (error) {\n                        reject(error);\n                    }\n                });\n                response = new Response(body, responseOptions);\n                resolve(response);\n                return;\n            }\n            // Otherwise, use response as-is\n            response = new Response(body, responseOptions);\n            resolve(response);\n        });\n        // eslint-disable-next-line promise/prefer-await-to-then\n        writeToStream(request_, request).catch(reject);\n    });\n}\nfunction fixResponseChunkedTransferBadEnding(request, errorCallback) {\n    const LAST_CHUNK = node_buffer.Buffer.from(\"0\\r\\n\\r\\n\");\n    let isChunkedTransfer = false;\n    let properLastChunkReceived = false;\n    let previousChunk;\n    request.on(\"response\", (response)=>{\n        const { headers } = response;\n        isChunkedTransfer = headers[\"transfer-encoding\"] === \"chunked\" && !headers[\"content-length\"];\n    });\n    request.on(\"socket\", (socket)=>{\n        const onSocketClose = ()=>{\n            if (isChunkedTransfer && !properLastChunkReceived) {\n                const error = new Error(\"Premature close\");\n                error.code = \"ERR_STREAM_PREMATURE_CLOSE\";\n                errorCallback(error);\n            }\n        };\n        const onData = (buf)=>{\n            properLastChunkReceived = node_buffer.Buffer.compare(buf.slice(-5), LAST_CHUNK) === 0;\n            // Sometimes final 0-length chunk and end of message code are in separate packets\n            if (!properLastChunkReceived && previousChunk) {\n                properLastChunkReceived = node_buffer.Buffer.compare(previousChunk.slice(-3), LAST_CHUNK.slice(0, 3)) === 0 && node_buffer.Buffer.compare(buf.slice(-2), LAST_CHUNK.slice(3)) === 0;\n            }\n            previousChunk = buf;\n        };\n        socket.prependListener(\"close\", onSocketClose);\n        socket.on(\"data\", onData);\n        request.on(\"close\", ()=>{\n            socket.removeListener(\"close\", onSocketClose);\n            socket.removeListener(\"data\", onData);\n        });\n    });\n}\n/**\n * @author Toru Nagashima <https://github.com/mysticatea>\n * @copyright 2015 Toru Nagashima. All rights reserved.\n * See LICENSE file in root directory for full license.\n */ /**\n * @typedef {object} PrivateData\n * @property {EventTarget} eventTarget The event target.\n * @property {{type:string}} event The original event object.\n * @property {number} eventPhase The current event phase.\n * @property {EventTarget|null} currentTarget The current event target.\n * @property {boolean} canceled The flag to prevent default.\n * @property {boolean} stopped The flag to stop propagation.\n * @property {boolean} immediateStopped The flag to stop propagation immediately.\n * @property {Function|null} passiveListener The listener if the current listener is passive. Otherwise this is null.\n * @property {number} timeStamp The unix time.\n * @private\n */ /**\n * Private data for event wrappers.\n * @type {WeakMap<Event, PrivateData>}\n * @private\n */ const privateData = new WeakMap();\n/**\n * Cache for wrapper classes.\n * @type {WeakMap<Object, Function>}\n * @private\n */ const wrappers = new WeakMap();\n/**\n * Get private data.\n * @param {Event} event The event object to get private data.\n * @returns {PrivateData} The private data of the event.\n * @private\n */ function pd(event) {\n    const retv = privateData.get(event);\n    console.assert(retv != null, \"'this' is expected an Event object, but got\", event);\n    return retv;\n}\n/**\n * https://dom.spec.whatwg.org/#set-the-canceled-flag\n * @param data {PrivateData} private data.\n */ function setCancelFlag(data) {\n    if (data.passiveListener != null) {\n        if (typeof console !== \"undefined\" && typeof console.error === \"function\") {\n            console.error(\"Unable to preventDefault inside passive event listener invocation.\", data.passiveListener);\n        }\n        return;\n    }\n    if (!data.event.cancelable) {\n        return;\n    }\n    data.canceled = true;\n    if (typeof data.event.preventDefault === \"function\") {\n        data.event.preventDefault();\n    }\n}\n/**\n * @see https://dom.spec.whatwg.org/#interface-event\n * @private\n */ /**\n * The event wrapper.\n * @constructor\n * @param {EventTarget} eventTarget The event target of this dispatching.\n * @param {Event|{type:string}} event The original event to wrap.\n */ function Event(eventTarget, event) {\n    privateData.set(this, {\n        eventTarget,\n        event,\n        eventPhase: 2,\n        currentTarget: eventTarget,\n        canceled: false,\n        stopped: false,\n        immediateStopped: false,\n        passiveListener: null,\n        timeStamp: event.timeStamp || Date.now()\n    });\n    // https://heycam.github.io/webidl/#Unforgeable\n    Object.defineProperty(this, \"isTrusted\", {\n        value: false,\n        enumerable: true\n    });\n    // Define accessors\n    const keys = Object.keys(event);\n    for(let i = 0; i < keys.length; ++i){\n        const key = keys[i];\n        if (!(key in this)) {\n            Object.defineProperty(this, key, defineRedirectDescriptor(key));\n        }\n    }\n}\n// Should be enumerable, but class methods are not enumerable.\nEvent.prototype = {\n    /**\n     * The type of this event.\n     * @type {string}\n     */ get type () {\n        return pd(this).event.type;\n    },\n    /**\n     * The target of this event.\n     * @type {EventTarget}\n     */ get target () {\n        return pd(this).eventTarget;\n    },\n    /**\n     * The target of this event.\n     * @type {EventTarget}\n     */ get currentTarget () {\n        return pd(this).currentTarget;\n    },\n    /**\n     * @returns {EventTarget[]} The composed path of this event.\n     */ composedPath () {\n        const currentTarget = pd(this).currentTarget;\n        if (currentTarget == null) {\n            return [];\n        }\n        return [\n            currentTarget\n        ];\n    },\n    /**\n     * Constant of NONE.\n     * @type {number}\n     */ get NONE () {\n        return 0;\n    },\n    /**\n     * Constant of CAPTURING_PHASE.\n     * @type {number}\n     */ get CAPTURING_PHASE () {\n        return 1;\n    },\n    /**\n     * Constant of AT_TARGET.\n     * @type {number}\n     */ get AT_TARGET () {\n        return 2;\n    },\n    /**\n     * Constant of BUBBLING_PHASE.\n     * @type {number}\n     */ get BUBBLING_PHASE () {\n        return 3;\n    },\n    /**\n     * The target of this event.\n     * @type {number}\n     */ get eventPhase () {\n        return pd(this).eventPhase;\n    },\n    /**\n     * Stop event bubbling.\n     * @returns {void}\n     */ stopPropagation () {\n        const data = pd(this);\n        data.stopped = true;\n        if (typeof data.event.stopPropagation === \"function\") {\n            data.event.stopPropagation();\n        }\n    },\n    /**\n     * Stop event bubbling.\n     * @returns {void}\n     */ stopImmediatePropagation () {\n        const data = pd(this);\n        data.stopped = true;\n        data.immediateStopped = true;\n        if (typeof data.event.stopImmediatePropagation === \"function\") {\n            data.event.stopImmediatePropagation();\n        }\n    },\n    /**\n     * The flag to be bubbling.\n     * @type {boolean}\n     */ get bubbles () {\n        return Boolean(pd(this).event.bubbles);\n    },\n    /**\n     * The flag to be cancelable.\n     * @type {boolean}\n     */ get cancelable () {\n        return Boolean(pd(this).event.cancelable);\n    },\n    /**\n     * Cancel this event.\n     * @returns {void}\n     */ preventDefault () {\n        setCancelFlag(pd(this));\n    },\n    /**\n     * The flag to indicate cancellation state.\n     * @type {boolean}\n     */ get defaultPrevented () {\n        return pd(this).canceled;\n    },\n    /**\n     * The flag to be composed.\n     * @type {boolean}\n     */ get composed () {\n        return Boolean(pd(this).event.composed);\n    },\n    /**\n     * The unix time of this event.\n     * @type {number}\n     */ get timeStamp () {\n        return pd(this).timeStamp;\n    },\n    /**\n     * The target of this event.\n     * @type {EventTarget}\n     * @deprecated\n     */ get srcElement () {\n        return pd(this).eventTarget;\n    },\n    /**\n     * The flag to stop event bubbling.\n     * @type {boolean}\n     * @deprecated\n     */ get cancelBubble () {\n        return pd(this).stopped;\n    },\n    set cancelBubble (value){\n        if (!value) {\n            return;\n        }\n        const data = pd(this);\n        data.stopped = true;\n        if (typeof data.event.cancelBubble === \"boolean\") {\n            data.event.cancelBubble = true;\n        }\n    },\n    /**\n     * The flag to indicate cancellation state.\n     * @type {boolean}\n     * @deprecated\n     */ get returnValue () {\n        return !pd(this).canceled;\n    },\n    set returnValue (value){\n        if (!value) {\n            setCancelFlag(pd(this));\n        }\n    },\n    /**\n     * Initialize this event object. But do nothing under event dispatching.\n     * @param {string} type The event type.\n     * @param {boolean} [bubbles=false] The flag to be possible to bubble up.\n     * @param {boolean} [cancelable=false] The flag to be possible to cancel.\n     * @deprecated\n     */ initEvent () {\n    // Do nothing.\n    }\n};\n// `constructor` is not enumerable.\nObject.defineProperty(Event.prototype, \"constructor\", {\n    value: Event,\n    configurable: true,\n    writable: true\n});\n// Ensure `event instanceof window.Event` is `true`.\nif (false) {}\n/**\n * Get the property descriptor to redirect a given property.\n * @param {string} key Property name to define property descriptor.\n * @returns {PropertyDescriptor} The property descriptor to redirect the property.\n * @private\n */ function defineRedirectDescriptor(key) {\n    return {\n        get () {\n            return pd(this).event[key];\n        },\n        set (value1) {\n            pd(this).event[key] = value1;\n        },\n        configurable: true,\n        enumerable: true\n    };\n}\n/**\n * Get the property descriptor to call a given method property.\n * @param {string} key Property name to define property descriptor.\n * @returns {PropertyDescriptor} The property descriptor to call the method property.\n * @private\n */ function defineCallDescriptor(key) {\n    return {\n        value () {\n            const event = pd(this).event;\n            return event[key].apply(event, arguments);\n        },\n        configurable: true,\n        enumerable: true\n    };\n}\n/**\n * Define new wrapper class.\n * @param {Function} BaseEvent The base wrapper class.\n * @param {Object} proto The prototype of the original event.\n * @returns {Function} The defined wrapper class.\n * @private\n */ function defineWrapper(BaseEvent, proto) {\n    const keys = Object.keys(proto);\n    if (keys.length === 0) {\n        return BaseEvent;\n    }\n    /** CustomEvent */ function CustomEvent(eventTarget, event) {\n        BaseEvent.call(this, eventTarget, event);\n    }\n    CustomEvent.prototype = Object.create(BaseEvent.prototype, {\n        constructor: {\n            value: CustomEvent,\n            configurable: true,\n            writable: true\n        }\n    });\n    // Define accessors.\n    for(let i = 0; i < keys.length; ++i){\n        const key = keys[i];\n        if (!(key in BaseEvent.prototype)) {\n            const descriptor = Object.getOwnPropertyDescriptor(proto, key);\n            const isFunc = typeof descriptor.value === \"function\";\n            Object.defineProperty(CustomEvent.prototype, key, isFunc ? defineCallDescriptor(key) : defineRedirectDescriptor(key));\n        }\n    }\n    return CustomEvent;\n}\n/**\n * Get the wrapper class of a given prototype.\n * @param {Object} proto The prototype of the original event to get its wrapper.\n * @returns {Function} The wrapper class.\n * @private\n */ function getWrapper(proto) {\n    if (proto == null || proto === Object.prototype) {\n        return Event;\n    }\n    let wrapper = wrappers.get(proto);\n    if (wrapper == null) {\n        wrapper = defineWrapper(getWrapper(Object.getPrototypeOf(proto)), proto);\n        wrappers.set(proto, wrapper);\n    }\n    return wrapper;\n}\n/**\n * Wrap a given event to management a dispatching.\n * @param {EventTarget} eventTarget The event target of this dispatching.\n * @param {Object} event The event to wrap.\n * @returns {Event} The wrapper instance.\n * @private\n */ function wrapEvent(eventTarget, event) {\n    const Wrapper = getWrapper(Object.getPrototypeOf(event));\n    return new Wrapper(eventTarget, event);\n}\n/**\n * Get the immediateStopped flag of a given event.\n * @param {Event} event The event to get.\n * @returns {boolean} The flag to stop propagation immediately.\n * @private\n */ function isStopped(event) {\n    return pd(event).immediateStopped;\n}\n/**\n * Set the current event phase of a given event.\n * @param {Event} event The event to set current target.\n * @param {number} eventPhase New event phase.\n * @returns {void}\n * @private\n */ function setEventPhase(event, eventPhase) {\n    pd(event).eventPhase = eventPhase;\n}\n/**\n * Set the current target of a given event.\n * @param {Event} event The event to set current target.\n * @param {EventTarget|null} currentTarget New current target.\n * @returns {void}\n * @private\n */ function setCurrentTarget(event, currentTarget) {\n    pd(event).currentTarget = currentTarget;\n}\n/**\n * Set a passive listener of a given event.\n * @param {Event} event The event to set current target.\n * @param {Function|null} passiveListener New passive listener.\n * @returns {void}\n * @private\n */ function setPassiveListener(event, passiveListener) {\n    pd(event).passiveListener = passiveListener;\n}\n/**\n * @typedef {object} ListenerNode\n * @property {Function} listener\n * @property {1|2|3} listenerType\n * @property {boolean} passive\n * @property {boolean} once\n * @property {ListenerNode|null} next\n * @private\n */ /**\n * @type {WeakMap<object, Map<string, ListenerNode>>}\n * @private\n */ const listenersMap = new WeakMap();\n// Listener types\nconst CAPTURE = 1;\nconst BUBBLE = 2;\nconst ATTRIBUTE = 3;\n/**\n * Check whether a given value is an object or not.\n * @param {any} x The value to check.\n * @returns {boolean} `true` if the value is an object.\n */ function isObject(x) {\n    return x !== null && typeof x === \"object\" //eslint-disable-line no-restricted-syntax\n    ;\n}\n/**\n * Get listeners.\n * @param {EventTarget} eventTarget The event target to get.\n * @returns {Map<string, ListenerNode>} The listeners.\n * @private\n */ function getListeners(eventTarget) {\n    const listeners = listenersMap.get(eventTarget);\n    if (listeners == null) {\n        throw new TypeError(\"'this' is expected an EventTarget object, but got another value.\");\n    }\n    return listeners;\n}\n/**\n * Get the property descriptor for the event attribute of a given event.\n * @param {string} eventName The event name to get property descriptor.\n * @returns {PropertyDescriptor} The property descriptor.\n * @private\n */ function defineEventAttributeDescriptor(eventName) {\n    return {\n        get () {\n            const listeners = getListeners(this);\n            let node = listeners.get(eventName);\n            while(node != null){\n                if (node.listenerType === ATTRIBUTE) {\n                    return node.listener;\n                }\n                node = node.next;\n            }\n            return null;\n        },\n        set (listener) {\n            if (typeof listener !== \"function\" && !isObject(listener)) {\n                listener = null; // eslint-disable-line no-param-reassign\n            }\n            const listeners = getListeners(this);\n            // Traverse to the tail while removing old value.\n            let prev = null;\n            let node = listeners.get(eventName);\n            while(node != null){\n                if (node.listenerType === ATTRIBUTE) {\n                    // Remove old value.\n                    if (prev !== null) {\n                        prev.next = node.next;\n                    } else if (node.next !== null) {\n                        listeners.set(eventName, node.next);\n                    } else {\n                        listeners.delete(eventName);\n                    }\n                } else {\n                    prev = node;\n                }\n                node = node.next;\n            }\n            // Add new value.\n            if (listener !== null) {\n                const newNode = {\n                    listener,\n                    listenerType: ATTRIBUTE,\n                    passive: false,\n                    once: false,\n                    next: null\n                };\n                if (prev === null) {\n                    listeners.set(eventName, newNode);\n                } else {\n                    prev.next = newNode;\n                }\n            }\n        },\n        configurable: true,\n        enumerable: true\n    };\n}\n/**\n * Define an event attribute (e.g. `eventTarget.onclick`).\n * @param {Object} eventTargetPrototype The event target prototype to define an event attrbite.\n * @param {string} eventName The event name to define.\n * @returns {void}\n */ function defineEventAttribute(eventTargetPrototype, eventName) {\n    Object.defineProperty(eventTargetPrototype, `on${eventName}`, defineEventAttributeDescriptor(eventName));\n}\n/**\n * Define a custom EventTarget with event attributes.\n * @param {string[]} eventNames Event names for event attributes.\n * @returns {EventTarget} The custom EventTarget.\n * @private\n */ function defineCustomEventTarget(eventNames) {\n    /** CustomEventTarget */ function CustomEventTarget() {\n        EventTarget.call(this);\n    }\n    CustomEventTarget.prototype = Object.create(EventTarget.prototype, {\n        constructor: {\n            value: CustomEventTarget,\n            configurable: true,\n            writable: true\n        }\n    });\n    for(let i = 0; i < eventNames.length; ++i){\n        defineEventAttribute(CustomEventTarget.prototype, eventNames[i]);\n    }\n    return CustomEventTarget;\n}\n/**\n * EventTarget.\n *\n * - This is constructor if no arguments.\n * - This is a function which returns a CustomEventTarget constructor if there are arguments.\n *\n * For example:\n *\n *     class A extends EventTarget {}\n *     class B extends EventTarget(\"message\") {}\n *     class C extends EventTarget(\"message\", \"error\") {}\n *     class D extends EventTarget([\"message\", \"error\"]) {}\n */ function EventTarget() {\n    /*eslint-disable consistent-return */ if (this instanceof EventTarget) {\n        listenersMap.set(this, new Map());\n        return;\n    }\n    if (arguments.length === 1 && Array.isArray(arguments[0])) {\n        return defineCustomEventTarget(arguments[0]);\n    }\n    if (arguments.length > 0) {\n        const types = new Array(arguments.length);\n        for(let i = 0; i < arguments.length; ++i){\n            types[i] = arguments[i];\n        }\n        return defineCustomEventTarget(types);\n    }\n    throw new TypeError(\"Cannot call a class as a function\");\n/*eslint-enable consistent-return */ }\n// Should be enumerable, but class methods are not enumerable.\nEventTarget.prototype = {\n    /**\n     * Add a given listener to this event target.\n     * @param {string} eventName The event name to add.\n     * @param {Function} listener The listener to add.\n     * @param {boolean|{capture?:boolean,passive?:boolean,once?:boolean}} [options] The options for this listener.\n     * @returns {void}\n     */ addEventListener (eventName, listener, options) {\n        if (listener == null) {\n            return;\n        }\n        if (typeof listener !== \"function\" && !isObject(listener)) {\n            throw new TypeError(\"'listener' should be a function or an object.\");\n        }\n        const listeners = getListeners(this);\n        const optionsIsObj = isObject(options);\n        const capture = optionsIsObj ? Boolean(options.capture) : Boolean(options);\n        const listenerType = capture ? CAPTURE : BUBBLE;\n        const newNode = {\n            listener,\n            listenerType,\n            passive: optionsIsObj && Boolean(options.passive),\n            once: optionsIsObj && Boolean(options.once),\n            next: null\n        };\n        // Set it as the first node if the first node is null.\n        let node = listeners.get(eventName);\n        if (node === undefined) {\n            listeners.set(eventName, newNode);\n            return;\n        }\n        // Traverse to the tail while checking duplication..\n        let prev = null;\n        while(node != null){\n            if (node.listener === listener && node.listenerType === listenerType) {\n                // Should ignore duplication.\n                return;\n            }\n            prev = node;\n            node = node.next;\n        }\n        // Add it.\n        prev.next = newNode;\n    },\n    /**\n     * Remove a given listener from this event target.\n     * @param {string} eventName The event name to remove.\n     * @param {Function} listener The listener to remove.\n     * @param {boolean|{capture?:boolean,passive?:boolean,once?:boolean}} [options] The options for this listener.\n     * @returns {void}\n     */ removeEventListener (eventName, listener, options) {\n        if (listener == null) {\n            return;\n        }\n        const listeners = getListeners(this);\n        const capture = isObject(options) ? Boolean(options.capture) : Boolean(options);\n        const listenerType = capture ? CAPTURE : BUBBLE;\n        let prev = null;\n        let node = listeners.get(eventName);\n        while(node != null){\n            if (node.listener === listener && node.listenerType === listenerType) {\n                if (prev !== null) {\n                    prev.next = node.next;\n                } else if (node.next !== null) {\n                    listeners.set(eventName, node.next);\n                } else {\n                    listeners.delete(eventName);\n                }\n                return;\n            }\n            prev = node;\n            node = node.next;\n        }\n    },\n    /**\n     * Dispatch a given event.\n     * @param {Event|{type:string}} event The event to dispatch.\n     * @returns {boolean} `false` if canceled.\n     */ dispatchEvent (event) {\n        if (event == null || typeof event.type !== \"string\") {\n            throw new TypeError('\"event.type\" should be a string.');\n        }\n        // If listeners aren't registered, terminate.\n        const listeners = getListeners(this);\n        const eventName = event.type;\n        let node = listeners.get(eventName);\n        if (node == null) {\n            return true;\n        }\n        // Since we cannot rewrite several properties, so wrap object.\n        const wrappedEvent = wrapEvent(this, event);\n        // This doesn't process capturing phase and bubbling phase.\n        // This isn't participating in a tree.\n        let prev = null;\n        while(node != null){\n            // Remove this listener if it's once\n            if (node.once) {\n                if (prev !== null) {\n                    prev.next = node.next;\n                } else if (node.next !== null) {\n                    listeners.set(eventName, node.next);\n                } else {\n                    listeners.delete(eventName);\n                }\n            } else {\n                prev = node;\n            }\n            // Call this listener\n            setPassiveListener(wrappedEvent, node.passive ? node.listener : null);\n            if (typeof node.listener === \"function\") {\n                try {\n                    node.listener.call(this, wrappedEvent);\n                } catch (err) {\n                    if (typeof console !== \"undefined\" && typeof console.error === \"function\") {\n                        console.error(err);\n                    }\n                }\n            } else if (node.listenerType !== ATTRIBUTE && typeof node.listener.handleEvent === \"function\") {\n                node.listener.handleEvent(wrappedEvent);\n            }\n            // Break if `event.stopImmediatePropagation` was called.\n            if (isStopped(wrappedEvent)) {\n                break;\n            }\n            node = node.next;\n        }\n        setPassiveListener(wrappedEvent, null);\n        setEventPhase(wrappedEvent, 0);\n        setCurrentTarget(wrappedEvent, null);\n        return !wrappedEvent.defaultPrevented;\n    }\n};\n// `constructor` is not enumerable.\nObject.defineProperty(EventTarget.prototype, \"constructor\", {\n    value: EventTarget,\n    configurable: true,\n    writable: true\n});\n// Ensure `eventTarget instanceof window.EventTarget` is `true`.\nif (false) {}\n/**\n * @author Toru Nagashima <https://github.com/mysticatea>\n * See LICENSE file in root directory for full license.\n */ /**\n * The signal class.\n * @see https://dom.spec.whatwg.org/#abortsignal\n */ class AbortSignal extends EventTarget {\n    /**\n     * AbortSignal cannot be constructed directly.\n     */ constructor(){\n        super();\n        throw new TypeError(\"AbortSignal cannot be constructed directly\");\n    }\n    /**\n     * Returns `true` if this `AbortSignal`'s `AbortController` has signaled to abort, and `false` otherwise.\n     */ get aborted() {\n        const aborted = abortedFlags.get(this);\n        if (typeof aborted !== \"boolean\") {\n            throw new TypeError(`Expected 'this' to be an 'AbortSignal' object, but got ${this === null ? \"null\" : typeof this}`);\n        }\n        return aborted;\n    }\n}\ndefineEventAttribute(AbortSignal.prototype, \"abort\");\n/**\n * Create an AbortSignal object.\n */ function createAbortSignal() {\n    const signal = Object.create(AbortSignal.prototype);\n    EventTarget.call(signal);\n    abortedFlags.set(signal, false);\n    return signal;\n}\n/**\n * Abort a given signal.\n */ function abortSignal(signal) {\n    if (abortedFlags.get(signal) !== false) {\n        return;\n    }\n    abortedFlags.set(signal, true);\n    signal.dispatchEvent({\n        type: \"abort\"\n    });\n}\n/**\n * Aborted flag for each instances.\n */ const abortedFlags = new WeakMap();\n// Properties should be enumerable.\nObject.defineProperties(AbortSignal.prototype, {\n    aborted: {\n        enumerable: true\n    }\n});\n// `toString()` should return `\"[object AbortSignal]\"`\nif (typeof Symbol === \"function\" && typeof Symbol.toStringTag === \"symbol\") {\n    Object.defineProperty(AbortSignal.prototype, Symbol.toStringTag, {\n        configurable: true,\n        value: \"AbortSignal\"\n    });\n}\n/**\n * The AbortController.\n * @see https://dom.spec.whatwg.org/#abortcontroller\n */ class AbortController$1 {\n    /**\n     * Initialize this controller.\n     */ constructor(){\n        signals.set(this, createAbortSignal());\n    }\n    /**\n     * Returns the `AbortSignal` object associated with this object.\n     */ get signal() {\n        return getSignal(this);\n    }\n    /**\n     * Abort and signal to any observers that the associated activity is to be aborted.\n     */ abort() {\n        abortSignal(getSignal(this));\n    }\n}\n/**\n * Associated signals.\n */ const signals = new WeakMap();\n/**\n * Get the associated signal of a given controller.\n */ function getSignal(controller) {\n    const signal = signals.get(controller);\n    if (signal == null) {\n        throw new TypeError(`Expected 'this' to be an 'AbortController' object, but got ${controller === null ? \"null\" : typeof controller}`);\n    }\n    return signal;\n}\n// Properties should be enumerable.\nObject.defineProperties(AbortController$1.prototype, {\n    signal: {\n        enumerable: true\n    },\n    abort: {\n        enumerable: true\n    }\n});\nif (typeof Symbol === \"function\" && typeof Symbol.toStringTag === \"symbol\") {\n    Object.defineProperty(AbortController$1.prototype, Symbol.toStringTag, {\n        configurable: true,\n        value: \"AbortController\"\n    });\n}\nexports.AbortController = AbortController$1;\nexports.AbortError = AbortError;\nexports.FetchError = FetchError;\nexports.File = File$1;\nexports.FormData = FormData;\nexports.Headers = Headers;\nexports.Request = Request;\nexports.Response = Response;\nexports._Blob = _Blob$1;\nexports.fetch = fetch;\nexports.isRedirect = isRedirect;\nexports.nodeDomexception = nodeDomexception;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-fetch-native/dist/shared/node-fetch-native.8afd3fea.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-fetch-native/lib/index.cjs":
/*!******************************************************!*\
  !*** ./node_modules/node-fetch-native/lib/index.cjs ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const nodeFetch = __webpack_require__(/*! ../dist/index.cjs */ \"(rsc)/./node_modules/node-fetch-native/dist/index.cjs\");\nfunction fetch(input, options) {\n    return nodeFetch.fetch(input, options);\n}\nfor(const key in nodeFetch){\n    fetch[key] = nodeFetch[key];\n}\nmodule.exports = fetch;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZS1mZXRjaC1uYXRpdmUvbGliL2luZGV4LmNqcyIsIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxZQUFZQyxtQkFBT0EsQ0FBQyxnRkFBbUI7QUFFN0MsU0FBU0MsTUFBT0MsS0FBSyxFQUFFQyxPQUFPO0lBQzVCLE9BQU9KLFVBQVVFLEtBQUssQ0FBQ0MsT0FBT0M7QUFDaEM7QUFFQSxJQUFLLE1BQU1DLE9BQU9MLFVBQVc7SUFDM0JFLEtBQUssQ0FBQ0csSUFBSSxHQUFHTCxTQUFTLENBQUNLLElBQUk7QUFDN0I7QUFFQUMsT0FBT0MsT0FBTyxHQUFHTCIsInNvdXJjZXMiOlsid2VicGFjazovL3ZpZGVvLXN0cmVhbWluZy8uL25vZGVfbW9kdWxlcy9ub2RlLWZldGNoLW5hdGl2ZS9saWIvaW5kZXguY2pzPzA3NGYiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3Qgbm9kZUZldGNoID0gcmVxdWlyZShcIi4uL2Rpc3QvaW5kZXguY2pzXCIpO1xuXG5mdW5jdGlvbiBmZXRjaCAoaW5wdXQsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIG5vZGVGZXRjaC5mZXRjaChpbnB1dCwgb3B0aW9ucyk7XG59XG5cbmZvciAoY29uc3Qga2V5IGluIG5vZGVGZXRjaCkge1xuICBmZXRjaFtrZXldID0gbm9kZUZldGNoW2tleV07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZmV0Y2g7XG4iXSwibmFtZXMiOlsibm9kZUZldGNoIiwicmVxdWlyZSIsImZldGNoIiwiaW5wdXQiLCJvcHRpb25zIiwia2V5IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-fetch-native/lib/index.cjs\n");

/***/ })

};
;