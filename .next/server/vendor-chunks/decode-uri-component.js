"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/decode-uri-component";
exports.ids = ["vendor-chunks/decode-uri-component"];
exports.modules = {

/***/ "(ssr)/./node_modules/decode-uri-component/index.js":
/*!****************************************************!*\
  !*** ./node_modules/decode-uri-component/index.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ decodeUriComponent)\n/* harmony export */ });\nconst token = \"%[a-f0-9]{2}\";\nconst singleMatcher = new RegExp(\"(\" + token + \")|([^%]+?)\", \"gi\");\nconst multiMatcher = new RegExp(\"(\" + token + \")+\", \"gi\");\nfunction decodeComponents(components, split) {\n    try {\n        // Try to decode the entire string first\n        return [\n            decodeURIComponent(components.join(\"\"))\n        ];\n    } catch  {\n    // Do nothing\n    }\n    if (components.length === 1) {\n        return components;\n    }\n    split = split || 1;\n    // Split the array in 2 parts\n    const left = components.slice(0, split);\n    const right = components.slice(split);\n    return Array.prototype.concat.call([], decodeComponents(left), decodeComponents(right));\n}\nfunction decode(input) {\n    try {\n        return decodeURIComponent(input);\n    } catch  {\n        let tokens = input.match(singleMatcher) || [];\n        for(let i = 1; i < tokens.length; i++){\n            input = decodeComponents(tokens, i).join(\"\");\n            tokens = input.match(singleMatcher) || [];\n        }\n        return input;\n    }\n}\nfunction customDecodeURIComponent(input) {\n    // Keep track of all the replacements and prefill the map with the `BOM`\n    const replaceMap = {\n        \"%FE%FF\": \"��\",\n        \"%FF%FE\": \"��\"\n    };\n    let match = multiMatcher.exec(input);\n    while(match){\n        try {\n            // Decode as big chunks as possible\n            replaceMap[match[0]] = decodeURIComponent(match[0]);\n        } catch  {\n            const result = decode(match[0]);\n            if (result !== match[0]) {\n                replaceMap[match[0]] = result;\n            }\n        }\n        match = multiMatcher.exec(input);\n    }\n    // Add `%C2` at the end of the map to make sure it does not replace the combinator before everything else\n    replaceMap[\"%C2\"] = \"�\";\n    const entries = Object.keys(replaceMap);\n    for (const key of entries){\n        // Replace all decoded components\n        input = input.replace(new RegExp(key, \"g\"), replaceMap[key]);\n    }\n    return input;\n}\nfunction decodeUriComponent(encodedURI) {\n    if (typeof encodedURI !== \"string\") {\n        throw new TypeError(\"Expected `encodedURI` to be of type `string`, got `\" + typeof encodedURI + \"`\");\n    }\n    try {\n        // Try the built in decoder first\n        return decodeURIComponent(encodedURI);\n    } catch  {\n        // Fallback to a more advanced decoder\n        return customDecodeURIComponent(encodedURI);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZGVjb2RlLXVyaS1jb21wb25lbnQvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE1BQU1BLFFBQVE7QUFDZCxNQUFNQyxnQkFBZ0IsSUFBSUMsT0FBTyxNQUFNRixRQUFRLGNBQWM7QUFDN0QsTUFBTUcsZUFBZSxJQUFJRCxPQUFPLE1BQU1GLFFBQVEsTUFBTTtBQUVwRCxTQUFTSSxpQkFBaUJDLFVBQVUsRUFBRUMsS0FBSztJQUMxQyxJQUFJO1FBQ0gsd0NBQXdDO1FBQ3hDLE9BQU87WUFBQ0MsbUJBQW1CRixXQUFXRyxJQUFJLENBQUM7U0FBSztJQUNqRCxFQUFFLE9BQU07SUFDUCxhQUFhO0lBQ2Q7SUFFQSxJQUFJSCxXQUFXSSxNQUFNLEtBQUssR0FBRztRQUM1QixPQUFPSjtJQUNSO0lBRUFDLFFBQVFBLFNBQVM7SUFFakIsNkJBQTZCO0lBQzdCLE1BQU1JLE9BQU9MLFdBQVdNLEtBQUssQ0FBQyxHQUFHTDtJQUNqQyxNQUFNTSxRQUFRUCxXQUFXTSxLQUFLLENBQUNMO0lBRS9CLE9BQU9PLE1BQU1DLFNBQVMsQ0FBQ0MsTUFBTSxDQUFDQyxJQUFJLENBQUMsRUFBRSxFQUFFWixpQkFBaUJNLE9BQU9OLGlCQUFpQlE7QUFDakY7QUFFQSxTQUFTSyxPQUFPQyxLQUFLO0lBQ3BCLElBQUk7UUFDSCxPQUFPWCxtQkFBbUJXO0lBQzNCLEVBQUUsT0FBTTtRQUNQLElBQUlDLFNBQVNELE1BQU1FLEtBQUssQ0FBQ25CLGtCQUFrQixFQUFFO1FBRTdDLElBQUssSUFBSW9CLElBQUksR0FBR0EsSUFBSUYsT0FBT1YsTUFBTSxFQUFFWSxJQUFLO1lBQ3ZDSCxRQUFRZCxpQkFBaUJlLFFBQVFFLEdBQUdiLElBQUksQ0FBQztZQUV6Q1csU0FBU0QsTUFBTUUsS0FBSyxDQUFDbkIsa0JBQWtCLEVBQUU7UUFDMUM7UUFFQSxPQUFPaUI7SUFDUjtBQUNEO0FBRUEsU0FBU0kseUJBQXlCSixLQUFLO0lBQ3RDLHdFQUF3RTtJQUN4RSxNQUFNSyxhQUFhO1FBQ2xCLFVBQVU7UUFDVixVQUFVO0lBQ1g7SUFFQSxJQUFJSCxRQUFRakIsYUFBYXFCLElBQUksQ0FBQ047SUFDOUIsTUFBT0UsTUFBTztRQUNiLElBQUk7WUFDSCxtQ0FBbUM7WUFDbkNHLFVBQVUsQ0FBQ0gsS0FBSyxDQUFDLEVBQUUsQ0FBQyxHQUFHYixtQkFBbUJhLEtBQUssQ0FBQyxFQUFFO1FBQ25ELEVBQUUsT0FBTTtZQUNQLE1BQU1LLFNBQVNSLE9BQU9HLEtBQUssQ0FBQyxFQUFFO1lBRTlCLElBQUlLLFdBQVdMLEtBQUssQ0FBQyxFQUFFLEVBQUU7Z0JBQ3hCRyxVQUFVLENBQUNILEtBQUssQ0FBQyxFQUFFLENBQUMsR0FBR0s7WUFDeEI7UUFDRDtRQUVBTCxRQUFRakIsYUFBYXFCLElBQUksQ0FBQ047SUFDM0I7SUFFQSx5R0FBeUc7SUFDekdLLFVBQVUsQ0FBQyxNQUFNLEdBQUc7SUFFcEIsTUFBTUcsVUFBVUMsT0FBT0MsSUFBSSxDQUFDTDtJQUU1QixLQUFLLE1BQU1NLE9BQU9ILFFBQVM7UUFDMUIsaUNBQWlDO1FBQ2pDUixRQUFRQSxNQUFNWSxPQUFPLENBQUMsSUFBSTVCLE9BQU8yQixLQUFLLE1BQU1OLFVBQVUsQ0FBQ00sSUFBSTtJQUM1RDtJQUVBLE9BQU9YO0FBQ1I7QUFFZSxTQUFTYSxtQkFBbUJDLFVBQVU7SUFDcEQsSUFBSSxPQUFPQSxlQUFlLFVBQVU7UUFDbkMsTUFBTSxJQUFJQyxVQUFVLHdEQUF3RCxPQUFPRCxhQUFhO0lBQ2pHO0lBRUEsSUFBSTtRQUNILGlDQUFpQztRQUNqQyxPQUFPekIsbUJBQW1CeUI7SUFDM0IsRUFBRSxPQUFNO1FBQ1Asc0NBQXNDO1FBQ3RDLE9BQU9WLHlCQUF5QlU7SUFDakM7QUFDRCIsInNvdXJjZXMiOlsid2VicGFjazovL3ZpZGVvLXN0cmVhbWluZy8uL25vZGVfbW9kdWxlcy9kZWNvZGUtdXJpLWNvbXBvbmVudC9pbmRleC5qcz9hZjBkIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHRva2VuID0gJyVbYS1mMC05XXsyfSc7XG5jb25zdCBzaW5nbGVNYXRjaGVyID0gbmV3IFJlZ0V4cCgnKCcgKyB0b2tlbiArICcpfChbXiVdKz8pJywgJ2dpJyk7XG5jb25zdCBtdWx0aU1hdGNoZXIgPSBuZXcgUmVnRXhwKCcoJyArIHRva2VuICsgJykrJywgJ2dpJyk7XG5cbmZ1bmN0aW9uIGRlY29kZUNvbXBvbmVudHMoY29tcG9uZW50cywgc3BsaXQpIHtcblx0dHJ5IHtcblx0XHQvLyBUcnkgdG8gZGVjb2RlIHRoZSBlbnRpcmUgc3RyaW5nIGZpcnN0XG5cdFx0cmV0dXJuIFtkZWNvZGVVUklDb21wb25lbnQoY29tcG9uZW50cy5qb2luKCcnKSldO1xuXHR9IGNhdGNoIHtcblx0XHQvLyBEbyBub3RoaW5nXG5cdH1cblxuXHRpZiAoY29tcG9uZW50cy5sZW5ndGggPT09IDEpIHtcblx0XHRyZXR1cm4gY29tcG9uZW50cztcblx0fVxuXG5cdHNwbGl0ID0gc3BsaXQgfHwgMTtcblxuXHQvLyBTcGxpdCB0aGUgYXJyYXkgaW4gMiBwYXJ0c1xuXHRjb25zdCBsZWZ0ID0gY29tcG9uZW50cy5zbGljZSgwLCBzcGxpdCk7XG5cdGNvbnN0IHJpZ2h0ID0gY29tcG9uZW50cy5zbGljZShzcGxpdCk7XG5cblx0cmV0dXJuIEFycmF5LnByb3RvdHlwZS5jb25jYXQuY2FsbChbXSwgZGVjb2RlQ29tcG9uZW50cyhsZWZ0KSwgZGVjb2RlQ29tcG9uZW50cyhyaWdodCkpO1xufVxuXG5mdW5jdGlvbiBkZWNvZGUoaW5wdXQpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KGlucHV0KTtcblx0fSBjYXRjaCB7XG5cdFx0bGV0IHRva2VucyA9IGlucHV0Lm1hdGNoKHNpbmdsZU1hdGNoZXIpIHx8IFtdO1xuXG5cdFx0Zm9yIChsZXQgaSA9IDE7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcblx0XHRcdGlucHV0ID0gZGVjb2RlQ29tcG9uZW50cyh0b2tlbnMsIGkpLmpvaW4oJycpO1xuXG5cdFx0XHR0b2tlbnMgPSBpbnB1dC5tYXRjaChzaW5nbGVNYXRjaGVyKSB8fCBbXTtcblx0XHR9XG5cblx0XHRyZXR1cm4gaW5wdXQ7XG5cdH1cbn1cblxuZnVuY3Rpb24gY3VzdG9tRGVjb2RlVVJJQ29tcG9uZW50KGlucHV0KSB7XG5cdC8vIEtlZXAgdHJhY2sgb2YgYWxsIHRoZSByZXBsYWNlbWVudHMgYW5kIHByZWZpbGwgdGhlIG1hcCB3aXRoIHRoZSBgQk9NYFxuXHRjb25zdCByZXBsYWNlTWFwID0ge1xuXHRcdCclRkUlRkYnOiAnXFx1RkZGRFxcdUZGRkQnLFxuXHRcdCclRkYlRkUnOiAnXFx1RkZGRFxcdUZGRkQnLFxuXHR9O1xuXG5cdGxldCBtYXRjaCA9IG11bHRpTWF0Y2hlci5leGVjKGlucHV0KTtcblx0d2hpbGUgKG1hdGNoKSB7XG5cdFx0dHJ5IHtcblx0XHRcdC8vIERlY29kZSBhcyBiaWcgY2h1bmtzIGFzIHBvc3NpYmxlXG5cdFx0XHRyZXBsYWNlTWFwW21hdGNoWzBdXSA9IGRlY29kZVVSSUNvbXBvbmVudChtYXRjaFswXSk7XG5cdFx0fSBjYXRjaCB7XG5cdFx0XHRjb25zdCByZXN1bHQgPSBkZWNvZGUobWF0Y2hbMF0pO1xuXG5cdFx0XHRpZiAocmVzdWx0ICE9PSBtYXRjaFswXSkge1xuXHRcdFx0XHRyZXBsYWNlTWFwW21hdGNoWzBdXSA9IHJlc3VsdDtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRtYXRjaCA9IG11bHRpTWF0Y2hlci5leGVjKGlucHV0KTtcblx0fVxuXG5cdC8vIEFkZCBgJUMyYCBhdCB0aGUgZW5kIG9mIHRoZSBtYXAgdG8gbWFrZSBzdXJlIGl0IGRvZXMgbm90IHJlcGxhY2UgdGhlIGNvbWJpbmF0b3IgYmVmb3JlIGV2ZXJ5dGhpbmcgZWxzZVxuXHRyZXBsYWNlTWFwWyclQzInXSA9ICdcXHVGRkZEJztcblxuXHRjb25zdCBlbnRyaWVzID0gT2JqZWN0LmtleXMocmVwbGFjZU1hcCk7XG5cblx0Zm9yIChjb25zdCBrZXkgb2YgZW50cmllcykge1xuXHRcdC8vIFJlcGxhY2UgYWxsIGRlY29kZWQgY29tcG9uZW50c1xuXHRcdGlucHV0ID0gaW5wdXQucmVwbGFjZShuZXcgUmVnRXhwKGtleSwgJ2cnKSwgcmVwbGFjZU1hcFtrZXldKTtcblx0fVxuXG5cdHJldHVybiBpbnB1dDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGVjb2RlVXJpQ29tcG9uZW50KGVuY29kZWRVUkkpIHtcblx0aWYgKHR5cGVvZiBlbmNvZGVkVVJJICE9PSAnc3RyaW5nJykge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIGBlbmNvZGVkVVJJYCB0byBiZSBvZiB0eXBlIGBzdHJpbmdgLCBnb3QgYCcgKyB0eXBlb2YgZW5jb2RlZFVSSSArICdgJyk7XG5cdH1cblxuXHR0cnkge1xuXHRcdC8vIFRyeSB0aGUgYnVpbHQgaW4gZGVjb2RlciBmaXJzdFxuXHRcdHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoZW5jb2RlZFVSSSk7XG5cdH0gY2F0Y2gge1xuXHRcdC8vIEZhbGxiYWNrIHRvIGEgbW9yZSBhZHZhbmNlZCBkZWNvZGVyXG5cdFx0cmV0dXJuIGN1c3RvbURlY29kZVVSSUNvbXBvbmVudChlbmNvZGVkVVJJKTtcblx0fVxufVxuIl0sIm5hbWVzIjpbInRva2VuIiwic2luZ2xlTWF0Y2hlciIsIlJlZ0V4cCIsIm11bHRpTWF0Y2hlciIsImRlY29kZUNvbXBvbmVudHMiLCJjb21wb25lbnRzIiwic3BsaXQiLCJkZWNvZGVVUklDb21wb25lbnQiLCJqb2luIiwibGVuZ3RoIiwibGVmdCIsInNsaWNlIiwicmlnaHQiLCJBcnJheSIsInByb3RvdHlwZSIsImNvbmNhdCIsImNhbGwiLCJkZWNvZGUiLCJpbnB1dCIsInRva2VucyIsIm1hdGNoIiwiaSIsImN1c3RvbURlY29kZVVSSUNvbXBvbmVudCIsInJlcGxhY2VNYXAiLCJleGVjIiwicmVzdWx0IiwiZW50cmllcyIsIk9iamVjdCIsImtleXMiLCJrZXkiLCJyZXBsYWNlIiwiZGVjb2RlVXJpQ29tcG9uZW50IiwiZW5jb2RlZFVSSSIsIlR5cGVFcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/decode-uri-component/index.js\n");

/***/ })

};
;